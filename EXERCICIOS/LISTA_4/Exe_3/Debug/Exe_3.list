
Exe_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003730  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080037ec  080037ec  000137ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800386c  0800386c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800386c  0800386c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800386c  0800386c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800386c  0800386c  0001386c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003870  08003870  00013870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003874  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  2000000c  08003880  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08003880  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000889a  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018e5  00000000  00000000  000288ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000840  00000000  00000000  0002a1b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000778  00000000  00000000  0002a9f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001acb2  00000000  00000000  0002b170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000904d  00000000  00000000  00045e22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000af954  00000000  00000000  0004ee6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fe7c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d34  00000000  00000000  000fe818  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080037d4 	.word	0x080037d4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	080037d4 	.word	0x080037d4

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__aeabi_cfrcmple>:
 800021c:	4684      	mov	ip, r0
 800021e:	1c08      	adds	r0, r1, #0
 8000220:	4661      	mov	r1, ip
 8000222:	e7ff      	b.n	8000224 <__aeabi_cfcmpeq>

08000224 <__aeabi_cfcmpeq>:
 8000224:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000226:	f000 f8a7 	bl	8000378 <__lesf2>
 800022a:	2800      	cmp	r0, #0
 800022c:	d401      	bmi.n	8000232 <__aeabi_cfcmpeq+0xe>
 800022e:	2100      	movs	r1, #0
 8000230:	42c8      	cmn	r0, r1
 8000232:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000234 <__aeabi_fcmpeq>:
 8000234:	b510      	push	{r4, lr}
 8000236:	f000 f82b 	bl	8000290 <__eqsf2>
 800023a:	4240      	negs	r0, r0
 800023c:	3001      	adds	r0, #1
 800023e:	bd10      	pop	{r4, pc}

08000240 <__aeabi_fcmplt>:
 8000240:	b510      	push	{r4, lr}
 8000242:	f000 f899 	bl	8000378 <__lesf2>
 8000246:	2800      	cmp	r0, #0
 8000248:	db01      	blt.n	800024e <__aeabi_fcmplt+0xe>
 800024a:	2000      	movs	r0, #0
 800024c:	bd10      	pop	{r4, pc}
 800024e:	2001      	movs	r0, #1
 8000250:	bd10      	pop	{r4, pc}
 8000252:	46c0      	nop			; (mov r8, r8)

08000254 <__aeabi_fcmple>:
 8000254:	b510      	push	{r4, lr}
 8000256:	f000 f88f 	bl	8000378 <__lesf2>
 800025a:	2800      	cmp	r0, #0
 800025c:	dd01      	ble.n	8000262 <__aeabi_fcmple+0xe>
 800025e:	2000      	movs	r0, #0
 8000260:	bd10      	pop	{r4, pc}
 8000262:	2001      	movs	r0, #1
 8000264:	bd10      	pop	{r4, pc}
 8000266:	46c0      	nop			; (mov r8, r8)

08000268 <__aeabi_fcmpgt>:
 8000268:	b510      	push	{r4, lr}
 800026a:	f000 f839 	bl	80002e0 <__gesf2>
 800026e:	2800      	cmp	r0, #0
 8000270:	dc01      	bgt.n	8000276 <__aeabi_fcmpgt+0xe>
 8000272:	2000      	movs	r0, #0
 8000274:	bd10      	pop	{r4, pc}
 8000276:	2001      	movs	r0, #1
 8000278:	bd10      	pop	{r4, pc}
 800027a:	46c0      	nop			; (mov r8, r8)

0800027c <__aeabi_fcmpge>:
 800027c:	b510      	push	{r4, lr}
 800027e:	f000 f82f 	bl	80002e0 <__gesf2>
 8000282:	2800      	cmp	r0, #0
 8000284:	da01      	bge.n	800028a <__aeabi_fcmpge+0xe>
 8000286:	2000      	movs	r0, #0
 8000288:	bd10      	pop	{r4, pc}
 800028a:	2001      	movs	r0, #1
 800028c:	bd10      	pop	{r4, pc}
 800028e:	46c0      	nop			; (mov r8, r8)

08000290 <__eqsf2>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	0042      	lsls	r2, r0, #1
 8000294:	024e      	lsls	r6, r1, #9
 8000296:	004c      	lsls	r4, r1, #1
 8000298:	0245      	lsls	r5, r0, #9
 800029a:	0a6d      	lsrs	r5, r5, #9
 800029c:	0e12      	lsrs	r2, r2, #24
 800029e:	0fc3      	lsrs	r3, r0, #31
 80002a0:	0a76      	lsrs	r6, r6, #9
 80002a2:	0e24      	lsrs	r4, r4, #24
 80002a4:	0fc9      	lsrs	r1, r1, #31
 80002a6:	2aff      	cmp	r2, #255	; 0xff
 80002a8:	d00f      	beq.n	80002ca <__eqsf2+0x3a>
 80002aa:	2cff      	cmp	r4, #255	; 0xff
 80002ac:	d011      	beq.n	80002d2 <__eqsf2+0x42>
 80002ae:	2001      	movs	r0, #1
 80002b0:	42a2      	cmp	r2, r4
 80002b2:	d000      	beq.n	80002b6 <__eqsf2+0x26>
 80002b4:	bd70      	pop	{r4, r5, r6, pc}
 80002b6:	42b5      	cmp	r5, r6
 80002b8:	d1fc      	bne.n	80002b4 <__eqsf2+0x24>
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d00d      	beq.n	80002da <__eqsf2+0x4a>
 80002be:	2a00      	cmp	r2, #0
 80002c0:	d1f8      	bne.n	80002b4 <__eqsf2+0x24>
 80002c2:	0028      	movs	r0, r5
 80002c4:	1e45      	subs	r5, r0, #1
 80002c6:	41a8      	sbcs	r0, r5
 80002c8:	e7f4      	b.n	80002b4 <__eqsf2+0x24>
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d1f1      	bne.n	80002b4 <__eqsf2+0x24>
 80002d0:	e7eb      	b.n	80002aa <__eqsf2+0x1a>
 80002d2:	2001      	movs	r0, #1
 80002d4:	2e00      	cmp	r6, #0
 80002d6:	d1ed      	bne.n	80002b4 <__eqsf2+0x24>
 80002d8:	e7e9      	b.n	80002ae <__eqsf2+0x1e>
 80002da:	2000      	movs	r0, #0
 80002dc:	e7ea      	b.n	80002b4 <__eqsf2+0x24>
 80002de:	46c0      	nop			; (mov r8, r8)

080002e0 <__gesf2>:
 80002e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002e2:	0042      	lsls	r2, r0, #1
 80002e4:	0246      	lsls	r6, r0, #9
 80002e6:	024d      	lsls	r5, r1, #9
 80002e8:	004c      	lsls	r4, r1, #1
 80002ea:	0fc3      	lsrs	r3, r0, #31
 80002ec:	0a76      	lsrs	r6, r6, #9
 80002ee:	0e12      	lsrs	r2, r2, #24
 80002f0:	0a6d      	lsrs	r5, r5, #9
 80002f2:	0e24      	lsrs	r4, r4, #24
 80002f4:	0fc8      	lsrs	r0, r1, #31
 80002f6:	2aff      	cmp	r2, #255	; 0xff
 80002f8:	d01f      	beq.n	800033a <__gesf2+0x5a>
 80002fa:	2cff      	cmp	r4, #255	; 0xff
 80002fc:	d010      	beq.n	8000320 <__gesf2+0x40>
 80002fe:	2a00      	cmp	r2, #0
 8000300:	d11f      	bne.n	8000342 <__gesf2+0x62>
 8000302:	4271      	negs	r1, r6
 8000304:	4171      	adcs	r1, r6
 8000306:	2c00      	cmp	r4, #0
 8000308:	d101      	bne.n	800030e <__gesf2+0x2e>
 800030a:	2d00      	cmp	r5, #0
 800030c:	d01e      	beq.n	800034c <__gesf2+0x6c>
 800030e:	2900      	cmp	r1, #0
 8000310:	d10e      	bne.n	8000330 <__gesf2+0x50>
 8000312:	4283      	cmp	r3, r0
 8000314:	d01e      	beq.n	8000354 <__gesf2+0x74>
 8000316:	2102      	movs	r1, #2
 8000318:	1e58      	subs	r0, r3, #1
 800031a:	4008      	ands	r0, r1
 800031c:	3801      	subs	r0, #1
 800031e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000320:	2d00      	cmp	r5, #0
 8000322:	d126      	bne.n	8000372 <__gesf2+0x92>
 8000324:	2a00      	cmp	r2, #0
 8000326:	d1f4      	bne.n	8000312 <__gesf2+0x32>
 8000328:	4271      	negs	r1, r6
 800032a:	4171      	adcs	r1, r6
 800032c:	2900      	cmp	r1, #0
 800032e:	d0f0      	beq.n	8000312 <__gesf2+0x32>
 8000330:	2800      	cmp	r0, #0
 8000332:	d1f4      	bne.n	800031e <__gesf2+0x3e>
 8000334:	2001      	movs	r0, #1
 8000336:	4240      	negs	r0, r0
 8000338:	e7f1      	b.n	800031e <__gesf2+0x3e>
 800033a:	2e00      	cmp	r6, #0
 800033c:	d119      	bne.n	8000372 <__gesf2+0x92>
 800033e:	2cff      	cmp	r4, #255	; 0xff
 8000340:	d0ee      	beq.n	8000320 <__gesf2+0x40>
 8000342:	2c00      	cmp	r4, #0
 8000344:	d1e5      	bne.n	8000312 <__gesf2+0x32>
 8000346:	2d00      	cmp	r5, #0
 8000348:	d1e3      	bne.n	8000312 <__gesf2+0x32>
 800034a:	e7e4      	b.n	8000316 <__gesf2+0x36>
 800034c:	2000      	movs	r0, #0
 800034e:	2e00      	cmp	r6, #0
 8000350:	d0e5      	beq.n	800031e <__gesf2+0x3e>
 8000352:	e7e0      	b.n	8000316 <__gesf2+0x36>
 8000354:	42a2      	cmp	r2, r4
 8000356:	dc05      	bgt.n	8000364 <__gesf2+0x84>
 8000358:	dbea      	blt.n	8000330 <__gesf2+0x50>
 800035a:	42ae      	cmp	r6, r5
 800035c:	d802      	bhi.n	8000364 <__gesf2+0x84>
 800035e:	d3e7      	bcc.n	8000330 <__gesf2+0x50>
 8000360:	2000      	movs	r0, #0
 8000362:	e7dc      	b.n	800031e <__gesf2+0x3e>
 8000364:	4241      	negs	r1, r0
 8000366:	4141      	adcs	r1, r0
 8000368:	4248      	negs	r0, r1
 800036a:	2102      	movs	r1, #2
 800036c:	4008      	ands	r0, r1
 800036e:	3801      	subs	r0, #1
 8000370:	e7d5      	b.n	800031e <__gesf2+0x3e>
 8000372:	2002      	movs	r0, #2
 8000374:	4240      	negs	r0, r0
 8000376:	e7d2      	b.n	800031e <__gesf2+0x3e>

08000378 <__lesf2>:
 8000378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800037a:	0042      	lsls	r2, r0, #1
 800037c:	0246      	lsls	r6, r0, #9
 800037e:	024d      	lsls	r5, r1, #9
 8000380:	004c      	lsls	r4, r1, #1
 8000382:	0fc3      	lsrs	r3, r0, #31
 8000384:	0a76      	lsrs	r6, r6, #9
 8000386:	0e12      	lsrs	r2, r2, #24
 8000388:	0a6d      	lsrs	r5, r5, #9
 800038a:	0e24      	lsrs	r4, r4, #24
 800038c:	0fc8      	lsrs	r0, r1, #31
 800038e:	2aff      	cmp	r2, #255	; 0xff
 8000390:	d00d      	beq.n	80003ae <__lesf2+0x36>
 8000392:	2cff      	cmp	r4, #255	; 0xff
 8000394:	d00f      	beq.n	80003b6 <__lesf2+0x3e>
 8000396:	2a00      	cmp	r2, #0
 8000398:	d123      	bne.n	80003e2 <__lesf2+0x6a>
 800039a:	4271      	negs	r1, r6
 800039c:	4171      	adcs	r1, r6
 800039e:	2c00      	cmp	r4, #0
 80003a0:	d10f      	bne.n	80003c2 <__lesf2+0x4a>
 80003a2:	2d00      	cmp	r5, #0
 80003a4:	d10d      	bne.n	80003c2 <__lesf2+0x4a>
 80003a6:	2000      	movs	r0, #0
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d014      	beq.n	80003d6 <__lesf2+0x5e>
 80003ac:	e00d      	b.n	80003ca <__lesf2+0x52>
 80003ae:	2e00      	cmp	r6, #0
 80003b0:	d110      	bne.n	80003d4 <__lesf2+0x5c>
 80003b2:	2cff      	cmp	r4, #255	; 0xff
 80003b4:	d115      	bne.n	80003e2 <__lesf2+0x6a>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	d10c      	bne.n	80003d4 <__lesf2+0x5c>
 80003ba:	2a00      	cmp	r2, #0
 80003bc:	d103      	bne.n	80003c6 <__lesf2+0x4e>
 80003be:	4271      	negs	r1, r6
 80003c0:	4171      	adcs	r1, r6
 80003c2:	2900      	cmp	r1, #0
 80003c4:	d108      	bne.n	80003d8 <__lesf2+0x60>
 80003c6:	4283      	cmp	r3, r0
 80003c8:	d010      	beq.n	80003ec <__lesf2+0x74>
 80003ca:	2102      	movs	r1, #2
 80003cc:	1e58      	subs	r0, r3, #1
 80003ce:	4008      	ands	r0, r1
 80003d0:	3801      	subs	r0, #1
 80003d2:	e000      	b.n	80003d6 <__lesf2+0x5e>
 80003d4:	2002      	movs	r0, #2
 80003d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003d8:	2800      	cmp	r0, #0
 80003da:	d1fc      	bne.n	80003d6 <__lesf2+0x5e>
 80003dc:	2001      	movs	r0, #1
 80003de:	4240      	negs	r0, r0
 80003e0:	e7f9      	b.n	80003d6 <__lesf2+0x5e>
 80003e2:	2c00      	cmp	r4, #0
 80003e4:	d1ef      	bne.n	80003c6 <__lesf2+0x4e>
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d1ed      	bne.n	80003c6 <__lesf2+0x4e>
 80003ea:	e7ee      	b.n	80003ca <__lesf2+0x52>
 80003ec:	42a2      	cmp	r2, r4
 80003ee:	dc05      	bgt.n	80003fc <__lesf2+0x84>
 80003f0:	dbf2      	blt.n	80003d8 <__lesf2+0x60>
 80003f2:	42ae      	cmp	r6, r5
 80003f4:	d802      	bhi.n	80003fc <__lesf2+0x84>
 80003f6:	d3ef      	bcc.n	80003d8 <__lesf2+0x60>
 80003f8:	2000      	movs	r0, #0
 80003fa:	e7ec      	b.n	80003d6 <__lesf2+0x5e>
 80003fc:	4241      	negs	r1, r0
 80003fe:	4141      	adcs	r1, r0
 8000400:	4248      	negs	r0, r1
 8000402:	2102      	movs	r1, #2
 8000404:	4008      	ands	r0, r1
 8000406:	3801      	subs	r0, #1
 8000408:	e7e5      	b.n	80003d6 <__lesf2+0x5e>
 800040a:	46c0      	nop			; (mov r8, r8)

0800040c <__aeabi_dmul>:
 800040c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800040e:	4657      	mov	r7, sl
 8000410:	464e      	mov	r6, r9
 8000412:	4645      	mov	r5, r8
 8000414:	46de      	mov	lr, fp
 8000416:	b5e0      	push	{r5, r6, r7, lr}
 8000418:	4698      	mov	r8, r3
 800041a:	030c      	lsls	r4, r1, #12
 800041c:	004b      	lsls	r3, r1, #1
 800041e:	0006      	movs	r6, r0
 8000420:	4692      	mov	sl, r2
 8000422:	b087      	sub	sp, #28
 8000424:	0b24      	lsrs	r4, r4, #12
 8000426:	0d5b      	lsrs	r3, r3, #21
 8000428:	0fcf      	lsrs	r7, r1, #31
 800042a:	2b00      	cmp	r3, #0
 800042c:	d06c      	beq.n	8000508 <__aeabi_dmul+0xfc>
 800042e:	4add      	ldr	r2, [pc, #884]	; (80007a4 <__aeabi_dmul+0x398>)
 8000430:	4293      	cmp	r3, r2
 8000432:	d100      	bne.n	8000436 <__aeabi_dmul+0x2a>
 8000434:	e086      	b.n	8000544 <__aeabi_dmul+0x138>
 8000436:	0f42      	lsrs	r2, r0, #29
 8000438:	00e4      	lsls	r4, r4, #3
 800043a:	4314      	orrs	r4, r2
 800043c:	2280      	movs	r2, #128	; 0x80
 800043e:	0412      	lsls	r2, r2, #16
 8000440:	4314      	orrs	r4, r2
 8000442:	4ad9      	ldr	r2, [pc, #868]	; (80007a8 <__aeabi_dmul+0x39c>)
 8000444:	00c5      	lsls	r5, r0, #3
 8000446:	4694      	mov	ip, r2
 8000448:	4463      	add	r3, ip
 800044a:	9300      	str	r3, [sp, #0]
 800044c:	2300      	movs	r3, #0
 800044e:	4699      	mov	r9, r3
 8000450:	469b      	mov	fp, r3
 8000452:	4643      	mov	r3, r8
 8000454:	4642      	mov	r2, r8
 8000456:	031e      	lsls	r6, r3, #12
 8000458:	0fd2      	lsrs	r2, r2, #31
 800045a:	005b      	lsls	r3, r3, #1
 800045c:	4650      	mov	r0, sl
 800045e:	4690      	mov	r8, r2
 8000460:	0b36      	lsrs	r6, r6, #12
 8000462:	0d5b      	lsrs	r3, r3, #21
 8000464:	d100      	bne.n	8000468 <__aeabi_dmul+0x5c>
 8000466:	e078      	b.n	800055a <__aeabi_dmul+0x14e>
 8000468:	4ace      	ldr	r2, [pc, #824]	; (80007a4 <__aeabi_dmul+0x398>)
 800046a:	4293      	cmp	r3, r2
 800046c:	d01d      	beq.n	80004aa <__aeabi_dmul+0x9e>
 800046e:	49ce      	ldr	r1, [pc, #824]	; (80007a8 <__aeabi_dmul+0x39c>)
 8000470:	0f42      	lsrs	r2, r0, #29
 8000472:	468c      	mov	ip, r1
 8000474:	9900      	ldr	r1, [sp, #0]
 8000476:	4463      	add	r3, ip
 8000478:	00f6      	lsls	r6, r6, #3
 800047a:	468c      	mov	ip, r1
 800047c:	4316      	orrs	r6, r2
 800047e:	2280      	movs	r2, #128	; 0x80
 8000480:	449c      	add	ip, r3
 8000482:	0412      	lsls	r2, r2, #16
 8000484:	4663      	mov	r3, ip
 8000486:	4316      	orrs	r6, r2
 8000488:	00c2      	lsls	r2, r0, #3
 800048a:	2000      	movs	r0, #0
 800048c:	9300      	str	r3, [sp, #0]
 800048e:	9900      	ldr	r1, [sp, #0]
 8000490:	4643      	mov	r3, r8
 8000492:	3101      	adds	r1, #1
 8000494:	468c      	mov	ip, r1
 8000496:	4649      	mov	r1, r9
 8000498:	407b      	eors	r3, r7
 800049a:	9301      	str	r3, [sp, #4]
 800049c:	290f      	cmp	r1, #15
 800049e:	d900      	bls.n	80004a2 <__aeabi_dmul+0x96>
 80004a0:	e07e      	b.n	80005a0 <__aeabi_dmul+0x194>
 80004a2:	4bc2      	ldr	r3, [pc, #776]	; (80007ac <__aeabi_dmul+0x3a0>)
 80004a4:	0089      	lsls	r1, r1, #2
 80004a6:	5859      	ldr	r1, [r3, r1]
 80004a8:	468f      	mov	pc, r1
 80004aa:	4652      	mov	r2, sl
 80004ac:	9b00      	ldr	r3, [sp, #0]
 80004ae:	4332      	orrs	r2, r6
 80004b0:	d000      	beq.n	80004b4 <__aeabi_dmul+0xa8>
 80004b2:	e156      	b.n	8000762 <__aeabi_dmul+0x356>
 80004b4:	49bb      	ldr	r1, [pc, #748]	; (80007a4 <__aeabi_dmul+0x398>)
 80004b6:	2600      	movs	r6, #0
 80004b8:	468c      	mov	ip, r1
 80004ba:	4463      	add	r3, ip
 80004bc:	4649      	mov	r1, r9
 80004be:	9300      	str	r3, [sp, #0]
 80004c0:	2302      	movs	r3, #2
 80004c2:	4319      	orrs	r1, r3
 80004c4:	4689      	mov	r9, r1
 80004c6:	2002      	movs	r0, #2
 80004c8:	e7e1      	b.n	800048e <__aeabi_dmul+0x82>
 80004ca:	4643      	mov	r3, r8
 80004cc:	9301      	str	r3, [sp, #4]
 80004ce:	0034      	movs	r4, r6
 80004d0:	0015      	movs	r5, r2
 80004d2:	4683      	mov	fp, r0
 80004d4:	465b      	mov	r3, fp
 80004d6:	2b02      	cmp	r3, #2
 80004d8:	d05e      	beq.n	8000598 <__aeabi_dmul+0x18c>
 80004da:	2b03      	cmp	r3, #3
 80004dc:	d100      	bne.n	80004e0 <__aeabi_dmul+0xd4>
 80004de:	e1f3      	b.n	80008c8 <__aeabi_dmul+0x4bc>
 80004e0:	2b01      	cmp	r3, #1
 80004e2:	d000      	beq.n	80004e6 <__aeabi_dmul+0xda>
 80004e4:	e118      	b.n	8000718 <__aeabi_dmul+0x30c>
 80004e6:	2200      	movs	r2, #0
 80004e8:	2400      	movs	r4, #0
 80004ea:	2500      	movs	r5, #0
 80004ec:	9b01      	ldr	r3, [sp, #4]
 80004ee:	0512      	lsls	r2, r2, #20
 80004f0:	4322      	orrs	r2, r4
 80004f2:	07db      	lsls	r3, r3, #31
 80004f4:	431a      	orrs	r2, r3
 80004f6:	0028      	movs	r0, r5
 80004f8:	0011      	movs	r1, r2
 80004fa:	b007      	add	sp, #28
 80004fc:	bcf0      	pop	{r4, r5, r6, r7}
 80004fe:	46bb      	mov	fp, r7
 8000500:	46b2      	mov	sl, r6
 8000502:	46a9      	mov	r9, r5
 8000504:	46a0      	mov	r8, r4
 8000506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000508:	0025      	movs	r5, r4
 800050a:	4305      	orrs	r5, r0
 800050c:	d100      	bne.n	8000510 <__aeabi_dmul+0x104>
 800050e:	e141      	b.n	8000794 <__aeabi_dmul+0x388>
 8000510:	2c00      	cmp	r4, #0
 8000512:	d100      	bne.n	8000516 <__aeabi_dmul+0x10a>
 8000514:	e1ad      	b.n	8000872 <__aeabi_dmul+0x466>
 8000516:	0020      	movs	r0, r4
 8000518:	f000 fa92 	bl	8000a40 <__clzsi2>
 800051c:	0001      	movs	r1, r0
 800051e:	0002      	movs	r2, r0
 8000520:	390b      	subs	r1, #11
 8000522:	231d      	movs	r3, #29
 8000524:	0010      	movs	r0, r2
 8000526:	1a5b      	subs	r3, r3, r1
 8000528:	0031      	movs	r1, r6
 800052a:	0035      	movs	r5, r6
 800052c:	3808      	subs	r0, #8
 800052e:	4084      	lsls	r4, r0
 8000530:	40d9      	lsrs	r1, r3
 8000532:	4085      	lsls	r5, r0
 8000534:	430c      	orrs	r4, r1
 8000536:	489e      	ldr	r0, [pc, #632]	; (80007b0 <__aeabi_dmul+0x3a4>)
 8000538:	1a83      	subs	r3, r0, r2
 800053a:	9300      	str	r3, [sp, #0]
 800053c:	2300      	movs	r3, #0
 800053e:	4699      	mov	r9, r3
 8000540:	469b      	mov	fp, r3
 8000542:	e786      	b.n	8000452 <__aeabi_dmul+0x46>
 8000544:	0005      	movs	r5, r0
 8000546:	4325      	orrs	r5, r4
 8000548:	d000      	beq.n	800054c <__aeabi_dmul+0x140>
 800054a:	e11c      	b.n	8000786 <__aeabi_dmul+0x37a>
 800054c:	2208      	movs	r2, #8
 800054e:	9300      	str	r3, [sp, #0]
 8000550:	2302      	movs	r3, #2
 8000552:	2400      	movs	r4, #0
 8000554:	4691      	mov	r9, r2
 8000556:	469b      	mov	fp, r3
 8000558:	e77b      	b.n	8000452 <__aeabi_dmul+0x46>
 800055a:	4652      	mov	r2, sl
 800055c:	4332      	orrs	r2, r6
 800055e:	d100      	bne.n	8000562 <__aeabi_dmul+0x156>
 8000560:	e10a      	b.n	8000778 <__aeabi_dmul+0x36c>
 8000562:	2e00      	cmp	r6, #0
 8000564:	d100      	bne.n	8000568 <__aeabi_dmul+0x15c>
 8000566:	e176      	b.n	8000856 <__aeabi_dmul+0x44a>
 8000568:	0030      	movs	r0, r6
 800056a:	f000 fa69 	bl	8000a40 <__clzsi2>
 800056e:	0002      	movs	r2, r0
 8000570:	3a0b      	subs	r2, #11
 8000572:	231d      	movs	r3, #29
 8000574:	0001      	movs	r1, r0
 8000576:	1a9b      	subs	r3, r3, r2
 8000578:	4652      	mov	r2, sl
 800057a:	3908      	subs	r1, #8
 800057c:	40da      	lsrs	r2, r3
 800057e:	408e      	lsls	r6, r1
 8000580:	4316      	orrs	r6, r2
 8000582:	4652      	mov	r2, sl
 8000584:	408a      	lsls	r2, r1
 8000586:	9b00      	ldr	r3, [sp, #0]
 8000588:	4989      	ldr	r1, [pc, #548]	; (80007b0 <__aeabi_dmul+0x3a4>)
 800058a:	1a18      	subs	r0, r3, r0
 800058c:	0003      	movs	r3, r0
 800058e:	468c      	mov	ip, r1
 8000590:	4463      	add	r3, ip
 8000592:	2000      	movs	r0, #0
 8000594:	9300      	str	r3, [sp, #0]
 8000596:	e77a      	b.n	800048e <__aeabi_dmul+0x82>
 8000598:	2400      	movs	r4, #0
 800059a:	2500      	movs	r5, #0
 800059c:	4a81      	ldr	r2, [pc, #516]	; (80007a4 <__aeabi_dmul+0x398>)
 800059e:	e7a5      	b.n	80004ec <__aeabi_dmul+0xe0>
 80005a0:	0c2f      	lsrs	r7, r5, #16
 80005a2:	042d      	lsls	r5, r5, #16
 80005a4:	0c2d      	lsrs	r5, r5, #16
 80005a6:	002b      	movs	r3, r5
 80005a8:	0c11      	lsrs	r1, r2, #16
 80005aa:	0412      	lsls	r2, r2, #16
 80005ac:	0c12      	lsrs	r2, r2, #16
 80005ae:	4353      	muls	r3, r2
 80005b0:	4698      	mov	r8, r3
 80005b2:	0013      	movs	r3, r2
 80005b4:	0028      	movs	r0, r5
 80005b6:	437b      	muls	r3, r7
 80005b8:	4699      	mov	r9, r3
 80005ba:	4348      	muls	r0, r1
 80005bc:	4448      	add	r0, r9
 80005be:	4683      	mov	fp, r0
 80005c0:	4640      	mov	r0, r8
 80005c2:	000b      	movs	r3, r1
 80005c4:	0c00      	lsrs	r0, r0, #16
 80005c6:	4682      	mov	sl, r0
 80005c8:	4658      	mov	r0, fp
 80005ca:	437b      	muls	r3, r7
 80005cc:	4450      	add	r0, sl
 80005ce:	9302      	str	r3, [sp, #8]
 80005d0:	4581      	cmp	r9, r0
 80005d2:	d906      	bls.n	80005e2 <__aeabi_dmul+0x1d6>
 80005d4:	469a      	mov	sl, r3
 80005d6:	2380      	movs	r3, #128	; 0x80
 80005d8:	025b      	lsls	r3, r3, #9
 80005da:	4699      	mov	r9, r3
 80005dc:	44ca      	add	sl, r9
 80005de:	4653      	mov	r3, sl
 80005e0:	9302      	str	r3, [sp, #8]
 80005e2:	0c03      	lsrs	r3, r0, #16
 80005e4:	469b      	mov	fp, r3
 80005e6:	4643      	mov	r3, r8
 80005e8:	041b      	lsls	r3, r3, #16
 80005ea:	0400      	lsls	r0, r0, #16
 80005ec:	0c1b      	lsrs	r3, r3, #16
 80005ee:	4698      	mov	r8, r3
 80005f0:	0003      	movs	r3, r0
 80005f2:	4443      	add	r3, r8
 80005f4:	9304      	str	r3, [sp, #16]
 80005f6:	0c33      	lsrs	r3, r6, #16
 80005f8:	4699      	mov	r9, r3
 80005fa:	002b      	movs	r3, r5
 80005fc:	0436      	lsls	r6, r6, #16
 80005fe:	0c36      	lsrs	r6, r6, #16
 8000600:	4373      	muls	r3, r6
 8000602:	4698      	mov	r8, r3
 8000604:	0033      	movs	r3, r6
 8000606:	437b      	muls	r3, r7
 8000608:	469a      	mov	sl, r3
 800060a:	464b      	mov	r3, r9
 800060c:	435d      	muls	r5, r3
 800060e:	435f      	muls	r7, r3
 8000610:	4643      	mov	r3, r8
 8000612:	4455      	add	r5, sl
 8000614:	0c18      	lsrs	r0, r3, #16
 8000616:	1940      	adds	r0, r0, r5
 8000618:	4582      	cmp	sl, r0
 800061a:	d903      	bls.n	8000624 <__aeabi_dmul+0x218>
 800061c:	2380      	movs	r3, #128	; 0x80
 800061e:	025b      	lsls	r3, r3, #9
 8000620:	469a      	mov	sl, r3
 8000622:	4457      	add	r7, sl
 8000624:	0c05      	lsrs	r5, r0, #16
 8000626:	19eb      	adds	r3, r5, r7
 8000628:	9305      	str	r3, [sp, #20]
 800062a:	4643      	mov	r3, r8
 800062c:	041d      	lsls	r5, r3, #16
 800062e:	0c2d      	lsrs	r5, r5, #16
 8000630:	0400      	lsls	r0, r0, #16
 8000632:	1940      	adds	r0, r0, r5
 8000634:	0c25      	lsrs	r5, r4, #16
 8000636:	0424      	lsls	r4, r4, #16
 8000638:	0c24      	lsrs	r4, r4, #16
 800063a:	0027      	movs	r7, r4
 800063c:	4357      	muls	r7, r2
 800063e:	436a      	muls	r2, r5
 8000640:	4690      	mov	r8, r2
 8000642:	002a      	movs	r2, r5
 8000644:	0c3b      	lsrs	r3, r7, #16
 8000646:	469a      	mov	sl, r3
 8000648:	434a      	muls	r2, r1
 800064a:	4361      	muls	r1, r4
 800064c:	4441      	add	r1, r8
 800064e:	4451      	add	r1, sl
 8000650:	4483      	add	fp, r0
 8000652:	4588      	cmp	r8, r1
 8000654:	d903      	bls.n	800065e <__aeabi_dmul+0x252>
 8000656:	2380      	movs	r3, #128	; 0x80
 8000658:	025b      	lsls	r3, r3, #9
 800065a:	4698      	mov	r8, r3
 800065c:	4442      	add	r2, r8
 800065e:	043f      	lsls	r7, r7, #16
 8000660:	0c0b      	lsrs	r3, r1, #16
 8000662:	0c3f      	lsrs	r7, r7, #16
 8000664:	0409      	lsls	r1, r1, #16
 8000666:	19c9      	adds	r1, r1, r7
 8000668:	0027      	movs	r7, r4
 800066a:	4698      	mov	r8, r3
 800066c:	464b      	mov	r3, r9
 800066e:	4377      	muls	r7, r6
 8000670:	435c      	muls	r4, r3
 8000672:	436e      	muls	r6, r5
 8000674:	435d      	muls	r5, r3
 8000676:	0c3b      	lsrs	r3, r7, #16
 8000678:	4699      	mov	r9, r3
 800067a:	19a4      	adds	r4, r4, r6
 800067c:	444c      	add	r4, r9
 800067e:	4442      	add	r2, r8
 8000680:	9503      	str	r5, [sp, #12]
 8000682:	42a6      	cmp	r6, r4
 8000684:	d904      	bls.n	8000690 <__aeabi_dmul+0x284>
 8000686:	2380      	movs	r3, #128	; 0x80
 8000688:	025b      	lsls	r3, r3, #9
 800068a:	4698      	mov	r8, r3
 800068c:	4445      	add	r5, r8
 800068e:	9503      	str	r5, [sp, #12]
 8000690:	9b02      	ldr	r3, [sp, #8]
 8000692:	043f      	lsls	r7, r7, #16
 8000694:	445b      	add	r3, fp
 8000696:	001e      	movs	r6, r3
 8000698:	4283      	cmp	r3, r0
 800069a:	4180      	sbcs	r0, r0
 800069c:	0423      	lsls	r3, r4, #16
 800069e:	4698      	mov	r8, r3
 80006a0:	9b05      	ldr	r3, [sp, #20]
 80006a2:	0c3f      	lsrs	r7, r7, #16
 80006a4:	4447      	add	r7, r8
 80006a6:	4698      	mov	r8, r3
 80006a8:	1876      	adds	r6, r6, r1
 80006aa:	428e      	cmp	r6, r1
 80006ac:	4189      	sbcs	r1, r1
 80006ae:	4447      	add	r7, r8
 80006b0:	4240      	negs	r0, r0
 80006b2:	183d      	adds	r5, r7, r0
 80006b4:	46a8      	mov	r8, r5
 80006b6:	4693      	mov	fp, r2
 80006b8:	4249      	negs	r1, r1
 80006ba:	468a      	mov	sl, r1
 80006bc:	44c3      	add	fp, r8
 80006be:	429f      	cmp	r7, r3
 80006c0:	41bf      	sbcs	r7, r7
 80006c2:	4580      	cmp	r8, r0
 80006c4:	4180      	sbcs	r0, r0
 80006c6:	9b03      	ldr	r3, [sp, #12]
 80006c8:	44da      	add	sl, fp
 80006ca:	4698      	mov	r8, r3
 80006cc:	4653      	mov	r3, sl
 80006ce:	4240      	negs	r0, r0
 80006d0:	427f      	negs	r7, r7
 80006d2:	4307      	orrs	r7, r0
 80006d4:	0c24      	lsrs	r4, r4, #16
 80006d6:	4593      	cmp	fp, r2
 80006d8:	4192      	sbcs	r2, r2
 80006da:	458a      	cmp	sl, r1
 80006dc:	4189      	sbcs	r1, r1
 80006de:	193f      	adds	r7, r7, r4
 80006e0:	0ddc      	lsrs	r4, r3, #23
 80006e2:	9b04      	ldr	r3, [sp, #16]
 80006e4:	0275      	lsls	r5, r6, #9
 80006e6:	431d      	orrs	r5, r3
 80006e8:	1e68      	subs	r0, r5, #1
 80006ea:	4185      	sbcs	r5, r0
 80006ec:	4653      	mov	r3, sl
 80006ee:	4252      	negs	r2, r2
 80006f0:	4249      	negs	r1, r1
 80006f2:	430a      	orrs	r2, r1
 80006f4:	18bf      	adds	r7, r7, r2
 80006f6:	4447      	add	r7, r8
 80006f8:	0df6      	lsrs	r6, r6, #23
 80006fa:	027f      	lsls	r7, r7, #9
 80006fc:	4335      	orrs	r5, r6
 80006fe:	025a      	lsls	r2, r3, #9
 8000700:	433c      	orrs	r4, r7
 8000702:	4315      	orrs	r5, r2
 8000704:	01fb      	lsls	r3, r7, #7
 8000706:	d400      	bmi.n	800070a <__aeabi_dmul+0x2fe>
 8000708:	e0c1      	b.n	800088e <__aeabi_dmul+0x482>
 800070a:	2101      	movs	r1, #1
 800070c:	086a      	lsrs	r2, r5, #1
 800070e:	400d      	ands	r5, r1
 8000710:	4315      	orrs	r5, r2
 8000712:	07e2      	lsls	r2, r4, #31
 8000714:	4315      	orrs	r5, r2
 8000716:	0864      	lsrs	r4, r4, #1
 8000718:	4926      	ldr	r1, [pc, #152]	; (80007b4 <__aeabi_dmul+0x3a8>)
 800071a:	4461      	add	r1, ip
 800071c:	2900      	cmp	r1, #0
 800071e:	dd56      	ble.n	80007ce <__aeabi_dmul+0x3c2>
 8000720:	076b      	lsls	r3, r5, #29
 8000722:	d009      	beq.n	8000738 <__aeabi_dmul+0x32c>
 8000724:	220f      	movs	r2, #15
 8000726:	402a      	ands	r2, r5
 8000728:	2a04      	cmp	r2, #4
 800072a:	d005      	beq.n	8000738 <__aeabi_dmul+0x32c>
 800072c:	1d2a      	adds	r2, r5, #4
 800072e:	42aa      	cmp	r2, r5
 8000730:	41ad      	sbcs	r5, r5
 8000732:	426d      	negs	r5, r5
 8000734:	1964      	adds	r4, r4, r5
 8000736:	0015      	movs	r5, r2
 8000738:	01e3      	lsls	r3, r4, #7
 800073a:	d504      	bpl.n	8000746 <__aeabi_dmul+0x33a>
 800073c:	2180      	movs	r1, #128	; 0x80
 800073e:	4a1e      	ldr	r2, [pc, #120]	; (80007b8 <__aeabi_dmul+0x3ac>)
 8000740:	00c9      	lsls	r1, r1, #3
 8000742:	4014      	ands	r4, r2
 8000744:	4461      	add	r1, ip
 8000746:	4a1d      	ldr	r2, [pc, #116]	; (80007bc <__aeabi_dmul+0x3b0>)
 8000748:	4291      	cmp	r1, r2
 800074a:	dd00      	ble.n	800074e <__aeabi_dmul+0x342>
 800074c:	e724      	b.n	8000598 <__aeabi_dmul+0x18c>
 800074e:	0762      	lsls	r2, r4, #29
 8000750:	08ed      	lsrs	r5, r5, #3
 8000752:	0264      	lsls	r4, r4, #9
 8000754:	0549      	lsls	r1, r1, #21
 8000756:	4315      	orrs	r5, r2
 8000758:	0b24      	lsrs	r4, r4, #12
 800075a:	0d4a      	lsrs	r2, r1, #21
 800075c:	e6c6      	b.n	80004ec <__aeabi_dmul+0xe0>
 800075e:	9701      	str	r7, [sp, #4]
 8000760:	e6b8      	b.n	80004d4 <__aeabi_dmul+0xc8>
 8000762:	4a10      	ldr	r2, [pc, #64]	; (80007a4 <__aeabi_dmul+0x398>)
 8000764:	2003      	movs	r0, #3
 8000766:	4694      	mov	ip, r2
 8000768:	4463      	add	r3, ip
 800076a:	464a      	mov	r2, r9
 800076c:	9300      	str	r3, [sp, #0]
 800076e:	2303      	movs	r3, #3
 8000770:	431a      	orrs	r2, r3
 8000772:	4691      	mov	r9, r2
 8000774:	4652      	mov	r2, sl
 8000776:	e68a      	b.n	800048e <__aeabi_dmul+0x82>
 8000778:	4649      	mov	r1, r9
 800077a:	2301      	movs	r3, #1
 800077c:	4319      	orrs	r1, r3
 800077e:	4689      	mov	r9, r1
 8000780:	2600      	movs	r6, #0
 8000782:	2001      	movs	r0, #1
 8000784:	e683      	b.n	800048e <__aeabi_dmul+0x82>
 8000786:	220c      	movs	r2, #12
 8000788:	9300      	str	r3, [sp, #0]
 800078a:	2303      	movs	r3, #3
 800078c:	0005      	movs	r5, r0
 800078e:	4691      	mov	r9, r2
 8000790:	469b      	mov	fp, r3
 8000792:	e65e      	b.n	8000452 <__aeabi_dmul+0x46>
 8000794:	2304      	movs	r3, #4
 8000796:	4699      	mov	r9, r3
 8000798:	2300      	movs	r3, #0
 800079a:	9300      	str	r3, [sp, #0]
 800079c:	3301      	adds	r3, #1
 800079e:	2400      	movs	r4, #0
 80007a0:	469b      	mov	fp, r3
 80007a2:	e656      	b.n	8000452 <__aeabi_dmul+0x46>
 80007a4:	000007ff 	.word	0x000007ff
 80007a8:	fffffc01 	.word	0xfffffc01
 80007ac:	080037ec 	.word	0x080037ec
 80007b0:	fffffc0d 	.word	0xfffffc0d
 80007b4:	000003ff 	.word	0x000003ff
 80007b8:	feffffff 	.word	0xfeffffff
 80007bc:	000007fe 	.word	0x000007fe
 80007c0:	2300      	movs	r3, #0
 80007c2:	2480      	movs	r4, #128	; 0x80
 80007c4:	2500      	movs	r5, #0
 80007c6:	4a44      	ldr	r2, [pc, #272]	; (80008d8 <__aeabi_dmul+0x4cc>)
 80007c8:	9301      	str	r3, [sp, #4]
 80007ca:	0324      	lsls	r4, r4, #12
 80007cc:	e68e      	b.n	80004ec <__aeabi_dmul+0xe0>
 80007ce:	2001      	movs	r0, #1
 80007d0:	1a40      	subs	r0, r0, r1
 80007d2:	2838      	cmp	r0, #56	; 0x38
 80007d4:	dd00      	ble.n	80007d8 <__aeabi_dmul+0x3cc>
 80007d6:	e686      	b.n	80004e6 <__aeabi_dmul+0xda>
 80007d8:	281f      	cmp	r0, #31
 80007da:	dd5b      	ble.n	8000894 <__aeabi_dmul+0x488>
 80007dc:	221f      	movs	r2, #31
 80007de:	0023      	movs	r3, r4
 80007e0:	4252      	negs	r2, r2
 80007e2:	1a51      	subs	r1, r2, r1
 80007e4:	40cb      	lsrs	r3, r1
 80007e6:	0019      	movs	r1, r3
 80007e8:	2820      	cmp	r0, #32
 80007ea:	d003      	beq.n	80007f4 <__aeabi_dmul+0x3e8>
 80007ec:	4a3b      	ldr	r2, [pc, #236]	; (80008dc <__aeabi_dmul+0x4d0>)
 80007ee:	4462      	add	r2, ip
 80007f0:	4094      	lsls	r4, r2
 80007f2:	4325      	orrs	r5, r4
 80007f4:	1e6a      	subs	r2, r5, #1
 80007f6:	4195      	sbcs	r5, r2
 80007f8:	002a      	movs	r2, r5
 80007fa:	430a      	orrs	r2, r1
 80007fc:	2107      	movs	r1, #7
 80007fe:	000d      	movs	r5, r1
 8000800:	2400      	movs	r4, #0
 8000802:	4015      	ands	r5, r2
 8000804:	4211      	tst	r1, r2
 8000806:	d05b      	beq.n	80008c0 <__aeabi_dmul+0x4b4>
 8000808:	210f      	movs	r1, #15
 800080a:	2400      	movs	r4, #0
 800080c:	4011      	ands	r1, r2
 800080e:	2904      	cmp	r1, #4
 8000810:	d053      	beq.n	80008ba <__aeabi_dmul+0x4ae>
 8000812:	1d11      	adds	r1, r2, #4
 8000814:	4291      	cmp	r1, r2
 8000816:	4192      	sbcs	r2, r2
 8000818:	4252      	negs	r2, r2
 800081a:	18a4      	adds	r4, r4, r2
 800081c:	000a      	movs	r2, r1
 800081e:	0223      	lsls	r3, r4, #8
 8000820:	d54b      	bpl.n	80008ba <__aeabi_dmul+0x4ae>
 8000822:	2201      	movs	r2, #1
 8000824:	2400      	movs	r4, #0
 8000826:	2500      	movs	r5, #0
 8000828:	e660      	b.n	80004ec <__aeabi_dmul+0xe0>
 800082a:	2380      	movs	r3, #128	; 0x80
 800082c:	031b      	lsls	r3, r3, #12
 800082e:	421c      	tst	r4, r3
 8000830:	d009      	beq.n	8000846 <__aeabi_dmul+0x43a>
 8000832:	421e      	tst	r6, r3
 8000834:	d107      	bne.n	8000846 <__aeabi_dmul+0x43a>
 8000836:	4333      	orrs	r3, r6
 8000838:	031c      	lsls	r4, r3, #12
 800083a:	4643      	mov	r3, r8
 800083c:	0015      	movs	r5, r2
 800083e:	0b24      	lsrs	r4, r4, #12
 8000840:	4a25      	ldr	r2, [pc, #148]	; (80008d8 <__aeabi_dmul+0x4cc>)
 8000842:	9301      	str	r3, [sp, #4]
 8000844:	e652      	b.n	80004ec <__aeabi_dmul+0xe0>
 8000846:	2280      	movs	r2, #128	; 0x80
 8000848:	0312      	lsls	r2, r2, #12
 800084a:	4314      	orrs	r4, r2
 800084c:	0324      	lsls	r4, r4, #12
 800084e:	4a22      	ldr	r2, [pc, #136]	; (80008d8 <__aeabi_dmul+0x4cc>)
 8000850:	0b24      	lsrs	r4, r4, #12
 8000852:	9701      	str	r7, [sp, #4]
 8000854:	e64a      	b.n	80004ec <__aeabi_dmul+0xe0>
 8000856:	f000 f8f3 	bl	8000a40 <__clzsi2>
 800085a:	0003      	movs	r3, r0
 800085c:	001a      	movs	r2, r3
 800085e:	3215      	adds	r2, #21
 8000860:	3020      	adds	r0, #32
 8000862:	2a1c      	cmp	r2, #28
 8000864:	dc00      	bgt.n	8000868 <__aeabi_dmul+0x45c>
 8000866:	e684      	b.n	8000572 <__aeabi_dmul+0x166>
 8000868:	4656      	mov	r6, sl
 800086a:	3b08      	subs	r3, #8
 800086c:	2200      	movs	r2, #0
 800086e:	409e      	lsls	r6, r3
 8000870:	e689      	b.n	8000586 <__aeabi_dmul+0x17a>
 8000872:	f000 f8e5 	bl	8000a40 <__clzsi2>
 8000876:	0001      	movs	r1, r0
 8000878:	0002      	movs	r2, r0
 800087a:	3115      	adds	r1, #21
 800087c:	3220      	adds	r2, #32
 800087e:	291c      	cmp	r1, #28
 8000880:	dc00      	bgt.n	8000884 <__aeabi_dmul+0x478>
 8000882:	e64e      	b.n	8000522 <__aeabi_dmul+0x116>
 8000884:	0034      	movs	r4, r6
 8000886:	3808      	subs	r0, #8
 8000888:	2500      	movs	r5, #0
 800088a:	4084      	lsls	r4, r0
 800088c:	e653      	b.n	8000536 <__aeabi_dmul+0x12a>
 800088e:	9b00      	ldr	r3, [sp, #0]
 8000890:	469c      	mov	ip, r3
 8000892:	e741      	b.n	8000718 <__aeabi_dmul+0x30c>
 8000894:	4912      	ldr	r1, [pc, #72]	; (80008e0 <__aeabi_dmul+0x4d4>)
 8000896:	0022      	movs	r2, r4
 8000898:	4461      	add	r1, ip
 800089a:	002e      	movs	r6, r5
 800089c:	408d      	lsls	r5, r1
 800089e:	408a      	lsls	r2, r1
 80008a0:	40c6      	lsrs	r6, r0
 80008a2:	1e69      	subs	r1, r5, #1
 80008a4:	418d      	sbcs	r5, r1
 80008a6:	4332      	orrs	r2, r6
 80008a8:	432a      	orrs	r2, r5
 80008aa:	40c4      	lsrs	r4, r0
 80008ac:	0753      	lsls	r3, r2, #29
 80008ae:	d0b6      	beq.n	800081e <__aeabi_dmul+0x412>
 80008b0:	210f      	movs	r1, #15
 80008b2:	4011      	ands	r1, r2
 80008b4:	2904      	cmp	r1, #4
 80008b6:	d1ac      	bne.n	8000812 <__aeabi_dmul+0x406>
 80008b8:	e7b1      	b.n	800081e <__aeabi_dmul+0x412>
 80008ba:	0765      	lsls	r5, r4, #29
 80008bc:	0264      	lsls	r4, r4, #9
 80008be:	0b24      	lsrs	r4, r4, #12
 80008c0:	08d2      	lsrs	r2, r2, #3
 80008c2:	4315      	orrs	r5, r2
 80008c4:	2200      	movs	r2, #0
 80008c6:	e611      	b.n	80004ec <__aeabi_dmul+0xe0>
 80008c8:	2280      	movs	r2, #128	; 0x80
 80008ca:	0312      	lsls	r2, r2, #12
 80008cc:	4314      	orrs	r4, r2
 80008ce:	0324      	lsls	r4, r4, #12
 80008d0:	4a01      	ldr	r2, [pc, #4]	; (80008d8 <__aeabi_dmul+0x4cc>)
 80008d2:	0b24      	lsrs	r4, r4, #12
 80008d4:	e60a      	b.n	80004ec <__aeabi_dmul+0xe0>
 80008d6:	46c0      	nop			; (mov r8, r8)
 80008d8:	000007ff 	.word	0x000007ff
 80008dc:	0000043e 	.word	0x0000043e
 80008e0:	0000041e 	.word	0x0000041e

080008e4 <__aeabi_ui2d>:
 80008e4:	b510      	push	{r4, lr}
 80008e6:	1e04      	subs	r4, r0, #0
 80008e8:	d010      	beq.n	800090c <__aeabi_ui2d+0x28>
 80008ea:	f000 f8a9 	bl	8000a40 <__clzsi2>
 80008ee:	4b0f      	ldr	r3, [pc, #60]	; (800092c <__aeabi_ui2d+0x48>)
 80008f0:	1a1b      	subs	r3, r3, r0
 80008f2:	280a      	cmp	r0, #10
 80008f4:	dc11      	bgt.n	800091a <__aeabi_ui2d+0x36>
 80008f6:	220b      	movs	r2, #11
 80008f8:	0021      	movs	r1, r4
 80008fa:	1a12      	subs	r2, r2, r0
 80008fc:	40d1      	lsrs	r1, r2
 80008fe:	3015      	adds	r0, #21
 8000900:	030a      	lsls	r2, r1, #12
 8000902:	055b      	lsls	r3, r3, #21
 8000904:	4084      	lsls	r4, r0
 8000906:	0b12      	lsrs	r2, r2, #12
 8000908:	0d5b      	lsrs	r3, r3, #21
 800090a:	e001      	b.n	8000910 <__aeabi_ui2d+0x2c>
 800090c:	2300      	movs	r3, #0
 800090e:	2200      	movs	r2, #0
 8000910:	051b      	lsls	r3, r3, #20
 8000912:	4313      	orrs	r3, r2
 8000914:	0020      	movs	r0, r4
 8000916:	0019      	movs	r1, r3
 8000918:	bd10      	pop	{r4, pc}
 800091a:	0022      	movs	r2, r4
 800091c:	380b      	subs	r0, #11
 800091e:	4082      	lsls	r2, r0
 8000920:	055b      	lsls	r3, r3, #21
 8000922:	0312      	lsls	r2, r2, #12
 8000924:	2400      	movs	r4, #0
 8000926:	0b12      	lsrs	r2, r2, #12
 8000928:	0d5b      	lsrs	r3, r3, #21
 800092a:	e7f1      	b.n	8000910 <__aeabi_ui2d+0x2c>
 800092c:	0000041e 	.word	0x0000041e

08000930 <__aeabi_d2f>:
 8000930:	0002      	movs	r2, r0
 8000932:	004b      	lsls	r3, r1, #1
 8000934:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000936:	0308      	lsls	r0, r1, #12
 8000938:	0d5b      	lsrs	r3, r3, #21
 800093a:	4e3d      	ldr	r6, [pc, #244]	; (8000a30 <__aeabi_d2f+0x100>)
 800093c:	0fcc      	lsrs	r4, r1, #31
 800093e:	0a40      	lsrs	r0, r0, #9
 8000940:	0f51      	lsrs	r1, r2, #29
 8000942:	1c5f      	adds	r7, r3, #1
 8000944:	4308      	orrs	r0, r1
 8000946:	00d5      	lsls	r5, r2, #3
 8000948:	4237      	tst	r7, r6
 800094a:	d00a      	beq.n	8000962 <__aeabi_d2f+0x32>
 800094c:	4939      	ldr	r1, [pc, #228]	; (8000a34 <__aeabi_d2f+0x104>)
 800094e:	185e      	adds	r6, r3, r1
 8000950:	2efe      	cmp	r6, #254	; 0xfe
 8000952:	dd16      	ble.n	8000982 <__aeabi_d2f+0x52>
 8000954:	23ff      	movs	r3, #255	; 0xff
 8000956:	2100      	movs	r1, #0
 8000958:	05db      	lsls	r3, r3, #23
 800095a:	430b      	orrs	r3, r1
 800095c:	07e0      	lsls	r0, r4, #31
 800095e:	4318      	orrs	r0, r3
 8000960:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000962:	2b00      	cmp	r3, #0
 8000964:	d106      	bne.n	8000974 <__aeabi_d2f+0x44>
 8000966:	4328      	orrs	r0, r5
 8000968:	d027      	beq.n	80009ba <__aeabi_d2f+0x8a>
 800096a:	2105      	movs	r1, #5
 800096c:	0189      	lsls	r1, r1, #6
 800096e:	0a49      	lsrs	r1, r1, #9
 8000970:	b2db      	uxtb	r3, r3
 8000972:	e7f1      	b.n	8000958 <__aeabi_d2f+0x28>
 8000974:	4305      	orrs	r5, r0
 8000976:	d0ed      	beq.n	8000954 <__aeabi_d2f+0x24>
 8000978:	2180      	movs	r1, #128	; 0x80
 800097a:	03c9      	lsls	r1, r1, #15
 800097c:	23ff      	movs	r3, #255	; 0xff
 800097e:	4301      	orrs	r1, r0
 8000980:	e7ea      	b.n	8000958 <__aeabi_d2f+0x28>
 8000982:	2e00      	cmp	r6, #0
 8000984:	dd1c      	ble.n	80009c0 <__aeabi_d2f+0x90>
 8000986:	0192      	lsls	r2, r2, #6
 8000988:	0011      	movs	r1, r2
 800098a:	1e4a      	subs	r2, r1, #1
 800098c:	4191      	sbcs	r1, r2
 800098e:	00c0      	lsls	r0, r0, #3
 8000990:	0f6d      	lsrs	r5, r5, #29
 8000992:	4301      	orrs	r1, r0
 8000994:	4329      	orrs	r1, r5
 8000996:	074b      	lsls	r3, r1, #29
 8000998:	d048      	beq.n	8000a2c <__aeabi_d2f+0xfc>
 800099a:	230f      	movs	r3, #15
 800099c:	400b      	ands	r3, r1
 800099e:	2b04      	cmp	r3, #4
 80009a0:	d000      	beq.n	80009a4 <__aeabi_d2f+0x74>
 80009a2:	3104      	adds	r1, #4
 80009a4:	2380      	movs	r3, #128	; 0x80
 80009a6:	04db      	lsls	r3, r3, #19
 80009a8:	400b      	ands	r3, r1
 80009aa:	d03f      	beq.n	8000a2c <__aeabi_d2f+0xfc>
 80009ac:	1c72      	adds	r2, r6, #1
 80009ae:	2efe      	cmp	r6, #254	; 0xfe
 80009b0:	d0d0      	beq.n	8000954 <__aeabi_d2f+0x24>
 80009b2:	0189      	lsls	r1, r1, #6
 80009b4:	0a49      	lsrs	r1, r1, #9
 80009b6:	b2d3      	uxtb	r3, r2
 80009b8:	e7ce      	b.n	8000958 <__aeabi_d2f+0x28>
 80009ba:	2300      	movs	r3, #0
 80009bc:	2100      	movs	r1, #0
 80009be:	e7cb      	b.n	8000958 <__aeabi_d2f+0x28>
 80009c0:	0032      	movs	r2, r6
 80009c2:	3217      	adds	r2, #23
 80009c4:	db22      	blt.n	8000a0c <__aeabi_d2f+0xdc>
 80009c6:	2180      	movs	r1, #128	; 0x80
 80009c8:	221e      	movs	r2, #30
 80009ca:	0409      	lsls	r1, r1, #16
 80009cc:	4308      	orrs	r0, r1
 80009ce:	1b92      	subs	r2, r2, r6
 80009d0:	2a1f      	cmp	r2, #31
 80009d2:	dd1d      	ble.n	8000a10 <__aeabi_d2f+0xe0>
 80009d4:	2102      	movs	r1, #2
 80009d6:	4249      	negs	r1, r1
 80009d8:	1b8e      	subs	r6, r1, r6
 80009da:	0001      	movs	r1, r0
 80009dc:	40f1      	lsrs	r1, r6
 80009de:	000e      	movs	r6, r1
 80009e0:	2a20      	cmp	r2, #32
 80009e2:	d004      	beq.n	80009ee <__aeabi_d2f+0xbe>
 80009e4:	4a14      	ldr	r2, [pc, #80]	; (8000a38 <__aeabi_d2f+0x108>)
 80009e6:	4694      	mov	ip, r2
 80009e8:	4463      	add	r3, ip
 80009ea:	4098      	lsls	r0, r3
 80009ec:	4305      	orrs	r5, r0
 80009ee:	0029      	movs	r1, r5
 80009f0:	1e4d      	subs	r5, r1, #1
 80009f2:	41a9      	sbcs	r1, r5
 80009f4:	4331      	orrs	r1, r6
 80009f6:	2600      	movs	r6, #0
 80009f8:	074b      	lsls	r3, r1, #29
 80009fa:	d1ce      	bne.n	800099a <__aeabi_d2f+0x6a>
 80009fc:	2080      	movs	r0, #128	; 0x80
 80009fe:	000b      	movs	r3, r1
 8000a00:	04c0      	lsls	r0, r0, #19
 8000a02:	2201      	movs	r2, #1
 8000a04:	4003      	ands	r3, r0
 8000a06:	4201      	tst	r1, r0
 8000a08:	d1d3      	bne.n	80009b2 <__aeabi_d2f+0x82>
 8000a0a:	e7af      	b.n	800096c <__aeabi_d2f+0x3c>
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	e7ac      	b.n	800096a <__aeabi_d2f+0x3a>
 8000a10:	490a      	ldr	r1, [pc, #40]	; (8000a3c <__aeabi_d2f+0x10c>)
 8000a12:	468c      	mov	ip, r1
 8000a14:	0029      	movs	r1, r5
 8000a16:	4463      	add	r3, ip
 8000a18:	40d1      	lsrs	r1, r2
 8000a1a:	409d      	lsls	r5, r3
 8000a1c:	000a      	movs	r2, r1
 8000a1e:	0029      	movs	r1, r5
 8000a20:	4098      	lsls	r0, r3
 8000a22:	1e4d      	subs	r5, r1, #1
 8000a24:	41a9      	sbcs	r1, r5
 8000a26:	4301      	orrs	r1, r0
 8000a28:	4311      	orrs	r1, r2
 8000a2a:	e7e4      	b.n	80009f6 <__aeabi_d2f+0xc6>
 8000a2c:	0033      	movs	r3, r6
 8000a2e:	e79d      	b.n	800096c <__aeabi_d2f+0x3c>
 8000a30:	000007fe 	.word	0x000007fe
 8000a34:	fffffc80 	.word	0xfffffc80
 8000a38:	fffffca2 	.word	0xfffffca2
 8000a3c:	fffffc82 	.word	0xfffffc82

08000a40 <__clzsi2>:
 8000a40:	211c      	movs	r1, #28
 8000a42:	2301      	movs	r3, #1
 8000a44:	041b      	lsls	r3, r3, #16
 8000a46:	4298      	cmp	r0, r3
 8000a48:	d301      	bcc.n	8000a4e <__clzsi2+0xe>
 8000a4a:	0c00      	lsrs	r0, r0, #16
 8000a4c:	3910      	subs	r1, #16
 8000a4e:	0a1b      	lsrs	r3, r3, #8
 8000a50:	4298      	cmp	r0, r3
 8000a52:	d301      	bcc.n	8000a58 <__clzsi2+0x18>
 8000a54:	0a00      	lsrs	r0, r0, #8
 8000a56:	3908      	subs	r1, #8
 8000a58:	091b      	lsrs	r3, r3, #4
 8000a5a:	4298      	cmp	r0, r3
 8000a5c:	d301      	bcc.n	8000a62 <__clzsi2+0x22>
 8000a5e:	0900      	lsrs	r0, r0, #4
 8000a60:	3904      	subs	r1, #4
 8000a62:	a202      	add	r2, pc, #8	; (adr r2, 8000a6c <__clzsi2+0x2c>)
 8000a64:	5c10      	ldrb	r0, [r2, r0]
 8000a66:	1840      	adds	r0, r0, r1
 8000a68:	4770      	bx	lr
 8000a6a:	46c0      	nop			; (mov r8, r8)
 8000a6c:	02020304 	.word	0x02020304
 8000a70:	01010101 	.word	0x01010101
	...

08000a7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a80:	f000 facc 	bl	800101c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a84:	f000 f88e 	bl	8000ba4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a88:	f000 f95c 	bl	8000d44 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a8c:	f000 f93c 	bl	8000d08 <MX_DMA_Init>
  MX_ADC1_Init();
 8000a90:	f000 f8d0 	bl	8000c34 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, &ValorEntrada, 1);
 8000a94:	493c      	ldr	r1, [pc, #240]	; (8000b88 <main+0x10c>)
 8000a96:	4b3d      	ldr	r3, [pc, #244]	; (8000b8c <main+0x110>)
 8000a98:	2201      	movs	r2, #1
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	f000 fe68 	bl	8001770 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  tensao = 3.3/4095*ValorEntrada;
 8000aa0:	4b39      	ldr	r3, [pc, #228]	; (8000b88 <main+0x10c>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	f7ff ff1d 	bl	80008e4 <__aeabi_ui2d>
 8000aaa:	4a39      	ldr	r2, [pc, #228]	; (8000b90 <main+0x114>)
 8000aac:	4b39      	ldr	r3, [pc, #228]	; (8000b94 <main+0x118>)
 8000aae:	f7ff fcad 	bl	800040c <__aeabi_dmul>
 8000ab2:	0002      	movs	r2, r0
 8000ab4:	000b      	movs	r3, r1
 8000ab6:	0010      	movs	r0, r2
 8000ab8:	0019      	movs	r1, r3
 8000aba:	f7ff ff39 	bl	8000930 <__aeabi_d2f>
 8000abe:	1c02      	adds	r2, r0, #0
 8000ac0:	4b35      	ldr	r3, [pc, #212]	; (8000b98 <main+0x11c>)
 8000ac2:	601a      	str	r2, [r3, #0]

	  if(tensao <= 1){
 8000ac4:	4b34      	ldr	r3, [pc, #208]	; (8000b98 <main+0x11c>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	21fe      	movs	r1, #254	; 0xfe
 8000aca:	0589      	lsls	r1, r1, #22
 8000acc:	1c18      	adds	r0, r3, #0
 8000ace:	f7ff fbc1 	bl	8000254 <__aeabi_fcmple>
 8000ad2:	1e03      	subs	r3, r0, #0
 8000ad4:	d014      	beq.n	8000b00 <main+0x84>
		  HAL_GPIO_WritePin(BRANCO_GPIO_Port, BRANCO_Pin, 0);
 8000ad6:	2380      	movs	r3, #128	; 0x80
 8000ad8:	00d9      	lsls	r1, r3, #3
 8000ada:	23a0      	movs	r3, #160	; 0xa0
 8000adc:	05db      	lsls	r3, r3, #23
 8000ade:	2200      	movs	r2, #0
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	f001 fec1 	bl	8002868 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(VERMELHO_GPIO_Port, VERMELHO_Pin,1);
 8000ae6:	4b2d      	ldr	r3, [pc, #180]	; (8000b9c <main+0x120>)
 8000ae8:	2201      	movs	r2, #1
 8000aea:	2108      	movs	r1, #8
 8000aec:	0018      	movs	r0, r3
 8000aee:	f001 febb 	bl	8002868 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(VERDE_GPIO_Port, VERDE_Pin, 1);
 8000af2:	4b2a      	ldr	r3, [pc, #168]	; (8000b9c <main+0x120>)
 8000af4:	2201      	movs	r2, #1
 8000af6:	2120      	movs	r1, #32
 8000af8:	0018      	movs	r0, r3
 8000afa:	f001 feb5 	bl	8002868 <HAL_GPIO_WritePin>
 8000afe:	e7cf      	b.n	8000aa0 <main+0x24>
	  }else if(tensao > 1 && tensao < 3){
 8000b00:	4b25      	ldr	r3, [pc, #148]	; (8000b98 <main+0x11c>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	21fe      	movs	r1, #254	; 0xfe
 8000b06:	0589      	lsls	r1, r1, #22
 8000b08:	1c18      	adds	r0, r3, #0
 8000b0a:	f7ff fbad 	bl	8000268 <__aeabi_fcmpgt>
 8000b0e:	1e03      	subs	r3, r0, #0
 8000b10:	d01c      	beq.n	8000b4c <main+0xd0>
 8000b12:	4b21      	ldr	r3, [pc, #132]	; (8000b98 <main+0x11c>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4922      	ldr	r1, [pc, #136]	; (8000ba0 <main+0x124>)
 8000b18:	1c18      	adds	r0, r3, #0
 8000b1a:	f7ff fb91 	bl	8000240 <__aeabi_fcmplt>
 8000b1e:	1e03      	subs	r3, r0, #0
 8000b20:	d014      	beq.n	8000b4c <main+0xd0>
		  HAL_GPIO_WritePin(BRANCO_GPIO_Port, BRANCO_Pin, 1);
 8000b22:	2380      	movs	r3, #128	; 0x80
 8000b24:	00d9      	lsls	r1, r3, #3
 8000b26:	23a0      	movs	r3, #160	; 0xa0
 8000b28:	05db      	lsls	r3, r3, #23
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	f001 fe9b 	bl	8002868 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(VERMELHO_GPIO_Port, VERMELHO_Pin, 0);
 8000b32:	4b1a      	ldr	r3, [pc, #104]	; (8000b9c <main+0x120>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	2108      	movs	r1, #8
 8000b38:	0018      	movs	r0, r3
 8000b3a:	f001 fe95 	bl	8002868 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(VERDE_GPIO_Port, VERDE_Pin, 1);
 8000b3e:	4b17      	ldr	r3, [pc, #92]	; (8000b9c <main+0x120>)
 8000b40:	2201      	movs	r2, #1
 8000b42:	2120      	movs	r1, #32
 8000b44:	0018      	movs	r0, r3
 8000b46:	f001 fe8f 	bl	8002868 <HAL_GPIO_WritePin>
 8000b4a:	e01b      	b.n	8000b84 <main+0x108>
	  }else if(tensao >=3){
 8000b4c:	4b12      	ldr	r3, [pc, #72]	; (8000b98 <main+0x11c>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4913      	ldr	r1, [pc, #76]	; (8000ba0 <main+0x124>)
 8000b52:	1c18      	adds	r0, r3, #0
 8000b54:	f7ff fb92 	bl	800027c <__aeabi_fcmpge>
 8000b58:	1e03      	subs	r3, r0, #0
 8000b5a:	d013      	beq.n	8000b84 <main+0x108>
		  HAL_GPIO_WritePin(BRANCO_GPIO_Port, BRANCO_Pin, 1);
 8000b5c:	2380      	movs	r3, #128	; 0x80
 8000b5e:	00d9      	lsls	r1, r3, #3
 8000b60:	23a0      	movs	r3, #160	; 0xa0
 8000b62:	05db      	lsls	r3, r3, #23
 8000b64:	2201      	movs	r2, #1
 8000b66:	0018      	movs	r0, r3
 8000b68:	f001 fe7e 	bl	8002868 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(VERMELHO_GPIO_Port, VERMELHO_Pin, 1);
 8000b6c:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <main+0x120>)
 8000b6e:	2201      	movs	r2, #1
 8000b70:	2108      	movs	r1, #8
 8000b72:	0018      	movs	r0, r3
 8000b74:	f001 fe78 	bl	8002868 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(VERDE_GPIO_Port, VERDE_Pin, 0);
 8000b78:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <main+0x120>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2120      	movs	r1, #32
 8000b7e:	0018      	movs	r0, r3
 8000b80:	f001 fe72 	bl	8002868 <HAL_GPIO_WritePin>
	  tensao = 3.3/4095*ValorEntrada;
 8000b84:	e78c      	b.n	8000aa0 <main+0x24>
 8000b86:	46c0      	nop			; (mov r8, r8)
 8000b88:	20000090 	.word	0x20000090
 8000b8c:	2000002c 	.word	0x2000002c
 8000b90:	e734d9b4 	.word	0xe734d9b4
 8000b94:	3f4a680c 	.word	0x3f4a680c
 8000b98:	20000028 	.word	0x20000028
 8000b9c:	50000400 	.word	0x50000400
 8000ba0:	40400000 	.word	0x40400000

08000ba4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ba4:	b590      	push	{r4, r7, lr}
 8000ba6:	b095      	sub	sp, #84	; 0x54
 8000ba8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000baa:	2414      	movs	r4, #20
 8000bac:	193b      	adds	r3, r7, r4
 8000bae:	0018      	movs	r0, r3
 8000bb0:	233c      	movs	r3, #60	; 0x3c
 8000bb2:	001a      	movs	r2, r3
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	f002 fe05 	bl	80037c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bba:	1d3b      	adds	r3, r7, #4
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	2310      	movs	r3, #16
 8000bc0:	001a      	movs	r2, r3
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	f002 fdfe 	bl	80037c4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bc8:	2380      	movs	r3, #128	; 0x80
 8000bca:	009b      	lsls	r3, r3, #2
 8000bcc:	0018      	movs	r0, r3
 8000bce:	f001 fe69 	bl	80028a4 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bd2:	193b      	adds	r3, r7, r4
 8000bd4:	2202      	movs	r2, #2
 8000bd6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bd8:	193b      	adds	r3, r7, r4
 8000bda:	2280      	movs	r2, #128	; 0x80
 8000bdc:	0052      	lsls	r2, r2, #1
 8000bde:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000be0:	193b      	adds	r3, r7, r4
 8000be2:	2200      	movs	r2, #0
 8000be4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000be6:	193b      	adds	r3, r7, r4
 8000be8:	2240      	movs	r2, #64	; 0x40
 8000bea:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bec:	193b      	adds	r3, r7, r4
 8000bee:	2200      	movs	r2, #0
 8000bf0:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bf2:	193b      	adds	r3, r7, r4
 8000bf4:	0018      	movs	r0, r3
 8000bf6:	f001 fe95 	bl	8002924 <HAL_RCC_OscConfig>
 8000bfa:	1e03      	subs	r3, r0, #0
 8000bfc:	d001      	beq.n	8000c02 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000bfe:	f000 f901 	bl	8000e04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c02:	1d3b      	adds	r3, r7, #4
 8000c04:	2207      	movs	r2, #7
 8000c06:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c08:	1d3b      	adds	r3, r7, #4
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c0e:	1d3b      	adds	r3, r7, #4
 8000c10:	2200      	movs	r2, #0
 8000c12:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c14:	1d3b      	adds	r3, r7, #4
 8000c16:	2200      	movs	r2, #0
 8000c18:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c1a:	1d3b      	adds	r3, r7, #4
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	0018      	movs	r0, r3
 8000c20:	f002 f9e6 	bl	8002ff0 <HAL_RCC_ClockConfig>
 8000c24:	1e03      	subs	r3, r0, #0
 8000c26:	d001      	beq.n	8000c2c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000c28:	f000 f8ec 	bl	8000e04 <Error_Handler>
  }
}
 8000c2c:	46c0      	nop			; (mov r8, r8)
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	b015      	add	sp, #84	; 0x54
 8000c32:	bd90      	pop	{r4, r7, pc}

08000c34 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c3a:	1d3b      	adds	r3, r7, #4
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	230c      	movs	r3, #12
 8000c40:	001a      	movs	r2, r3
 8000c42:	2100      	movs	r1, #0
 8000c44:	f002 fdbe 	bl	80037c4 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c48:	4b2d      	ldr	r3, [pc, #180]	; (8000d00 <MX_ADC1_Init+0xcc>)
 8000c4a:	4a2e      	ldr	r2, [pc, #184]	; (8000d04 <MX_ADC1_Init+0xd0>)
 8000c4c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000c4e:	4b2c      	ldr	r3, [pc, #176]	; (8000d00 <MX_ADC1_Init+0xcc>)
 8000c50:	2280      	movs	r2, #128	; 0x80
 8000c52:	05d2      	lsls	r2, r2, #23
 8000c54:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c56:	4b2a      	ldr	r3, [pc, #168]	; (8000d00 <MX_ADC1_Init+0xcc>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c5c:	4b28      	ldr	r3, [pc, #160]	; (8000d00 <MX_ADC1_Init+0xcc>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c62:	4b27      	ldr	r3, [pc, #156]	; (8000d00 <MX_ADC1_Init+0xcc>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c68:	4b25      	ldr	r3, [pc, #148]	; (8000d00 <MX_ADC1_Init+0xcc>)
 8000c6a:	2204      	movs	r2, #4
 8000c6c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c6e:	4b24      	ldr	r3, [pc, #144]	; (8000d00 <MX_ADC1_Init+0xcc>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000c74:	4b22      	ldr	r3, [pc, #136]	; (8000d00 <MX_ADC1_Init+0xcc>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000c7a:	4b21      	ldr	r3, [pc, #132]	; (8000d00 <MX_ADC1_Init+0xcc>)
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000c80:	4b1f      	ldr	r3, [pc, #124]	; (8000d00 <MX_ADC1_Init+0xcc>)
 8000c82:	2201      	movs	r2, #1
 8000c84:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c86:	4b1e      	ldr	r3, [pc, #120]	; (8000d00 <MX_ADC1_Init+0xcc>)
 8000c88:	2220      	movs	r2, #32
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c8e:	4b1c      	ldr	r3, [pc, #112]	; (8000d00 <MX_ADC1_Init+0xcc>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c94:	4b1a      	ldr	r3, [pc, #104]	; (8000d00 <MX_ADC1_Init+0xcc>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000c9a:	4b19      	ldr	r3, [pc, #100]	; (8000d00 <MX_ADC1_Init+0xcc>)
 8000c9c:	222c      	movs	r2, #44	; 0x2c
 8000c9e:	2101      	movs	r1, #1
 8000ca0:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ca2:	4b17      	ldr	r3, [pc, #92]	; (8000d00 <MX_ADC1_Init+0xcc>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8000ca8:	4b15      	ldr	r3, [pc, #84]	; (8000d00 <MX_ADC1_Init+0xcc>)
 8000caa:	2207      	movs	r2, #7
 8000cac:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8000cae:	4b14      	ldr	r3, [pc, #80]	; (8000d00 <MX_ADC1_Init+0xcc>)
 8000cb0:	2207      	movs	r2, #7
 8000cb2:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000cb4:	4b12      	ldr	r3, [pc, #72]	; (8000d00 <MX_ADC1_Init+0xcc>)
 8000cb6:	223c      	movs	r2, #60	; 0x3c
 8000cb8:	2100      	movs	r1, #0
 8000cba:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000cbc:	4b10      	ldr	r3, [pc, #64]	; (8000d00 <MX_ADC1_Init+0xcc>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cc2:	4b0f      	ldr	r3, [pc, #60]	; (8000d00 <MX_ADC1_Init+0xcc>)
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	f000 fb75 	bl	80013b4 <HAL_ADC_Init>
 8000cca:	1e03      	subs	r3, r0, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000cce:	f000 f899 	bl	8000e04 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000cd2:	1d3b      	adds	r3, r7, #4
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cd8:	1d3b      	adds	r3, r7, #4
 8000cda:	2200      	movs	r2, #0
 8000cdc:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000cde:	1d3b      	adds	r3, r7, #4
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ce4:	1d3a      	adds	r2, r7, #4
 8000ce6:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <MX_ADC1_Init+0xcc>)
 8000ce8:	0011      	movs	r1, r2
 8000cea:	0018      	movs	r0, r3
 8000cec:	f000 fde6 	bl	80018bc <HAL_ADC_ConfigChannel>
 8000cf0:	1e03      	subs	r3, r0, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8000cf4:	f000 f886 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000cf8:	46c0      	nop			; (mov r8, r8)
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	b004      	add	sp, #16
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	2000002c 	.word	0x2000002c
 8000d04:	40012400 	.word	0x40012400

08000d08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d0e:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <MX_DMA_Init+0x38>)
 8000d10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d12:	4b0b      	ldr	r3, [pc, #44]	; (8000d40 <MX_DMA_Init+0x38>)
 8000d14:	2101      	movs	r1, #1
 8000d16:	430a      	orrs	r2, r1
 8000d18:	639a      	str	r2, [r3, #56]	; 0x38
 8000d1a:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <MX_DMA_Init+0x38>)
 8000d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d1e:	2201      	movs	r2, #1
 8000d20:	4013      	ands	r3, r2
 8000d22:	607b      	str	r3, [r7, #4]
 8000d24:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000d26:	2200      	movs	r2, #0
 8000d28:	2100      	movs	r1, #0
 8000d2a:	2009      	movs	r0, #9
 8000d2c:	f001 f95e 	bl	8001fec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000d30:	2009      	movs	r0, #9
 8000d32:	f001 f970 	bl	8002016 <HAL_NVIC_EnableIRQ>

}
 8000d36:	46c0      	nop			; (mov r8, r8)
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	b002      	add	sp, #8
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	46c0      	nop			; (mov r8, r8)
 8000d40:	40021000 	.word	0x40021000

08000d44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d44:	b590      	push	{r4, r7, lr}
 8000d46:	b089      	sub	sp, #36	; 0x24
 8000d48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4a:	240c      	movs	r4, #12
 8000d4c:	193b      	adds	r3, r7, r4
 8000d4e:	0018      	movs	r0, r3
 8000d50:	2314      	movs	r3, #20
 8000d52:	001a      	movs	r2, r3
 8000d54:	2100      	movs	r1, #0
 8000d56:	f002 fd35 	bl	80037c4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5a:	4b28      	ldr	r3, [pc, #160]	; (8000dfc <MX_GPIO_Init+0xb8>)
 8000d5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d5e:	4b27      	ldr	r3, [pc, #156]	; (8000dfc <MX_GPIO_Init+0xb8>)
 8000d60:	2101      	movs	r1, #1
 8000d62:	430a      	orrs	r2, r1
 8000d64:	635a      	str	r2, [r3, #52]	; 0x34
 8000d66:	4b25      	ldr	r3, [pc, #148]	; (8000dfc <MX_GPIO_Init+0xb8>)
 8000d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	60bb      	str	r3, [r7, #8]
 8000d70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d72:	4b22      	ldr	r3, [pc, #136]	; (8000dfc <MX_GPIO_Init+0xb8>)
 8000d74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d76:	4b21      	ldr	r3, [pc, #132]	; (8000dfc <MX_GPIO_Init+0xb8>)
 8000d78:	2102      	movs	r1, #2
 8000d7a:	430a      	orrs	r2, r1
 8000d7c:	635a      	str	r2, [r3, #52]	; 0x34
 8000d7e:	4b1f      	ldr	r3, [pc, #124]	; (8000dfc <MX_GPIO_Init+0xb8>)
 8000d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d82:	2202      	movs	r2, #2
 8000d84:	4013      	ands	r3, r2
 8000d86:	607b      	str	r3, [r7, #4]
 8000d88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BRANCO_GPIO_Port, BRANCO_Pin, GPIO_PIN_RESET);
 8000d8a:	2380      	movs	r3, #128	; 0x80
 8000d8c:	00d9      	lsls	r1, r3, #3
 8000d8e:	23a0      	movs	r3, #160	; 0xa0
 8000d90:	05db      	lsls	r3, r3, #23
 8000d92:	2200      	movs	r2, #0
 8000d94:	0018      	movs	r0, r3
 8000d96:	f001 fd67 	bl	8002868 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, VERMELHO_Pin|VERDE_Pin, GPIO_PIN_RESET);
 8000d9a:	4b19      	ldr	r3, [pc, #100]	; (8000e00 <MX_GPIO_Init+0xbc>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	2128      	movs	r1, #40	; 0x28
 8000da0:	0018      	movs	r0, r3
 8000da2:	f001 fd61 	bl	8002868 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BRANCO_Pin */
  GPIO_InitStruct.Pin = BRANCO_Pin;
 8000da6:	193b      	adds	r3, r7, r4
 8000da8:	2280      	movs	r2, #128	; 0x80
 8000daa:	00d2      	lsls	r2, r2, #3
 8000dac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dae:	193b      	adds	r3, r7, r4
 8000db0:	2201      	movs	r2, #1
 8000db2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	193b      	adds	r3, r7, r4
 8000db6:	2200      	movs	r2, #0
 8000db8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dba:	193b      	adds	r3, r7, r4
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BRANCO_GPIO_Port, &GPIO_InitStruct);
 8000dc0:	193a      	adds	r2, r7, r4
 8000dc2:	23a0      	movs	r3, #160	; 0xa0
 8000dc4:	05db      	lsls	r3, r3, #23
 8000dc6:	0011      	movs	r1, r2
 8000dc8:	0018      	movs	r0, r3
 8000dca:	f001 fbe1 	bl	8002590 <HAL_GPIO_Init>

  /*Configure GPIO pins : VERMELHO_Pin VERDE_Pin */
  GPIO_InitStruct.Pin = VERMELHO_Pin|VERDE_Pin;
 8000dce:	0021      	movs	r1, r4
 8000dd0:	187b      	adds	r3, r7, r1
 8000dd2:	2228      	movs	r2, #40	; 0x28
 8000dd4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd6:	187b      	adds	r3, r7, r1
 8000dd8:	2201      	movs	r2, #1
 8000dda:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	187b      	adds	r3, r7, r1
 8000dde:	2200      	movs	r2, #0
 8000de0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de2:	187b      	adds	r3, r7, r1
 8000de4:	2200      	movs	r2, #0
 8000de6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de8:	187b      	adds	r3, r7, r1
 8000dea:	4a05      	ldr	r2, [pc, #20]	; (8000e00 <MX_GPIO_Init+0xbc>)
 8000dec:	0019      	movs	r1, r3
 8000dee:	0010      	movs	r0, r2
 8000df0:	f001 fbce 	bl	8002590 <HAL_GPIO_Init>

}
 8000df4:	46c0      	nop			; (mov r8, r8)
 8000df6:	46bd      	mov	sp, r7
 8000df8:	b009      	add	sp, #36	; 0x24
 8000dfa:	bd90      	pop	{r4, r7, pc}
 8000dfc:	40021000 	.word	0x40021000
 8000e00:	50000400 	.word	0x50000400

08000e04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e08:	b672      	cpsid	i
}
 8000e0a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e0c:	e7fe      	b.n	8000e0c <Error_Handler+0x8>
	...

08000e10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e16:	4b11      	ldr	r3, [pc, #68]	; (8000e5c <HAL_MspInit+0x4c>)
 8000e18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e1a:	4b10      	ldr	r3, [pc, #64]	; (8000e5c <HAL_MspInit+0x4c>)
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	430a      	orrs	r2, r1
 8000e20:	641a      	str	r2, [r3, #64]	; 0x40
 8000e22:	4b0e      	ldr	r3, [pc, #56]	; (8000e5c <HAL_MspInit+0x4c>)
 8000e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e26:	2201      	movs	r2, #1
 8000e28:	4013      	ands	r3, r2
 8000e2a:	607b      	str	r3, [r7, #4]
 8000e2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e2e:	4b0b      	ldr	r3, [pc, #44]	; (8000e5c <HAL_MspInit+0x4c>)
 8000e30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e32:	4b0a      	ldr	r3, [pc, #40]	; (8000e5c <HAL_MspInit+0x4c>)
 8000e34:	2180      	movs	r1, #128	; 0x80
 8000e36:	0549      	lsls	r1, r1, #21
 8000e38:	430a      	orrs	r2, r1
 8000e3a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e3c:	4b07      	ldr	r3, [pc, #28]	; (8000e5c <HAL_MspInit+0x4c>)
 8000e3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e40:	2380      	movs	r3, #128	; 0x80
 8000e42:	055b      	lsls	r3, r3, #21
 8000e44:	4013      	ands	r3, r2
 8000e46:	603b      	str	r3, [r7, #0]
 8000e48:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000e4a:	23c0      	movs	r3, #192	; 0xc0
 8000e4c:	00db      	lsls	r3, r3, #3
 8000e4e:	0018      	movs	r0, r3
 8000e50:	f000 f96a 	bl	8001128 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e54:	46c0      	nop			; (mov r8, r8)
 8000e56:	46bd      	mov	sp, r7
 8000e58:	b002      	add	sp, #8
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	40021000 	.word	0x40021000

08000e60 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e60:	b590      	push	{r4, r7, lr}
 8000e62:	b09d      	sub	sp, #116	; 0x74
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e68:	235c      	movs	r3, #92	; 0x5c
 8000e6a:	18fb      	adds	r3, r7, r3
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	2314      	movs	r3, #20
 8000e70:	001a      	movs	r2, r3
 8000e72:	2100      	movs	r1, #0
 8000e74:	f002 fca6 	bl	80037c4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e78:	2410      	movs	r4, #16
 8000e7a:	193b      	adds	r3, r7, r4
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	234c      	movs	r3, #76	; 0x4c
 8000e80:	001a      	movs	r2, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	f002 fc9e 	bl	80037c4 <memset>
  if(hadc->Instance==ADC1)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a35      	ldr	r2, [pc, #212]	; (8000f64 <HAL_ADC_MspInit+0x104>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d164      	bne.n	8000f5c <HAL_ADC_MspInit+0xfc>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000e92:	193b      	adds	r3, r7, r4
 8000e94:	2280      	movs	r2, #128	; 0x80
 8000e96:	01d2      	lsls	r2, r2, #7
 8000e98:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000e9a:	193b      	adds	r3, r7, r4
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ea0:	193b      	adds	r3, r7, r4
 8000ea2:	0018      	movs	r0, r3
 8000ea4:	f002 fa2e 	bl	8003304 <HAL_RCCEx_PeriphCLKConfig>
 8000ea8:	1e03      	subs	r3, r0, #0
 8000eaa:	d001      	beq.n	8000eb0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000eac:	f7ff ffaa 	bl	8000e04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000eb0:	4b2d      	ldr	r3, [pc, #180]	; (8000f68 <HAL_ADC_MspInit+0x108>)
 8000eb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000eb4:	4b2c      	ldr	r3, [pc, #176]	; (8000f68 <HAL_ADC_MspInit+0x108>)
 8000eb6:	2180      	movs	r1, #128	; 0x80
 8000eb8:	0349      	lsls	r1, r1, #13
 8000eba:	430a      	orrs	r2, r1
 8000ebc:	641a      	str	r2, [r3, #64]	; 0x40
 8000ebe:	4b2a      	ldr	r3, [pc, #168]	; (8000f68 <HAL_ADC_MspInit+0x108>)
 8000ec0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ec2:	2380      	movs	r3, #128	; 0x80
 8000ec4:	035b      	lsls	r3, r3, #13
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ecc:	4b26      	ldr	r3, [pc, #152]	; (8000f68 <HAL_ADC_MspInit+0x108>)
 8000ece:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ed0:	4b25      	ldr	r3, [pc, #148]	; (8000f68 <HAL_ADC_MspInit+0x108>)
 8000ed2:	2101      	movs	r1, #1
 8000ed4:	430a      	orrs	r2, r1
 8000ed6:	635a      	str	r2, [r3, #52]	; 0x34
 8000ed8:	4b23      	ldr	r3, [pc, #140]	; (8000f68 <HAL_ADC_MspInit+0x108>)
 8000eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000edc:	2201      	movs	r2, #1
 8000ede:	4013      	ands	r3, r2
 8000ee0:	60bb      	str	r3, [r7, #8]
 8000ee2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ee4:	215c      	movs	r1, #92	; 0x5c
 8000ee6:	187b      	adds	r3, r7, r1
 8000ee8:	2201      	movs	r2, #1
 8000eea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eec:	187b      	adds	r3, r7, r1
 8000eee:	2203      	movs	r2, #3
 8000ef0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	187b      	adds	r3, r7, r1
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef8:	187a      	adds	r2, r7, r1
 8000efa:	23a0      	movs	r3, #160	; 0xa0
 8000efc:	05db      	lsls	r3, r3, #23
 8000efe:	0011      	movs	r1, r2
 8000f00:	0018      	movs	r0, r3
 8000f02:	f001 fb45 	bl	8002590 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000f06:	4b19      	ldr	r3, [pc, #100]	; (8000f6c <HAL_ADC_MspInit+0x10c>)
 8000f08:	4a19      	ldr	r2, [pc, #100]	; (8000f70 <HAL_ADC_MspInit+0x110>)
 8000f0a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000f0c:	4b17      	ldr	r3, [pc, #92]	; (8000f6c <HAL_ADC_MspInit+0x10c>)
 8000f0e:	2205      	movs	r2, #5
 8000f10:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f12:	4b16      	ldr	r3, [pc, #88]	; (8000f6c <HAL_ADC_MspInit+0x10c>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f18:	4b14      	ldr	r3, [pc, #80]	; (8000f6c <HAL_ADC_MspInit+0x10c>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f1e:	4b13      	ldr	r3, [pc, #76]	; (8000f6c <HAL_ADC_MspInit+0x10c>)
 8000f20:	2280      	movs	r2, #128	; 0x80
 8000f22:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000f24:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <HAL_ADC_MspInit+0x10c>)
 8000f26:	2280      	movs	r2, #128	; 0x80
 8000f28:	0092      	lsls	r2, r2, #2
 8000f2a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000f2c:	4b0f      	ldr	r3, [pc, #60]	; (8000f6c <HAL_ADC_MspInit+0x10c>)
 8000f2e:	2280      	movs	r2, #128	; 0x80
 8000f30:	0112      	lsls	r2, r2, #4
 8000f32:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f34:	4b0d      	ldr	r3, [pc, #52]	; (8000f6c <HAL_ADC_MspInit+0x10c>)
 8000f36:	2220      	movs	r2, #32
 8000f38:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f3a:	4b0c      	ldr	r3, [pc, #48]	; (8000f6c <HAL_ADC_MspInit+0x10c>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f40:	4b0a      	ldr	r3, [pc, #40]	; (8000f6c <HAL_ADC_MspInit+0x10c>)
 8000f42:	0018      	movs	r0, r3
 8000f44:	f001 f884 	bl	8002050 <HAL_DMA_Init>
 8000f48:	1e03      	subs	r3, r0, #0
 8000f4a:	d001      	beq.n	8000f50 <HAL_ADC_MspInit+0xf0>
    {
      Error_Handler();
 8000f4c:	f7ff ff5a 	bl	8000e04 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	4a06      	ldr	r2, [pc, #24]	; (8000f6c <HAL_ADC_MspInit+0x10c>)
 8000f54:	651a      	str	r2, [r3, #80]	; 0x50
 8000f56:	4b05      	ldr	r3, [pc, #20]	; (8000f6c <HAL_ADC_MspInit+0x10c>)
 8000f58:	687a      	ldr	r2, [r7, #4]
 8000f5a:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f5c:	46c0      	nop			; (mov r8, r8)
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	b01d      	add	sp, #116	; 0x74
 8000f62:	bd90      	pop	{r4, r7, pc}
 8000f64:	40012400 	.word	0x40012400
 8000f68:	40021000 	.word	0x40021000
 8000f6c:	20000094 	.word	0x20000094
 8000f70:	40020008 	.word	0x40020008

08000f74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f78:	e7fe      	b.n	8000f78 <NMI_Handler+0x4>

08000f7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f7e:	e7fe      	b.n	8000f7e <HardFault_Handler+0x4>

08000f80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000f84:	46c0      	nop			; (mov r8, r8)
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f8e:	46c0      	nop			; (mov r8, r8)
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f98:	f000 f8aa 	bl	80010f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f9c:	46c0      	nop			; (mov r8, r8)
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
	...

08000fa4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000fa8:	4b03      	ldr	r3, [pc, #12]	; (8000fb8 <DMA1_Channel1_IRQHandler+0x14>)
 8000faa:	0018      	movs	r0, r3
 8000fac:	f001 f982 	bl	80022b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000fb0:	46c0      	nop			; (mov r8, r8)
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	46c0      	nop			; (mov r8, r8)
 8000fb8:	20000094 	.word	0x20000094

08000fbc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fc0:	46c0      	nop			; (mov r8, r8)
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
	...

08000fc8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fc8:	480d      	ldr	r0, [pc, #52]	; (8001000 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000fca:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fcc:	f7ff fff6 	bl	8000fbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fd0:	480c      	ldr	r0, [pc, #48]	; (8001004 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fd2:	490d      	ldr	r1, [pc, #52]	; (8001008 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fd4:	4a0d      	ldr	r2, [pc, #52]	; (800100c <LoopForever+0xe>)
  movs r3, #0
 8000fd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fd8:	e002      	b.n	8000fe0 <LoopCopyDataInit>

08000fda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fde:	3304      	adds	r3, #4

08000fe0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fe0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fe2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fe4:	d3f9      	bcc.n	8000fda <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fe6:	4a0a      	ldr	r2, [pc, #40]	; (8001010 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fe8:	4c0a      	ldr	r4, [pc, #40]	; (8001014 <LoopForever+0x16>)
  movs r3, #0
 8000fea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fec:	e001      	b.n	8000ff2 <LoopFillZerobss>

08000fee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ff0:	3204      	adds	r2, #4

08000ff2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ff2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ff4:	d3fb      	bcc.n	8000fee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ff6:	f002 fbc1 	bl	800377c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000ffa:	f7ff fd3f 	bl	8000a7c <main>

08000ffe <LoopForever>:

LoopForever:
  b LoopForever
 8000ffe:	e7fe      	b.n	8000ffe <LoopForever>
  ldr   r0, =_estack
 8001000:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8001004:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001008:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800100c:	08003874 	.word	0x08003874
  ldr r2, =_sbss
 8001010:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001014:	200000f8 	.word	0x200000f8

08001018 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001018:	e7fe      	b.n	8001018 <ADC1_COMP_IRQHandler>
	...

0800101c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001022:	1dfb      	adds	r3, r7, #7
 8001024:	2200      	movs	r2, #0
 8001026:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001028:	4b0b      	ldr	r3, [pc, #44]	; (8001058 <HAL_Init+0x3c>)
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	4b0a      	ldr	r3, [pc, #40]	; (8001058 <HAL_Init+0x3c>)
 800102e:	2180      	movs	r1, #128	; 0x80
 8001030:	0049      	lsls	r1, r1, #1
 8001032:	430a      	orrs	r2, r1
 8001034:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001036:	2003      	movs	r0, #3
 8001038:	f000 f810 	bl	800105c <HAL_InitTick>
 800103c:	1e03      	subs	r3, r0, #0
 800103e:	d003      	beq.n	8001048 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001040:	1dfb      	adds	r3, r7, #7
 8001042:	2201      	movs	r2, #1
 8001044:	701a      	strb	r2, [r3, #0]
 8001046:	e001      	b.n	800104c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001048:	f7ff fee2 	bl	8000e10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800104c:	1dfb      	adds	r3, r7, #7
 800104e:	781b      	ldrb	r3, [r3, #0]
}
 8001050:	0018      	movs	r0, r3
 8001052:	46bd      	mov	sp, r7
 8001054:	b002      	add	sp, #8
 8001056:	bd80      	pop	{r7, pc}
 8001058:	40022000 	.word	0x40022000

0800105c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800105c:	b590      	push	{r4, r7, lr}
 800105e:	b085      	sub	sp, #20
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001064:	230f      	movs	r3, #15
 8001066:	18fb      	adds	r3, r7, r3
 8001068:	2200      	movs	r2, #0
 800106a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800106c:	4b1d      	ldr	r3, [pc, #116]	; (80010e4 <HAL_InitTick+0x88>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d02b      	beq.n	80010cc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001074:	4b1c      	ldr	r3, [pc, #112]	; (80010e8 <HAL_InitTick+0x8c>)
 8001076:	681c      	ldr	r4, [r3, #0]
 8001078:	4b1a      	ldr	r3, [pc, #104]	; (80010e4 <HAL_InitTick+0x88>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	0019      	movs	r1, r3
 800107e:	23fa      	movs	r3, #250	; 0xfa
 8001080:	0098      	lsls	r0, r3, #2
 8001082:	f7ff f83f 	bl	8000104 <__udivsi3>
 8001086:	0003      	movs	r3, r0
 8001088:	0019      	movs	r1, r3
 800108a:	0020      	movs	r0, r4
 800108c:	f7ff f83a 	bl	8000104 <__udivsi3>
 8001090:	0003      	movs	r3, r0
 8001092:	0018      	movs	r0, r3
 8001094:	f000 ffcf 	bl	8002036 <HAL_SYSTICK_Config>
 8001098:	1e03      	subs	r3, r0, #0
 800109a:	d112      	bne.n	80010c2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2b03      	cmp	r3, #3
 80010a0:	d80a      	bhi.n	80010b8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010a2:	6879      	ldr	r1, [r7, #4]
 80010a4:	2301      	movs	r3, #1
 80010a6:	425b      	negs	r3, r3
 80010a8:	2200      	movs	r2, #0
 80010aa:	0018      	movs	r0, r3
 80010ac:	f000 ff9e 	bl	8001fec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010b0:	4b0e      	ldr	r3, [pc, #56]	; (80010ec <HAL_InitTick+0x90>)
 80010b2:	687a      	ldr	r2, [r7, #4]
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	e00d      	b.n	80010d4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80010b8:	230f      	movs	r3, #15
 80010ba:	18fb      	adds	r3, r7, r3
 80010bc:	2201      	movs	r2, #1
 80010be:	701a      	strb	r2, [r3, #0]
 80010c0:	e008      	b.n	80010d4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010c2:	230f      	movs	r3, #15
 80010c4:	18fb      	adds	r3, r7, r3
 80010c6:	2201      	movs	r2, #1
 80010c8:	701a      	strb	r2, [r3, #0]
 80010ca:	e003      	b.n	80010d4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010cc:	230f      	movs	r3, #15
 80010ce:	18fb      	adds	r3, r7, r3
 80010d0:	2201      	movs	r2, #1
 80010d2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80010d4:	230f      	movs	r3, #15
 80010d6:	18fb      	adds	r3, r7, r3
 80010d8:	781b      	ldrb	r3, [r3, #0]
}
 80010da:	0018      	movs	r0, r3
 80010dc:	46bd      	mov	sp, r7
 80010de:	b005      	add	sp, #20
 80010e0:	bd90      	pop	{r4, r7, pc}
 80010e2:	46c0      	nop			; (mov r8, r8)
 80010e4:	20000008 	.word	0x20000008
 80010e8:	20000000 	.word	0x20000000
 80010ec:	20000004 	.word	0x20000004

080010f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010f4:	4b05      	ldr	r3, [pc, #20]	; (800110c <HAL_IncTick+0x1c>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	001a      	movs	r2, r3
 80010fa:	4b05      	ldr	r3, [pc, #20]	; (8001110 <HAL_IncTick+0x20>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	18d2      	adds	r2, r2, r3
 8001100:	4b03      	ldr	r3, [pc, #12]	; (8001110 <HAL_IncTick+0x20>)
 8001102:	601a      	str	r2, [r3, #0]
}
 8001104:	46c0      	nop			; (mov r8, r8)
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	46c0      	nop			; (mov r8, r8)
 800110c:	20000008 	.word	0x20000008
 8001110:	200000f4 	.word	0x200000f4

08001114 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  return uwTick;
 8001118:	4b02      	ldr	r3, [pc, #8]	; (8001124 <HAL_GetTick+0x10>)
 800111a:	681b      	ldr	r3, [r3, #0]
}
 800111c:	0018      	movs	r0, r3
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	46c0      	nop			; (mov r8, r8)
 8001124:	200000f4 	.word	0x200000f4

08001128 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8001130:	4b06      	ldr	r3, [pc, #24]	; (800114c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a06      	ldr	r2, [pc, #24]	; (8001150 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8001136:	4013      	ands	r3, r2
 8001138:	0019      	movs	r1, r3
 800113a:	4b04      	ldr	r3, [pc, #16]	; (800114c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800113c:	687a      	ldr	r2, [r7, #4]
 800113e:	430a      	orrs	r2, r1
 8001140:	601a      	str	r2, [r3, #0]
}
 8001142:	46c0      	nop			; (mov r8, r8)
 8001144:	46bd      	mov	sp, r7
 8001146:	b002      	add	sp, #8
 8001148:	bd80      	pop	{r7, pc}
 800114a:	46c0      	nop			; (mov r8, r8)
 800114c:	40010000 	.word	0x40010000
 8001150:	fffff9ff 	.word	0xfffff9ff

08001154 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a05      	ldr	r2, [pc, #20]	; (8001178 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001164:	401a      	ands	r2, r3
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	431a      	orrs	r2, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	601a      	str	r2, [r3, #0]
}
 800116e:	46c0      	nop			; (mov r8, r8)
 8001170:	46bd      	mov	sp, r7
 8001172:	b002      	add	sp, #8
 8001174:	bd80      	pop	{r7, pc}
 8001176:	46c0      	nop			; (mov r8, r8)
 8001178:	fe3fffff 	.word	0xfe3fffff

0800117c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	23e0      	movs	r3, #224	; 0xe0
 800118a:	045b      	lsls	r3, r3, #17
 800118c:	4013      	ands	r3, r2
}
 800118e:	0018      	movs	r0, r3
 8001190:	46bd      	mov	sp, r7
 8001192:	b002      	add	sp, #8
 8001194:	bd80      	pop	{r7, pc}

08001196 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b084      	sub	sp, #16
 800119a:	af00      	add	r7, sp, #0
 800119c:	60f8      	str	r0, [r7, #12]
 800119e:	60b9      	str	r1, [r7, #8]
 80011a0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	695b      	ldr	r3, [r3, #20]
 80011a6:	68ba      	ldr	r2, [r7, #8]
 80011a8:	2104      	movs	r1, #4
 80011aa:	400a      	ands	r2, r1
 80011ac:	2107      	movs	r1, #7
 80011ae:	4091      	lsls	r1, r2
 80011b0:	000a      	movs	r2, r1
 80011b2:	43d2      	mvns	r2, r2
 80011b4:	401a      	ands	r2, r3
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	2104      	movs	r1, #4
 80011ba:	400b      	ands	r3, r1
 80011bc:	6879      	ldr	r1, [r7, #4]
 80011be:	4099      	lsls	r1, r3
 80011c0:	000b      	movs	r3, r1
 80011c2:	431a      	orrs	r2, r3
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80011c8:	46c0      	nop			; (mov r8, r8)
 80011ca:	46bd      	mov	sp, r7
 80011cc:	b004      	add	sp, #16
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	68da      	ldr	r2, [r3, #12]
 80011dc:	23c0      	movs	r3, #192	; 0xc0
 80011de:	011b      	lsls	r3, r3, #4
 80011e0:	4013      	ands	r3, r2
 80011e2:	d101      	bne.n	80011e8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80011e4:	2301      	movs	r3, #1
 80011e6:	e000      	b.n	80011ea <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	0018      	movs	r0, r3
 80011ec:	46bd      	mov	sp, r7
 80011ee:	b002      	add	sp, #8
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b084      	sub	sp, #16
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	60f8      	str	r0, [r7, #12]
 80011fa:	60b9      	str	r1, [r7, #8]
 80011fc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001202:	68ba      	ldr	r2, [r7, #8]
 8001204:	211f      	movs	r1, #31
 8001206:	400a      	ands	r2, r1
 8001208:	210f      	movs	r1, #15
 800120a:	4091      	lsls	r1, r2
 800120c:	000a      	movs	r2, r1
 800120e:	43d2      	mvns	r2, r2
 8001210:	401a      	ands	r2, r3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	0e9b      	lsrs	r3, r3, #26
 8001216:	210f      	movs	r1, #15
 8001218:	4019      	ands	r1, r3
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	201f      	movs	r0, #31
 800121e:	4003      	ands	r3, r0
 8001220:	4099      	lsls	r1, r3
 8001222:	000b      	movs	r3, r1
 8001224:	431a      	orrs	r2, r3
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800122a:	46c0      	nop			; (mov r8, r8)
 800122c:	46bd      	mov	sp, r7
 800122e:	b004      	add	sp, #16
 8001230:	bd80      	pop	{r7, pc}

08001232 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b082      	sub	sp, #8
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
 800123a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	035b      	lsls	r3, r3, #13
 8001244:	0b5b      	lsrs	r3, r3, #13
 8001246:	431a      	orrs	r2, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800124c:	46c0      	nop			; (mov r8, r8)
 800124e:	46bd      	mov	sp, r7
 8001250:	b002      	add	sp, #8
 8001252:	bd80      	pop	{r7, pc}

08001254 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001262:	683a      	ldr	r2, [r7, #0]
 8001264:	0352      	lsls	r2, r2, #13
 8001266:	0b52      	lsrs	r2, r2, #13
 8001268:	43d2      	mvns	r2, r2
 800126a:	401a      	ands	r2, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001270:	46c0      	nop			; (mov r8, r8)
 8001272:	46bd      	mov	sp, r7
 8001274:	b002      	add	sp, #8
 8001276:	bd80      	pop	{r7, pc}

08001278 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	695b      	ldr	r3, [r3, #20]
 8001288:	68ba      	ldr	r2, [r7, #8]
 800128a:	0212      	lsls	r2, r2, #8
 800128c:	43d2      	mvns	r2, r2
 800128e:	401a      	ands	r2, r3
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	021b      	lsls	r3, r3, #8
 8001294:	6879      	ldr	r1, [r7, #4]
 8001296:	400b      	ands	r3, r1
 8001298:	4904      	ldr	r1, [pc, #16]	; (80012ac <LL_ADC_SetChannelSamplingTime+0x34>)
 800129a:	400b      	ands	r3, r1
 800129c:	431a      	orrs	r2, r3
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80012a2:	46c0      	nop			; (mov r8, r8)
 80012a4:	46bd      	mov	sp, r7
 80012a6:	b004      	add	sp, #16
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	46c0      	nop			; (mov r8, r8)
 80012ac:	07ffff00 	.word	0x07ffff00

080012b0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	4a05      	ldr	r2, [pc, #20]	; (80012d4 <LL_ADC_EnableInternalRegulator+0x24>)
 80012be:	4013      	ands	r3, r2
 80012c0:	2280      	movs	r2, #128	; 0x80
 80012c2:	0552      	lsls	r2, r2, #21
 80012c4:	431a      	orrs	r2, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80012ca:	46c0      	nop			; (mov r8, r8)
 80012cc:	46bd      	mov	sp, r7
 80012ce:	b002      	add	sp, #8
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	46c0      	nop			; (mov r8, r8)
 80012d4:	6fffffe8 	.word	0x6fffffe8

080012d8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	689a      	ldr	r2, [r3, #8]
 80012e4:	2380      	movs	r3, #128	; 0x80
 80012e6:	055b      	lsls	r3, r3, #21
 80012e8:	401a      	ands	r2, r3
 80012ea:	2380      	movs	r3, #128	; 0x80
 80012ec:	055b      	lsls	r3, r3, #21
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d101      	bne.n	80012f6 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80012f2:	2301      	movs	r3, #1
 80012f4:	e000      	b.n	80012f8 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80012f6:	2300      	movs	r3, #0
}
 80012f8:	0018      	movs	r0, r3
 80012fa:	46bd      	mov	sp, r7
 80012fc:	b002      	add	sp, #8
 80012fe:	bd80      	pop	{r7, pc}

08001300 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	4a04      	ldr	r2, [pc, #16]	; (8001320 <LL_ADC_Enable+0x20>)
 800130e:	4013      	ands	r3, r2
 8001310:	2201      	movs	r2, #1
 8001312:	431a      	orrs	r2, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001318:	46c0      	nop			; (mov r8, r8)
 800131a:	46bd      	mov	sp, r7
 800131c:	b002      	add	sp, #8
 800131e:	bd80      	pop	{r7, pc}
 8001320:	7fffffe8 	.word	0x7fffffe8

08001324 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	4a04      	ldr	r2, [pc, #16]	; (8001344 <LL_ADC_Disable+0x20>)
 8001332:	4013      	ands	r3, r2
 8001334:	2202      	movs	r2, #2
 8001336:	431a      	orrs	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800133c:	46c0      	nop			; (mov r8, r8)
 800133e:	46bd      	mov	sp, r7
 8001340:	b002      	add	sp, #8
 8001342:	bd80      	pop	{r7, pc}
 8001344:	7fffffe8 	.word	0x7fffffe8

08001348 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	2201      	movs	r2, #1
 8001356:	4013      	ands	r3, r2
 8001358:	2b01      	cmp	r3, #1
 800135a:	d101      	bne.n	8001360 <LL_ADC_IsEnabled+0x18>
 800135c:	2301      	movs	r3, #1
 800135e:	e000      	b.n	8001362 <LL_ADC_IsEnabled+0x1a>
 8001360:	2300      	movs	r3, #0
}
 8001362:	0018      	movs	r0, r3
 8001364:	46bd      	mov	sp, r7
 8001366:	b002      	add	sp, #8
 8001368:	bd80      	pop	{r7, pc}
	...

0800136c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	4a04      	ldr	r2, [pc, #16]	; (800138c <LL_ADC_REG_StartConversion+0x20>)
 800137a:	4013      	ands	r3, r2
 800137c:	2204      	movs	r2, #4
 800137e:	431a      	orrs	r2, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001384:	46c0      	nop			; (mov r8, r8)
 8001386:	46bd      	mov	sp, r7
 8001388:	b002      	add	sp, #8
 800138a:	bd80      	pop	{r7, pc}
 800138c:	7fffffe8 	.word	0x7fffffe8

08001390 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	2204      	movs	r2, #4
 800139e:	4013      	ands	r3, r2
 80013a0:	2b04      	cmp	r3, #4
 80013a2:	d101      	bne.n	80013a8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80013a4:	2301      	movs	r3, #1
 80013a6:	e000      	b.n	80013aa <LL_ADC_REG_IsConversionOngoing+0x1a>
 80013a8:	2300      	movs	r3, #0
}
 80013aa:	0018      	movs	r0, r3
 80013ac:	46bd      	mov	sp, r7
 80013ae:	b002      	add	sp, #8
 80013b0:	bd80      	pop	{r7, pc}
	...

080013b4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b088      	sub	sp, #32
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013bc:	231f      	movs	r3, #31
 80013be:	18fb      	adds	r3, r7, r3
 80013c0:	2200      	movs	r2, #0
 80013c2:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d101      	bne.n	80013da <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e1b1      	b.n	800173e <HAL_ADC_Init+0x38a>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d10a      	bne.n	80013f8 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	0018      	movs	r0, r3
 80013e6:	f7ff fd3b 	bl	8000e60 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2200      	movs	r2, #0
 80013ee:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2254      	movs	r2, #84	; 0x54
 80013f4:	2100      	movs	r1, #0
 80013f6:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	0018      	movs	r0, r3
 80013fe:	f7ff ff6b 	bl	80012d8 <LL_ADC_IsInternalRegulatorEnabled>
 8001402:	1e03      	subs	r3, r0, #0
 8001404:	d115      	bne.n	8001432 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	0018      	movs	r0, r3
 800140c:	f7ff ff50 	bl	80012b0 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001410:	4bcd      	ldr	r3, [pc, #820]	; (8001748 <HAL_ADC_Init+0x394>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	49cd      	ldr	r1, [pc, #820]	; (800174c <HAL_ADC_Init+0x398>)
 8001416:	0018      	movs	r0, r3
 8001418:	f7fe fe74 	bl	8000104 <__udivsi3>
 800141c:	0003      	movs	r3, r0
 800141e:	3301      	adds	r3, #1
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001424:	e002      	b.n	800142c <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	3b01      	subs	r3, #1
 800142a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d1f9      	bne.n	8001426 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	0018      	movs	r0, r3
 8001438:	f7ff ff4e 	bl	80012d8 <LL_ADC_IsInternalRegulatorEnabled>
 800143c:	1e03      	subs	r3, r0, #0
 800143e:	d10f      	bne.n	8001460 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001444:	2210      	movs	r2, #16
 8001446:	431a      	orrs	r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001450:	2201      	movs	r2, #1
 8001452:	431a      	orrs	r2, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001458:	231f      	movs	r3, #31
 800145a:	18fb      	adds	r3, r7, r3
 800145c:	2201      	movs	r2, #1
 800145e:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	0018      	movs	r0, r3
 8001466:	f7ff ff93 	bl	8001390 <LL_ADC_REG_IsConversionOngoing>
 800146a:	0003      	movs	r3, r0
 800146c:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001472:	2210      	movs	r2, #16
 8001474:	4013      	ands	r3, r2
 8001476:	d000      	beq.n	800147a <HAL_ADC_Init+0xc6>
 8001478:	e154      	b.n	8001724 <HAL_ADC_Init+0x370>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d000      	beq.n	8001482 <HAL_ADC_Init+0xce>
 8001480:	e150      	b.n	8001724 <HAL_ADC_Init+0x370>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001486:	4ab2      	ldr	r2, [pc, #712]	; (8001750 <HAL_ADC_Init+0x39c>)
 8001488:	4013      	ands	r3, r2
 800148a:	2202      	movs	r2, #2
 800148c:	431a      	orrs	r2, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	0018      	movs	r0, r3
 8001498:	f7ff ff56 	bl	8001348 <LL_ADC_IsEnabled>
 800149c:	1e03      	subs	r3, r0, #0
 800149e:	d156      	bne.n	800154e <HAL_ADC_Init+0x19a>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	68db      	ldr	r3, [r3, #12]
 80014a6:	2218      	movs	r2, #24
 80014a8:	4393      	bics	r3, r2
 80014aa:	0019      	movs	r1, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689a      	ldr	r2, [r3, #8]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	430a      	orrs	r2, r1
 80014b6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	0f9b      	lsrs	r3, r3, #30
 80014be:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80014c4:	4313      	orrs	r3, r2
 80014c6:	697a      	ldr	r2, [r7, #20]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	223c      	movs	r2, #60	; 0x3c
 80014d0:	5c9b      	ldrb	r3, [r3, r2]
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d111      	bne.n	80014fa <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	0f9b      	lsrs	r3, r3, #30
 80014dc:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80014e2:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 80014e8:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80014ee:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	2201      	movs	r2, #1
 80014f6:	4313      	orrs	r3, r2
 80014f8:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	691b      	ldr	r3, [r3, #16]
 8001500:	4a94      	ldr	r2, [pc, #592]	; (8001754 <HAL_ADC_Init+0x3a0>)
 8001502:	4013      	ands	r3, r2
 8001504:	0019      	movs	r1, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	697a      	ldr	r2, [r7, #20]
 800150c:	430a      	orrs	r2, r1
 800150e:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	685a      	ldr	r2, [r3, #4]
 8001514:	23c0      	movs	r3, #192	; 0xc0
 8001516:	061b      	lsls	r3, r3, #24
 8001518:	429a      	cmp	r2, r3
 800151a:	d018      	beq.n	800154e <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001520:	2380      	movs	r3, #128	; 0x80
 8001522:	05db      	lsls	r3, r3, #23
 8001524:	429a      	cmp	r2, r3
 8001526:	d012      	beq.n	800154e <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800152c:	2380      	movs	r3, #128	; 0x80
 800152e:	061b      	lsls	r3, r3, #24
 8001530:	429a      	cmp	r2, r3
 8001532:	d00c      	beq.n	800154e <HAL_ADC_Init+0x19a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001534:	4b88      	ldr	r3, [pc, #544]	; (8001758 <HAL_ADC_Init+0x3a4>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a88      	ldr	r2, [pc, #544]	; (800175c <HAL_ADC_Init+0x3a8>)
 800153a:	4013      	ands	r3, r2
 800153c:	0019      	movs	r1, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685a      	ldr	r2, [r3, #4]
 8001542:	23f0      	movs	r3, #240	; 0xf0
 8001544:	039b      	lsls	r3, r3, #14
 8001546:	401a      	ands	r2, r3
 8001548:	4b83      	ldr	r3, [pc, #524]	; (8001758 <HAL_ADC_Init+0x3a4>)
 800154a:	430a      	orrs	r2, r1
 800154c:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	7e1b      	ldrb	r3, [r3, #24]
 8001552:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	7e5b      	ldrb	r3, [r3, #25]
 8001558:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800155a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	7e9b      	ldrb	r3, [r3, #26]
 8001560:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001562:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001568:	2b00      	cmp	r3, #0
 800156a:	d002      	beq.n	8001572 <HAL_ADC_Init+0x1be>
 800156c:	2380      	movs	r3, #128	; 0x80
 800156e:	015b      	lsls	r3, r3, #5
 8001570:	e000      	b.n	8001574 <HAL_ADC_Init+0x1c0>
 8001572:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001574:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800157a:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	691b      	ldr	r3, [r3, #16]
 8001580:	2b00      	cmp	r3, #0
 8001582:	da04      	bge.n	800158e <HAL_ADC_Init+0x1da>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	691b      	ldr	r3, [r3, #16]
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	085b      	lsrs	r3, r3, #1
 800158c:	e001      	b.n	8001592 <HAL_ADC_Init+0x1de>
 800158e:	2380      	movs	r3, #128	; 0x80
 8001590:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                           |
 8001592:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	212c      	movs	r1, #44	; 0x2c
 8001598:	5c5b      	ldrb	r3, [r3, r1]
 800159a:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800159c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800159e:	69ba      	ldr	r2, [r7, #24]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2220      	movs	r2, #32
 80015a8:	5c9b      	ldrb	r3, [r3, r2]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d115      	bne.n	80015da <HAL_ADC_Init+0x226>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	7e9b      	ldrb	r3, [r3, #26]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d105      	bne.n	80015c2 <HAL_ADC_Init+0x20e>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	2280      	movs	r2, #128	; 0x80
 80015ba:	0252      	lsls	r2, r2, #9
 80015bc:	4313      	orrs	r3, r2
 80015be:	61bb      	str	r3, [r7, #24]
 80015c0:	e00b      	b.n	80015da <HAL_ADC_Init+0x226>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c6:	2220      	movs	r2, #32
 80015c8:	431a      	orrs	r2, r3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015d2:	2201      	movs	r2, #1
 80015d4:	431a      	orrs	r2, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d00a      	beq.n	80015f8 <HAL_ADC_Init+0x244>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015e6:	23e0      	movs	r3, #224	; 0xe0
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	401a      	ands	r2, r3
                   hadc->Init.ExternalTrigConvEdge);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80015f0:	4313      	orrs	r3, r2
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	68db      	ldr	r3, [r3, #12]
 80015fe:	4a58      	ldr	r2, [pc, #352]	; (8001760 <HAL_ADC_Init+0x3ac>)
 8001600:	4013      	ands	r3, r2
 8001602:	0019      	movs	r1, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	430a      	orrs	r2, r1
 800160c:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	691b      	ldr	r3, [r3, #16]
 8001614:	4a53      	ldr	r2, [pc, #332]	; (8001764 <HAL_ADC_Init+0x3b0>)
 8001616:	4013      	ands	r3, r2
 8001618:	0019      	movs	r1, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	697a      	ldr	r2, [r7, #20]
 8001620:	430a      	orrs	r2, r1
 8001622:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6818      	ldr	r0, [r3, #0]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800162c:	001a      	movs	r2, r3
 800162e:	2100      	movs	r1, #0
 8001630:	f7ff fdb1 	bl	8001196 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6818      	ldr	r0, [r3, #0]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800163c:	494a      	ldr	r1, [pc, #296]	; (8001768 <HAL_ADC_Init+0x3b4>)
 800163e:	001a      	movs	r2, r3
 8001640:	f7ff fda9 	bl	8001196 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	691b      	ldr	r3, [r3, #16]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d109      	bne.n	8001660 <HAL_ADC_Init+0x2ac>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	2110      	movs	r1, #16
 8001658:	4249      	negs	r1, r1
 800165a:	430a      	orrs	r2, r1
 800165c:	629a      	str	r2, [r3, #40]	; 0x28
 800165e:	e03a      	b.n	80016d6 <HAL_ADC_Init+0x322>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	691a      	ldr	r2, [r3, #16]
 8001664:	2380      	movs	r3, #128	; 0x80
 8001666:	039b      	lsls	r3, r3, #14
 8001668:	429a      	cmp	r2, r3
 800166a:	d134      	bne.n	80016d6 <HAL_ADC_Init+0x322>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 800166c:	2300      	movs	r3, #0
 800166e:	613b      	str	r3, [r7, #16]
 8001670:	e00c      	b.n	800168c <HAL_ADC_Init+0x2d8>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	40da      	lsrs	r2, r3
 800167c:	0013      	movs	r3, r2
 800167e:	220f      	movs	r2, #15
 8001680:	4013      	ands	r3, r2
 8001682:	2b0f      	cmp	r3, #15
 8001684:	d006      	beq.n	8001694 <HAL_ADC_Init+0x2e0>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	3301      	adds	r3, #1
 800168a:	613b      	str	r3, [r7, #16]
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	2b07      	cmp	r3, #7
 8001690:	d9ef      	bls.n	8001672 <HAL_ADC_Init+0x2be>
 8001692:	e000      	b.n	8001696 <HAL_ADC_Init+0x2e2>
            ADC_CHSELR_SQ1)
        {
          break;
 8001694:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	2b01      	cmp	r3, #1
 800169a:	d109      	bne.n	80016b0 <HAL_ADC_Init+0x2fc>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	2110      	movs	r1, #16
 80016a8:	4249      	negs	r1, r1
 80016aa:	430a      	orrs	r2, r1
 80016ac:	629a      	str	r2, [r3, #40]	; 0x28
 80016ae:	e012      	b.n	80016d6 <HAL_ADC_Init+0x322>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	69db      	ldr	r3, [r3, #28]
 80016ba:	3b01      	subs	r3, #1
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	221c      	movs	r2, #28
 80016c0:	4013      	ands	r3, r2
 80016c2:	2210      	movs	r2, #16
 80016c4:	4252      	negs	r2, r2
 80016c6:	409a      	lsls	r2, r3
 80016c8:	0011      	movs	r1, r2
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	430a      	orrs	r2, r1
 80016d4:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	4a23      	ldr	r2, [pc, #140]	; (800176c <HAL_ADC_Init+0x3b8>)
 80016de:	4013      	ands	r3, r2
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d10b      	bne.n	80016fe <HAL_ADC_Init+0x34a>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2200      	movs	r2, #0
 80016ea:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f0:	2203      	movs	r2, #3
 80016f2:	4393      	bics	r3, r2
 80016f4:	2201      	movs	r2, #1
 80016f6:	431a      	orrs	r2, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80016fc:	e01c      	b.n	8001738 <HAL_ADC_Init+0x384>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001702:	2212      	movs	r2, #18
 8001704:	4393      	bics	r3, r2
 8001706:	2210      	movs	r2, #16
 8001708:	431a      	orrs	r2, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001712:	2201      	movs	r2, #1
 8001714:	431a      	orrs	r2, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 800171a:	231f      	movs	r3, #31
 800171c:	18fb      	adds	r3, r7, r3
 800171e:	2201      	movs	r2, #1
 8001720:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8001722:	e009      	b.n	8001738 <HAL_ADC_Init+0x384>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001728:	2210      	movs	r2, #16
 800172a:	431a      	orrs	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001730:	231f      	movs	r3, #31
 8001732:	18fb      	adds	r3, r7, r3
 8001734:	2201      	movs	r2, #1
 8001736:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001738:	231f      	movs	r3, #31
 800173a:	18fb      	adds	r3, r7, r3
 800173c:	781b      	ldrb	r3, [r3, #0]
}
 800173e:	0018      	movs	r0, r3
 8001740:	46bd      	mov	sp, r7
 8001742:	b008      	add	sp, #32
 8001744:	bd80      	pop	{r7, pc}
 8001746:	46c0      	nop			; (mov r8, r8)
 8001748:	20000000 	.word	0x20000000
 800174c:	00030d40 	.word	0x00030d40
 8001750:	fffffefd 	.word	0xfffffefd
 8001754:	1ffffc02 	.word	0x1ffffc02
 8001758:	40012708 	.word	0x40012708
 800175c:	ffc3ffff 	.word	0xffc3ffff
 8001760:	fffe0219 	.word	0xfffe0219
 8001764:	dffffc02 	.word	0xdffffc02
 8001768:	07ffff04 	.word	0x07ffff04
 800176c:	833fffe7 	.word	0x833fffe7

08001770 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001770:	b5b0      	push	{r4, r5, r7, lr}
 8001772:	b086      	sub	sp, #24
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	0018      	movs	r0, r3
 8001782:	f7ff fe05 	bl	8001390 <LL_ADC_REG_IsConversionOngoing>
 8001786:	1e03      	subs	r3, r0, #0
 8001788:	d16c      	bne.n	8001864 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	2254      	movs	r2, #84	; 0x54
 800178e:	5c9b      	ldrb	r3, [r3, r2]
 8001790:	2b01      	cmp	r3, #1
 8001792:	d101      	bne.n	8001798 <HAL_ADC_Start_DMA+0x28>
 8001794:	2302      	movs	r3, #2
 8001796:	e06c      	b.n	8001872 <HAL_ADC_Start_DMA+0x102>
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2254      	movs	r2, #84	; 0x54
 800179c:	2101      	movs	r1, #1
 800179e:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	2201      	movs	r2, #1
 80017a8:	4013      	ands	r3, r2
 80017aa:	d113      	bne.n	80017d4 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	0018      	movs	r0, r3
 80017b2:	f7ff fdc9 	bl	8001348 <LL_ADC_IsEnabled>
 80017b6:	1e03      	subs	r3, r0, #0
 80017b8:	d004      	beq.n	80017c4 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	0018      	movs	r0, r3
 80017c0:	f7ff fdb0 	bl	8001324 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	68da      	ldr	r2, [r3, #12]
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2101      	movs	r1, #1
 80017d0:	430a      	orrs	r2, r1
 80017d2:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80017d4:	2517      	movs	r5, #23
 80017d6:	197c      	adds	r4, r7, r5
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	0018      	movs	r0, r3
 80017dc:	f000 fa46 	bl	8001c6c <ADC_Enable>
 80017e0:	0003      	movs	r3, r0
 80017e2:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80017e4:	002c      	movs	r4, r5
 80017e6:	193b      	adds	r3, r7, r4
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d13e      	bne.n	800186c <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f2:	4a22      	ldr	r2, [pc, #136]	; (800187c <HAL_ADC_Start_DMA+0x10c>)
 80017f4:	4013      	ands	r3, r2
 80017f6:	2280      	movs	r2, #128	; 0x80
 80017f8:	0052      	lsls	r2, r2, #1
 80017fa:	431a      	orrs	r2, r3
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2200      	movs	r2, #0
 8001804:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800180a:	4a1d      	ldr	r2, [pc, #116]	; (8001880 <HAL_ADC_Start_DMA+0x110>)
 800180c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001812:	4a1c      	ldr	r2, [pc, #112]	; (8001884 <HAL_ADC_Start_DMA+0x114>)
 8001814:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800181a:	4a1b      	ldr	r2, [pc, #108]	; (8001888 <HAL_ADC_Start_DMA+0x118>)
 800181c:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	221c      	movs	r2, #28
 8001824:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2254      	movs	r2, #84	; 0x54
 800182a:	2100      	movs	r1, #0
 800182c:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	685a      	ldr	r2, [r3, #4]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2110      	movs	r1, #16
 800183a:	430a      	orrs	r2, r1
 800183c:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	3340      	adds	r3, #64	; 0x40
 8001848:	0019      	movs	r1, r3
 800184a:	68ba      	ldr	r2, [r7, #8]
 800184c:	193c      	adds	r4, r7, r4
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f000 fcaa 	bl	80021a8 <HAL_DMA_Start_IT>
 8001854:	0003      	movs	r3, r0
 8001856:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	0018      	movs	r0, r3
 800185e:	f7ff fd85 	bl	800136c <LL_ADC_REG_StartConversion>
 8001862:	e003      	b.n	800186c <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001864:	2317      	movs	r3, #23
 8001866:	18fb      	adds	r3, r7, r3
 8001868:	2202      	movs	r2, #2
 800186a:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800186c:	2317      	movs	r3, #23
 800186e:	18fb      	adds	r3, r7, r3
 8001870:	781b      	ldrb	r3, [r3, #0]
}
 8001872:	0018      	movs	r0, r3
 8001874:	46bd      	mov	sp, r7
 8001876:	b006      	add	sp, #24
 8001878:	bdb0      	pop	{r4, r5, r7, pc}
 800187a:	46c0      	nop			; (mov r8, r8)
 800187c:	fffff0fe 	.word	0xfffff0fe
 8001880:	08001d79 	.word	0x08001d79
 8001884:	08001e41 	.word	0x08001e41
 8001888:	08001e5f 	.word	0x08001e5f

0800188c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001894:	46c0      	nop			; (mov r8, r8)
 8001896:	46bd      	mov	sp, r7
 8001898:	b002      	add	sp, #8
 800189a:	bd80      	pop	{r7, pc}

0800189c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80018a4:	46c0      	nop			; (mov r8, r8)
 80018a6:	46bd      	mov	sp, r7
 80018a8:	b002      	add	sp, #8
 80018aa:	bd80      	pop	{r7, pc}

080018ac <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80018b4:	46c0      	nop			; (mov r8, r8)
 80018b6:	46bd      	mov	sp, r7
 80018b8:	b002      	add	sp, #8
 80018ba:	bd80      	pop	{r7, pc}

080018bc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018c6:	2317      	movs	r3, #23
 80018c8:	18fb      	adds	r3, r7, r3
 80018ca:	2200      	movs	r2, #0
 80018cc:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80018ce:	2300      	movs	r3, #0
 80018d0:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2254      	movs	r2, #84	; 0x54
 80018d6:	5c9b      	ldrb	r3, [r3, r2]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d101      	bne.n	80018e0 <HAL_ADC_ConfigChannel+0x24>
 80018dc:	2302      	movs	r3, #2
 80018de:	e1c0      	b.n	8001c62 <HAL_ADC_ConfigChannel+0x3a6>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2254      	movs	r2, #84	; 0x54
 80018e4:	2101      	movs	r1, #1
 80018e6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	0018      	movs	r0, r3
 80018ee:	f7ff fd4f 	bl	8001390 <LL_ADC_REG_IsConversionOngoing>
 80018f2:	1e03      	subs	r3, r0, #0
 80018f4:	d000      	beq.n	80018f8 <HAL_ADC_ConfigChannel+0x3c>
 80018f6:	e1a3      	b.n	8001c40 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d100      	bne.n	8001902 <HAL_ADC_ConfigChannel+0x46>
 8001900:	e143      	b.n	8001b8a <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	691a      	ldr	r2, [r3, #16]
 8001906:	2380      	movs	r3, #128	; 0x80
 8001908:	061b      	lsls	r3, r3, #24
 800190a:	429a      	cmp	r2, r3
 800190c:	d004      	beq.n	8001918 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001912:	4ac1      	ldr	r2, [pc, #772]	; (8001c18 <HAL_ADC_ConfigChannel+0x35c>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d108      	bne.n	800192a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	0019      	movs	r1, r3
 8001922:	0010      	movs	r0, r2
 8001924:	f7ff fc85 	bl	8001232 <LL_ADC_REG_SetSequencerChAdd>
 8001928:	e0c9      	b.n	8001abe <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	211f      	movs	r1, #31
 8001934:	400b      	ands	r3, r1
 8001936:	210f      	movs	r1, #15
 8001938:	4099      	lsls	r1, r3
 800193a:	000b      	movs	r3, r1
 800193c:	43db      	mvns	r3, r3
 800193e:	4013      	ands	r3, r2
 8001940:	0019      	movs	r1, r3
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	035b      	lsls	r3, r3, #13
 8001948:	0b5b      	lsrs	r3, r3, #13
 800194a:	d105      	bne.n	8001958 <HAL_ADC_ConfigChannel+0x9c>
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	0e9b      	lsrs	r3, r3, #26
 8001952:	221f      	movs	r2, #31
 8001954:	4013      	ands	r3, r2
 8001956:	e098      	b.n	8001a8a <HAL_ADC_ConfigChannel+0x1ce>
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2201      	movs	r2, #1
 800195e:	4013      	ands	r3, r2
 8001960:	d000      	beq.n	8001964 <HAL_ADC_ConfigChannel+0xa8>
 8001962:	e091      	b.n	8001a88 <HAL_ADC_ConfigChannel+0x1cc>
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2202      	movs	r2, #2
 800196a:	4013      	ands	r3, r2
 800196c:	d000      	beq.n	8001970 <HAL_ADC_ConfigChannel+0xb4>
 800196e:	e089      	b.n	8001a84 <HAL_ADC_ConfigChannel+0x1c8>
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2204      	movs	r2, #4
 8001976:	4013      	ands	r3, r2
 8001978:	d000      	beq.n	800197c <HAL_ADC_ConfigChannel+0xc0>
 800197a:	e081      	b.n	8001a80 <HAL_ADC_ConfigChannel+0x1c4>
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2208      	movs	r2, #8
 8001982:	4013      	ands	r3, r2
 8001984:	d000      	beq.n	8001988 <HAL_ADC_ConfigChannel+0xcc>
 8001986:	e079      	b.n	8001a7c <HAL_ADC_ConfigChannel+0x1c0>
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2210      	movs	r2, #16
 800198e:	4013      	ands	r3, r2
 8001990:	d000      	beq.n	8001994 <HAL_ADC_ConfigChannel+0xd8>
 8001992:	e071      	b.n	8001a78 <HAL_ADC_ConfigChannel+0x1bc>
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2220      	movs	r2, #32
 800199a:	4013      	ands	r3, r2
 800199c:	d000      	beq.n	80019a0 <HAL_ADC_ConfigChannel+0xe4>
 800199e:	e069      	b.n	8001a74 <HAL_ADC_ConfigChannel+0x1b8>
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2240      	movs	r2, #64	; 0x40
 80019a6:	4013      	ands	r3, r2
 80019a8:	d000      	beq.n	80019ac <HAL_ADC_ConfigChannel+0xf0>
 80019aa:	e061      	b.n	8001a70 <HAL_ADC_ConfigChannel+0x1b4>
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2280      	movs	r2, #128	; 0x80
 80019b2:	4013      	ands	r3, r2
 80019b4:	d000      	beq.n	80019b8 <HAL_ADC_ConfigChannel+0xfc>
 80019b6:	e059      	b.n	8001a6c <HAL_ADC_ConfigChannel+0x1b0>
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	2380      	movs	r3, #128	; 0x80
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	4013      	ands	r3, r2
 80019c2:	d151      	bne.n	8001a68 <HAL_ADC_ConfigChannel+0x1ac>
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	2380      	movs	r3, #128	; 0x80
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	4013      	ands	r3, r2
 80019ce:	d149      	bne.n	8001a64 <HAL_ADC_ConfigChannel+0x1a8>
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	2380      	movs	r3, #128	; 0x80
 80019d6:	00db      	lsls	r3, r3, #3
 80019d8:	4013      	ands	r3, r2
 80019da:	d141      	bne.n	8001a60 <HAL_ADC_ConfigChannel+0x1a4>
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	2380      	movs	r3, #128	; 0x80
 80019e2:	011b      	lsls	r3, r3, #4
 80019e4:	4013      	ands	r3, r2
 80019e6:	d139      	bne.n	8001a5c <HAL_ADC_ConfigChannel+0x1a0>
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	2380      	movs	r3, #128	; 0x80
 80019ee:	015b      	lsls	r3, r3, #5
 80019f0:	4013      	ands	r3, r2
 80019f2:	d131      	bne.n	8001a58 <HAL_ADC_ConfigChannel+0x19c>
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	2380      	movs	r3, #128	; 0x80
 80019fa:	019b      	lsls	r3, r3, #6
 80019fc:	4013      	ands	r3, r2
 80019fe:	d129      	bne.n	8001a54 <HAL_ADC_ConfigChannel+0x198>
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	2380      	movs	r3, #128	; 0x80
 8001a06:	01db      	lsls	r3, r3, #7
 8001a08:	4013      	ands	r3, r2
 8001a0a:	d121      	bne.n	8001a50 <HAL_ADC_ConfigChannel+0x194>
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	2380      	movs	r3, #128	; 0x80
 8001a12:	021b      	lsls	r3, r3, #8
 8001a14:	4013      	ands	r3, r2
 8001a16:	d119      	bne.n	8001a4c <HAL_ADC_ConfigChannel+0x190>
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	2380      	movs	r3, #128	; 0x80
 8001a1e:	025b      	lsls	r3, r3, #9
 8001a20:	4013      	ands	r3, r2
 8001a22:	d111      	bne.n	8001a48 <HAL_ADC_ConfigChannel+0x18c>
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	2380      	movs	r3, #128	; 0x80
 8001a2a:	029b      	lsls	r3, r3, #10
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	d109      	bne.n	8001a44 <HAL_ADC_ConfigChannel+0x188>
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	2380      	movs	r3, #128	; 0x80
 8001a36:	02db      	lsls	r3, r3, #11
 8001a38:	4013      	ands	r3, r2
 8001a3a:	d001      	beq.n	8001a40 <HAL_ADC_ConfigChannel+0x184>
 8001a3c:	2312      	movs	r3, #18
 8001a3e:	e024      	b.n	8001a8a <HAL_ADC_ConfigChannel+0x1ce>
 8001a40:	2300      	movs	r3, #0
 8001a42:	e022      	b.n	8001a8a <HAL_ADC_ConfigChannel+0x1ce>
 8001a44:	2311      	movs	r3, #17
 8001a46:	e020      	b.n	8001a8a <HAL_ADC_ConfigChannel+0x1ce>
 8001a48:	2310      	movs	r3, #16
 8001a4a:	e01e      	b.n	8001a8a <HAL_ADC_ConfigChannel+0x1ce>
 8001a4c:	230f      	movs	r3, #15
 8001a4e:	e01c      	b.n	8001a8a <HAL_ADC_ConfigChannel+0x1ce>
 8001a50:	230e      	movs	r3, #14
 8001a52:	e01a      	b.n	8001a8a <HAL_ADC_ConfigChannel+0x1ce>
 8001a54:	230d      	movs	r3, #13
 8001a56:	e018      	b.n	8001a8a <HAL_ADC_ConfigChannel+0x1ce>
 8001a58:	230c      	movs	r3, #12
 8001a5a:	e016      	b.n	8001a8a <HAL_ADC_ConfigChannel+0x1ce>
 8001a5c:	230b      	movs	r3, #11
 8001a5e:	e014      	b.n	8001a8a <HAL_ADC_ConfigChannel+0x1ce>
 8001a60:	230a      	movs	r3, #10
 8001a62:	e012      	b.n	8001a8a <HAL_ADC_ConfigChannel+0x1ce>
 8001a64:	2309      	movs	r3, #9
 8001a66:	e010      	b.n	8001a8a <HAL_ADC_ConfigChannel+0x1ce>
 8001a68:	2308      	movs	r3, #8
 8001a6a:	e00e      	b.n	8001a8a <HAL_ADC_ConfigChannel+0x1ce>
 8001a6c:	2307      	movs	r3, #7
 8001a6e:	e00c      	b.n	8001a8a <HAL_ADC_ConfigChannel+0x1ce>
 8001a70:	2306      	movs	r3, #6
 8001a72:	e00a      	b.n	8001a8a <HAL_ADC_ConfigChannel+0x1ce>
 8001a74:	2305      	movs	r3, #5
 8001a76:	e008      	b.n	8001a8a <HAL_ADC_ConfigChannel+0x1ce>
 8001a78:	2304      	movs	r3, #4
 8001a7a:	e006      	b.n	8001a8a <HAL_ADC_ConfigChannel+0x1ce>
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e004      	b.n	8001a8a <HAL_ADC_ConfigChannel+0x1ce>
 8001a80:	2302      	movs	r3, #2
 8001a82:	e002      	b.n	8001a8a <HAL_ADC_ConfigChannel+0x1ce>
 8001a84:	2301      	movs	r3, #1
 8001a86:	e000      	b.n	8001a8a <HAL_ADC_ConfigChannel+0x1ce>
 8001a88:	2300      	movs	r3, #0
 8001a8a:	683a      	ldr	r2, [r7, #0]
 8001a8c:	6852      	ldr	r2, [r2, #4]
 8001a8e:	201f      	movs	r0, #31
 8001a90:	4002      	ands	r2, r0
 8001a92:	4093      	lsls	r3, r2
 8001a94:	000a      	movs	r2, r1
 8001a96:	431a      	orrs	r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	089b      	lsrs	r3, r3, #2
 8001aa2:	1c5a      	adds	r2, r3, #1
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	69db      	ldr	r3, [r3, #28]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d808      	bhi.n	8001abe <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6818      	ldr	r0, [r3, #0]
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	6859      	ldr	r1, [r3, #4]
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	001a      	movs	r2, r3
 8001aba:	f7ff fb9a 	bl	80011f2 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6818      	ldr	r0, [r3, #0]
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	6819      	ldr	r1, [r3, #0]
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	001a      	movs	r2, r3
 8001acc:	f7ff fbd4 	bl	8001278 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	db00      	blt.n	8001ada <HAL_ADC_ConfigChannel+0x21e>
 8001ad8:	e0bc      	b.n	8001c54 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ada:	4b50      	ldr	r3, [pc, #320]	; (8001c1c <HAL_ADC_ConfigChannel+0x360>)
 8001adc:	0018      	movs	r0, r3
 8001ade:	f7ff fb4d 	bl	800117c <LL_ADC_GetCommonPathInternalCh>
 8001ae2:	0003      	movs	r3, r0
 8001ae4:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a4d      	ldr	r2, [pc, #308]	; (8001c20 <HAL_ADC_ConfigChannel+0x364>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d122      	bne.n	8001b36 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001af0:	693a      	ldr	r2, [r7, #16]
 8001af2:	2380      	movs	r3, #128	; 0x80
 8001af4:	041b      	lsls	r3, r3, #16
 8001af6:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001af8:	d11d      	bne.n	8001b36 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	2280      	movs	r2, #128	; 0x80
 8001afe:	0412      	lsls	r2, r2, #16
 8001b00:	4313      	orrs	r3, r2
 8001b02:	4a46      	ldr	r2, [pc, #280]	; (8001c1c <HAL_ADC_ConfigChannel+0x360>)
 8001b04:	0019      	movs	r1, r3
 8001b06:	0010      	movs	r0, r2
 8001b08:	f7ff fb24 	bl	8001154 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b0c:	4b45      	ldr	r3, [pc, #276]	; (8001c24 <HAL_ADC_ConfigChannel+0x368>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4945      	ldr	r1, [pc, #276]	; (8001c28 <HAL_ADC_ConfigChannel+0x36c>)
 8001b12:	0018      	movs	r0, r3
 8001b14:	f7fe faf6 	bl	8000104 <__udivsi3>
 8001b18:	0003      	movs	r3, r0
 8001b1a:	1c5a      	adds	r2, r3, #1
 8001b1c:	0013      	movs	r3, r2
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	189b      	adds	r3, r3, r2
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001b26:	e002      	b.n	8001b2e <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d1f9      	bne.n	8001b28 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001b34:	e08e      	b.n	8001c54 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a3c      	ldr	r2, [pc, #240]	; (8001c2c <HAL_ADC_ConfigChannel+0x370>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d10e      	bne.n	8001b5e <HAL_ADC_ConfigChannel+0x2a2>
 8001b40:	693a      	ldr	r2, [r7, #16]
 8001b42:	2380      	movs	r3, #128	; 0x80
 8001b44:	045b      	lsls	r3, r3, #17
 8001b46:	4013      	ands	r3, r2
 8001b48:	d109      	bne.n	8001b5e <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	2280      	movs	r2, #128	; 0x80
 8001b4e:	0452      	lsls	r2, r2, #17
 8001b50:	4313      	orrs	r3, r2
 8001b52:	4a32      	ldr	r2, [pc, #200]	; (8001c1c <HAL_ADC_ConfigChannel+0x360>)
 8001b54:	0019      	movs	r1, r3
 8001b56:	0010      	movs	r0, r2
 8001b58:	f7ff fafc 	bl	8001154 <LL_ADC_SetCommonPathInternalCh>
 8001b5c:	e07a      	b.n	8001c54 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a33      	ldr	r2, [pc, #204]	; (8001c30 <HAL_ADC_ConfigChannel+0x374>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d000      	beq.n	8001b6a <HAL_ADC_ConfigChannel+0x2ae>
 8001b68:	e074      	b.n	8001c54 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001b6a:	693a      	ldr	r2, [r7, #16]
 8001b6c:	2380      	movs	r3, #128	; 0x80
 8001b6e:	03db      	lsls	r3, r3, #15
 8001b70:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001b72:	d000      	beq.n	8001b76 <HAL_ADC_ConfigChannel+0x2ba>
 8001b74:	e06e      	b.n	8001c54 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	2280      	movs	r2, #128	; 0x80
 8001b7a:	03d2      	lsls	r2, r2, #15
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	4a27      	ldr	r2, [pc, #156]	; (8001c1c <HAL_ADC_ConfigChannel+0x360>)
 8001b80:	0019      	movs	r1, r3
 8001b82:	0010      	movs	r0, r2
 8001b84:	f7ff fae6 	bl	8001154 <LL_ADC_SetCommonPathInternalCh>
 8001b88:	e064      	b.n	8001c54 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	691a      	ldr	r2, [r3, #16]
 8001b8e:	2380      	movs	r3, #128	; 0x80
 8001b90:	061b      	lsls	r3, r3, #24
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d004      	beq.n	8001ba0 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001b9a:	4a1f      	ldr	r2, [pc, #124]	; (8001c18 <HAL_ADC_ConfigChannel+0x35c>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d107      	bne.n	8001bb0 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	0019      	movs	r1, r3
 8001baa:	0010      	movs	r0, r2
 8001bac:	f7ff fb52 	bl	8001254 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	da4d      	bge.n	8001c54 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001bb8:	4b18      	ldr	r3, [pc, #96]	; (8001c1c <HAL_ADC_ConfigChannel+0x360>)
 8001bba:	0018      	movs	r0, r3
 8001bbc:	f7ff fade 	bl	800117c <LL_ADC_GetCommonPathInternalCh>
 8001bc0:	0003      	movs	r3, r0
 8001bc2:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a15      	ldr	r2, [pc, #84]	; (8001c20 <HAL_ADC_ConfigChannel+0x364>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d108      	bne.n	8001be0 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	4a18      	ldr	r2, [pc, #96]	; (8001c34 <HAL_ADC_ConfigChannel+0x378>)
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	4a11      	ldr	r2, [pc, #68]	; (8001c1c <HAL_ADC_ConfigChannel+0x360>)
 8001bd6:	0019      	movs	r1, r3
 8001bd8:	0010      	movs	r0, r2
 8001bda:	f7ff fabb 	bl	8001154 <LL_ADC_SetCommonPathInternalCh>
 8001bde:	e039      	b.n	8001c54 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a11      	ldr	r2, [pc, #68]	; (8001c2c <HAL_ADC_ConfigChannel+0x370>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d108      	bne.n	8001bfc <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	4a12      	ldr	r2, [pc, #72]	; (8001c38 <HAL_ADC_ConfigChannel+0x37c>)
 8001bee:	4013      	ands	r3, r2
 8001bf0:	4a0a      	ldr	r2, [pc, #40]	; (8001c1c <HAL_ADC_ConfigChannel+0x360>)
 8001bf2:	0019      	movs	r1, r3
 8001bf4:	0010      	movs	r0, r2
 8001bf6:	f7ff faad 	bl	8001154 <LL_ADC_SetCommonPathInternalCh>
 8001bfa:	e02b      	b.n	8001c54 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a0b      	ldr	r2, [pc, #44]	; (8001c30 <HAL_ADC_ConfigChannel+0x374>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d126      	bne.n	8001c54 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	4a0c      	ldr	r2, [pc, #48]	; (8001c3c <HAL_ADC_ConfigChannel+0x380>)
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	4a03      	ldr	r2, [pc, #12]	; (8001c1c <HAL_ADC_ConfigChannel+0x360>)
 8001c0e:	0019      	movs	r1, r3
 8001c10:	0010      	movs	r0, r2
 8001c12:	f7ff fa9f 	bl	8001154 <LL_ADC_SetCommonPathInternalCh>
 8001c16:	e01d      	b.n	8001c54 <HAL_ADC_ConfigChannel+0x398>
 8001c18:	80000004 	.word	0x80000004
 8001c1c:	40012708 	.word	0x40012708
 8001c20:	b0001000 	.word	0xb0001000
 8001c24:	20000000 	.word	0x20000000
 8001c28:	00030d40 	.word	0x00030d40
 8001c2c:	b8004000 	.word	0xb8004000
 8001c30:	b4002000 	.word	0xb4002000
 8001c34:	ff7fffff 	.word	0xff7fffff
 8001c38:	feffffff 	.word	0xfeffffff
 8001c3c:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c44:	2220      	movs	r2, #32
 8001c46:	431a      	orrs	r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001c4c:	2317      	movs	r3, #23
 8001c4e:	18fb      	adds	r3, r7, r3
 8001c50:	2201      	movs	r2, #1
 8001c52:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2254      	movs	r2, #84	; 0x54
 8001c58:	2100      	movs	r1, #0
 8001c5a:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001c5c:	2317      	movs	r3, #23
 8001c5e:	18fb      	adds	r3, r7, r3
 8001c60:	781b      	ldrb	r3, [r3, #0]
}
 8001c62:	0018      	movs	r0, r3
 8001c64:	46bd      	mov	sp, r7
 8001c66:	b006      	add	sp, #24
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	46c0      	nop			; (mov r8, r8)

08001c6c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001c74:	2300      	movs	r3, #0
 8001c76:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	0018      	movs	r0, r3
 8001c7e:	f7ff fb63 	bl	8001348 <LL_ADC_IsEnabled>
 8001c82:	1e03      	subs	r3, r0, #0
 8001c84:	d000      	beq.n	8001c88 <ADC_Enable+0x1c>
 8001c86:	e069      	b.n	8001d5c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	4a36      	ldr	r2, [pc, #216]	; (8001d68 <ADC_Enable+0xfc>)
 8001c90:	4013      	ands	r3, r2
 8001c92:	d00d      	beq.n	8001cb0 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c98:	2210      	movs	r2, #16
 8001c9a:	431a      	orrs	r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	431a      	orrs	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e056      	b.n	8001d5e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	0018      	movs	r0, r3
 8001cb6:	f7ff fb23 	bl	8001300 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001cba:	4b2c      	ldr	r3, [pc, #176]	; (8001d6c <ADC_Enable+0x100>)
 8001cbc:	0018      	movs	r0, r3
 8001cbe:	f7ff fa5d 	bl	800117c <LL_ADC_GetCommonPathInternalCh>
 8001cc2:	0002      	movs	r2, r0
 8001cc4:	2380      	movs	r3, #128	; 0x80
 8001cc6:	041b      	lsls	r3, r3, #16
 8001cc8:	4013      	ands	r3, r2
 8001cca:	d00f      	beq.n	8001cec <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ccc:	4b28      	ldr	r3, [pc, #160]	; (8001d70 <ADC_Enable+0x104>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4928      	ldr	r1, [pc, #160]	; (8001d74 <ADC_Enable+0x108>)
 8001cd2:	0018      	movs	r0, r3
 8001cd4:	f7fe fa16 	bl	8000104 <__udivsi3>
 8001cd8:	0003      	movs	r3, r0
 8001cda:	3301      	adds	r3, #1
 8001cdc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001cde:	e002      	b.n	8001ce6 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d1f9      	bne.n	8001ce0 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	7e5b      	ldrb	r3, [r3, #25]
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d033      	beq.n	8001d5c <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001cf4:	f7ff fa0e 	bl	8001114 <HAL_GetTick>
 8001cf8:	0003      	movs	r3, r0
 8001cfa:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001cfc:	e027      	b.n	8001d4e <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	0018      	movs	r0, r3
 8001d04:	f7ff fb20 	bl	8001348 <LL_ADC_IsEnabled>
 8001d08:	1e03      	subs	r3, r0, #0
 8001d0a:	d104      	bne.n	8001d16 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	0018      	movs	r0, r3
 8001d12:	f7ff faf5 	bl	8001300 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001d16:	f7ff f9fd 	bl	8001114 <HAL_GetTick>
 8001d1a:	0002      	movs	r2, r0
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d914      	bls.n	8001d4e <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d00d      	beq.n	8001d4e <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d36:	2210      	movs	r2, #16
 8001d38:	431a      	orrs	r2, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d42:	2201      	movs	r2, #1
 8001d44:	431a      	orrs	r2, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e007      	b.n	8001d5e <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2201      	movs	r2, #1
 8001d56:	4013      	ands	r3, r2
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d1d0      	bne.n	8001cfe <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	0018      	movs	r0, r3
 8001d60:	46bd      	mov	sp, r7
 8001d62:	b004      	add	sp, #16
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	46c0      	nop			; (mov r8, r8)
 8001d68:	80000017 	.word	0x80000017
 8001d6c:	40012708 	.word	0x40012708
 8001d70:	20000000 	.word	0x20000000
 8001d74:	00030d40 	.word	0x00030d40

08001d78 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d84:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d8a:	2250      	movs	r2, #80	; 0x50
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	d141      	bne.n	8001e14 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d94:	2280      	movs	r2, #128	; 0x80
 8001d96:	0092      	lsls	r2, r2, #2
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	0018      	movs	r0, r3
 8001da4:	f7ff fa14 	bl	80011d0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001da8:	1e03      	subs	r3, r0, #0
 8001daa:	d02e      	beq.n	8001e0a <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	7e9b      	ldrb	r3, [r3, #26]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d12a      	bne.n	8001e0a <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2208      	movs	r2, #8
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	2b08      	cmp	r3, #8
 8001dc0:	d123      	bne.n	8001e0a <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	0018      	movs	r0, r3
 8001dc8:	f7ff fae2 	bl	8001390 <LL_ADC_REG_IsConversionOngoing>
 8001dcc:	1e03      	subs	r3, r0, #0
 8001dce:	d110      	bne.n	8001df2 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	685a      	ldr	r2, [r3, #4]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	210c      	movs	r1, #12
 8001ddc:	438a      	bics	r2, r1
 8001dde:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de4:	4a15      	ldr	r2, [pc, #84]	; (8001e3c <ADC_DMAConvCplt+0xc4>)
 8001de6:	4013      	ands	r3, r2
 8001de8:	2201      	movs	r2, #1
 8001dea:	431a      	orrs	r2, r3
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	659a      	str	r2, [r3, #88]	; 0x58
 8001df0:	e00b      	b.n	8001e0a <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df6:	2220      	movs	r2, #32
 8001df8:	431a      	orrs	r2, r3
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e02:	2201      	movs	r2, #1
 8001e04:	431a      	orrs	r2, r3
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	0018      	movs	r0, r3
 8001e0e:	f7ff fd3d 	bl	800188c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001e12:	e00f      	b.n	8001e34 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e18:	2210      	movs	r2, #16
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	d004      	beq.n	8001e28 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	0018      	movs	r0, r3
 8001e22:	f7ff fd43 	bl	80018ac <HAL_ADC_ErrorCallback>
}
 8001e26:	e005      	b.n	8001e34 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	0010      	movs	r0, r2
 8001e32:	4798      	blx	r3
}
 8001e34:	46c0      	nop			; (mov r8, r8)
 8001e36:	46bd      	mov	sp, r7
 8001e38:	b004      	add	sp, #16
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	fffffefe 	.word	0xfffffefe

08001e40 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e4c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	0018      	movs	r0, r3
 8001e52:	f7ff fd23 	bl	800189c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e56:	46c0      	nop			; (mov r8, r8)
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	b004      	add	sp, #16
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b084      	sub	sp, #16
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e6a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e70:	2240      	movs	r2, #64	; 0x40
 8001e72:	431a      	orrs	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e7c:	2204      	movs	r2, #4
 8001e7e:	431a      	orrs	r2, r3
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	0018      	movs	r0, r3
 8001e88:	f7ff fd10 	bl	80018ac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e8c:	46c0      	nop			; (mov r8, r8)
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	b004      	add	sp, #16
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	0002      	movs	r2, r0
 8001e9c:	1dfb      	adds	r3, r7, #7
 8001e9e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001ea0:	1dfb      	adds	r3, r7, #7
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	2b7f      	cmp	r3, #127	; 0x7f
 8001ea6:	d809      	bhi.n	8001ebc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ea8:	1dfb      	adds	r3, r7, #7
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	001a      	movs	r2, r3
 8001eae:	231f      	movs	r3, #31
 8001eb0:	401a      	ands	r2, r3
 8001eb2:	4b04      	ldr	r3, [pc, #16]	; (8001ec4 <__NVIC_EnableIRQ+0x30>)
 8001eb4:	2101      	movs	r1, #1
 8001eb6:	4091      	lsls	r1, r2
 8001eb8:	000a      	movs	r2, r1
 8001eba:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001ebc:	46c0      	nop			; (mov r8, r8)
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	b002      	add	sp, #8
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	e000e100 	.word	0xe000e100

08001ec8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ec8:	b590      	push	{r4, r7, lr}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	0002      	movs	r2, r0
 8001ed0:	6039      	str	r1, [r7, #0]
 8001ed2:	1dfb      	adds	r3, r7, #7
 8001ed4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001ed6:	1dfb      	adds	r3, r7, #7
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	2b7f      	cmp	r3, #127	; 0x7f
 8001edc:	d828      	bhi.n	8001f30 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ede:	4a2f      	ldr	r2, [pc, #188]	; (8001f9c <__NVIC_SetPriority+0xd4>)
 8001ee0:	1dfb      	adds	r3, r7, #7
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	b25b      	sxtb	r3, r3
 8001ee6:	089b      	lsrs	r3, r3, #2
 8001ee8:	33c0      	adds	r3, #192	; 0xc0
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	589b      	ldr	r3, [r3, r2]
 8001eee:	1dfa      	adds	r2, r7, #7
 8001ef0:	7812      	ldrb	r2, [r2, #0]
 8001ef2:	0011      	movs	r1, r2
 8001ef4:	2203      	movs	r2, #3
 8001ef6:	400a      	ands	r2, r1
 8001ef8:	00d2      	lsls	r2, r2, #3
 8001efa:	21ff      	movs	r1, #255	; 0xff
 8001efc:	4091      	lsls	r1, r2
 8001efe:	000a      	movs	r2, r1
 8001f00:	43d2      	mvns	r2, r2
 8001f02:	401a      	ands	r2, r3
 8001f04:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	019b      	lsls	r3, r3, #6
 8001f0a:	22ff      	movs	r2, #255	; 0xff
 8001f0c:	401a      	ands	r2, r3
 8001f0e:	1dfb      	adds	r3, r7, #7
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	0018      	movs	r0, r3
 8001f14:	2303      	movs	r3, #3
 8001f16:	4003      	ands	r3, r0
 8001f18:	00db      	lsls	r3, r3, #3
 8001f1a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f1c:	481f      	ldr	r0, [pc, #124]	; (8001f9c <__NVIC_SetPriority+0xd4>)
 8001f1e:	1dfb      	adds	r3, r7, #7
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	b25b      	sxtb	r3, r3
 8001f24:	089b      	lsrs	r3, r3, #2
 8001f26:	430a      	orrs	r2, r1
 8001f28:	33c0      	adds	r3, #192	; 0xc0
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001f2e:	e031      	b.n	8001f94 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f30:	4a1b      	ldr	r2, [pc, #108]	; (8001fa0 <__NVIC_SetPriority+0xd8>)
 8001f32:	1dfb      	adds	r3, r7, #7
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	0019      	movs	r1, r3
 8001f38:	230f      	movs	r3, #15
 8001f3a:	400b      	ands	r3, r1
 8001f3c:	3b08      	subs	r3, #8
 8001f3e:	089b      	lsrs	r3, r3, #2
 8001f40:	3306      	adds	r3, #6
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	18d3      	adds	r3, r2, r3
 8001f46:	3304      	adds	r3, #4
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	1dfa      	adds	r2, r7, #7
 8001f4c:	7812      	ldrb	r2, [r2, #0]
 8001f4e:	0011      	movs	r1, r2
 8001f50:	2203      	movs	r2, #3
 8001f52:	400a      	ands	r2, r1
 8001f54:	00d2      	lsls	r2, r2, #3
 8001f56:	21ff      	movs	r1, #255	; 0xff
 8001f58:	4091      	lsls	r1, r2
 8001f5a:	000a      	movs	r2, r1
 8001f5c:	43d2      	mvns	r2, r2
 8001f5e:	401a      	ands	r2, r3
 8001f60:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	019b      	lsls	r3, r3, #6
 8001f66:	22ff      	movs	r2, #255	; 0xff
 8001f68:	401a      	ands	r2, r3
 8001f6a:	1dfb      	adds	r3, r7, #7
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	0018      	movs	r0, r3
 8001f70:	2303      	movs	r3, #3
 8001f72:	4003      	ands	r3, r0
 8001f74:	00db      	lsls	r3, r3, #3
 8001f76:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f78:	4809      	ldr	r0, [pc, #36]	; (8001fa0 <__NVIC_SetPriority+0xd8>)
 8001f7a:	1dfb      	adds	r3, r7, #7
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	001c      	movs	r4, r3
 8001f80:	230f      	movs	r3, #15
 8001f82:	4023      	ands	r3, r4
 8001f84:	3b08      	subs	r3, #8
 8001f86:	089b      	lsrs	r3, r3, #2
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	3306      	adds	r3, #6
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	18c3      	adds	r3, r0, r3
 8001f90:	3304      	adds	r3, #4
 8001f92:	601a      	str	r2, [r3, #0]
}
 8001f94:	46c0      	nop			; (mov r8, r8)
 8001f96:	46bd      	mov	sp, r7
 8001f98:	b003      	add	sp, #12
 8001f9a:	bd90      	pop	{r4, r7, pc}
 8001f9c:	e000e100 	.word	0xe000e100
 8001fa0:	e000ed00 	.word	0xe000ed00

08001fa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	1e5a      	subs	r2, r3, #1
 8001fb0:	2380      	movs	r3, #128	; 0x80
 8001fb2:	045b      	lsls	r3, r3, #17
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d301      	bcc.n	8001fbc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e010      	b.n	8001fde <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fbc:	4b0a      	ldr	r3, [pc, #40]	; (8001fe8 <SysTick_Config+0x44>)
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	3a01      	subs	r2, #1
 8001fc2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	425b      	negs	r3, r3
 8001fc8:	2103      	movs	r1, #3
 8001fca:	0018      	movs	r0, r3
 8001fcc:	f7ff ff7c 	bl	8001ec8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fd0:	4b05      	ldr	r3, [pc, #20]	; (8001fe8 <SysTick_Config+0x44>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fd6:	4b04      	ldr	r3, [pc, #16]	; (8001fe8 <SysTick_Config+0x44>)
 8001fd8:	2207      	movs	r2, #7
 8001fda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	0018      	movs	r0, r3
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	b002      	add	sp, #8
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	46c0      	nop			; (mov r8, r8)
 8001fe8:	e000e010 	.word	0xe000e010

08001fec <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60b9      	str	r1, [r7, #8]
 8001ff4:	607a      	str	r2, [r7, #4]
 8001ff6:	210f      	movs	r1, #15
 8001ff8:	187b      	adds	r3, r7, r1
 8001ffa:	1c02      	adds	r2, r0, #0
 8001ffc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001ffe:	68ba      	ldr	r2, [r7, #8]
 8002000:	187b      	adds	r3, r7, r1
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	b25b      	sxtb	r3, r3
 8002006:	0011      	movs	r1, r2
 8002008:	0018      	movs	r0, r3
 800200a:	f7ff ff5d 	bl	8001ec8 <__NVIC_SetPriority>
}
 800200e:	46c0      	nop			; (mov r8, r8)
 8002010:	46bd      	mov	sp, r7
 8002012:	b004      	add	sp, #16
 8002014:	bd80      	pop	{r7, pc}

08002016 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b082      	sub	sp, #8
 800201a:	af00      	add	r7, sp, #0
 800201c:	0002      	movs	r2, r0
 800201e:	1dfb      	adds	r3, r7, #7
 8002020:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002022:	1dfb      	adds	r3, r7, #7
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	b25b      	sxtb	r3, r3
 8002028:	0018      	movs	r0, r3
 800202a:	f7ff ff33 	bl	8001e94 <__NVIC_EnableIRQ>
}
 800202e:	46c0      	nop			; (mov r8, r8)
 8002030:	46bd      	mov	sp, r7
 8002032:	b002      	add	sp, #8
 8002034:	bd80      	pop	{r7, pc}

08002036 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	b082      	sub	sp, #8
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	0018      	movs	r0, r3
 8002042:	f7ff ffaf 	bl	8001fa4 <SysTick_Config>
 8002046:	0003      	movs	r3, r0
}
 8002048:	0018      	movs	r0, r3
 800204a:	46bd      	mov	sp, r7
 800204c:	b002      	add	sp, #8
 800204e:	bd80      	pop	{r7, pc}

08002050 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d101      	bne.n	8002062 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e091      	b.n	8002186 <HAL_DMA_Init+0x136>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
#if defined(DMA2)
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	001a      	movs	r2, r3
 8002068:	4b49      	ldr	r3, [pc, #292]	; (8002190 <HAL_DMA_Init+0x140>)
 800206a:	429a      	cmp	r2, r3
 800206c:	d810      	bhi.n	8002090 <HAL_DMA_Init+0x40>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a48      	ldr	r2, [pc, #288]	; (8002194 <HAL_DMA_Init+0x144>)
 8002074:	4694      	mov	ip, r2
 8002076:	4463      	add	r3, ip
 8002078:	2114      	movs	r1, #20
 800207a:	0018      	movs	r0, r3
 800207c:	f7fe f842 	bl	8000104 <__udivsi3>
 8002080:	0003      	movs	r3, r0
 8002082:	009a      	lsls	r2, r3, #2
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4a43      	ldr	r2, [pc, #268]	; (8002198 <HAL_DMA_Init+0x148>)
 800208c:	641a      	str	r2, [r3, #64]	; 0x40
 800208e:	e00f      	b.n	80020b0 <HAL_DMA_Init+0x60>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a41      	ldr	r2, [pc, #260]	; (800219c <HAL_DMA_Init+0x14c>)
 8002096:	4694      	mov	ip, r2
 8002098:	4463      	add	r3, ip
 800209a:	2114      	movs	r1, #20
 800209c:	0018      	movs	r0, r3
 800209e:	f7fe f831 	bl	8000104 <__udivsi3>
 80020a2:	0003      	movs	r3, r0
 80020a4:	009a      	lsls	r2, r3, #2
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a3c      	ldr	r2, [pc, #240]	; (80021a0 <HAL_DMA_Init+0x150>)
 80020ae:	641a      	str	r2, [r3, #64]	; 0x40
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2225      	movs	r2, #37	; 0x25
 80020b4:	2102      	movs	r1, #2
 80020b6:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4938      	ldr	r1, [pc, #224]	; (80021a4 <HAL_DMA_Init+0x154>)
 80020c4:	400a      	ands	r2, r1
 80020c6:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	6819      	ldr	r1, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	689a      	ldr	r2, [r3, #8]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	431a      	orrs	r2, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	691b      	ldr	r3, [r3, #16]
 80020dc:	431a      	orrs	r2, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	695b      	ldr	r3, [r3, #20]
 80020e2:	431a      	orrs	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	431a      	orrs	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	69db      	ldr	r3, [r3, #28]
 80020ee:	431a      	orrs	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a1b      	ldr	r3, [r3, #32]
 80020f4:	431a      	orrs	r2, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	430a      	orrs	r2, r1
 80020fc:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	0018      	movs	r0, r3
 8002102:	f000 f9d7 	bl	80024b4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	689a      	ldr	r2, [r3, #8]
 800210a:	2380      	movs	r3, #128	; 0x80
 800210c:	01db      	lsls	r3, r3, #7
 800210e:	429a      	cmp	r2, r3
 8002110:	d102      	bne.n	8002118 <HAL_DMA_Init+0xc8>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685a      	ldr	r2, [r3, #4]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002120:	217f      	movs	r1, #127	; 0x7f
 8002122:	400a      	ands	r2, r1
 8002124:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800212e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d011      	beq.n	800215c <HAL_DMA_Init+0x10c>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	2b04      	cmp	r3, #4
 800213e:	d80d      	bhi.n	800215c <HAL_DMA_Init+0x10c>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	0018      	movs	r0, r3
 8002144:	f000 fa00 	bl	8002548 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002158:	605a      	str	r2, [r3, #4]
 800215a:	e008      	b.n	800216e <HAL_DMA_Init+0x11e>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2225      	movs	r2, #37	; 0x25
 8002178:	2101      	movs	r1, #1
 800217a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2224      	movs	r2, #36	; 0x24
 8002180:	2100      	movs	r1, #0
 8002182:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002184:	2300      	movs	r3, #0
}
 8002186:	0018      	movs	r0, r3
 8002188:	46bd      	mov	sp, r7
 800218a:	b002      	add	sp, #8
 800218c:	bd80      	pop	{r7, pc}
 800218e:	46c0      	nop			; (mov r8, r8)
 8002190:	40020407 	.word	0x40020407
 8002194:	bffdfff8 	.word	0xbffdfff8
 8002198:	40020000 	.word	0x40020000
 800219c:	bffdfbf8 	.word	0xbffdfbf8
 80021a0:	40020400 	.word	0x40020400
 80021a4:	ffff800f 	.word	0xffff800f

080021a8 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b086      	sub	sp, #24
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	60b9      	str	r1, [r7, #8]
 80021b2:	607a      	str	r2, [r7, #4]
 80021b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021b6:	2317      	movs	r3, #23
 80021b8:	18fb      	adds	r3, r7, r3
 80021ba:	2200      	movs	r2, #0
 80021bc:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2224      	movs	r2, #36	; 0x24
 80021c2:	5c9b      	ldrb	r3, [r3, r2]
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d101      	bne.n	80021cc <HAL_DMA_Start_IT+0x24>
 80021c8:	2302      	movs	r3, #2
 80021ca:	e06f      	b.n	80022ac <HAL_DMA_Start_IT+0x104>
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2224      	movs	r2, #36	; 0x24
 80021d0:	2101      	movs	r1, #1
 80021d2:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2225      	movs	r2, #37	; 0x25
 80021d8:	5c9b      	ldrb	r3, [r3, r2]
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d157      	bne.n	8002290 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2225      	movs	r2, #37	; 0x25
 80021e4:	2102      	movs	r1, #2
 80021e6:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2200      	movs	r2, #0
 80021ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2101      	movs	r1, #1
 80021fa:	438a      	bics	r2, r1
 80021fc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	68b9      	ldr	r1, [r7, #8]
 8002204:	68f8      	ldr	r0, [r7, #12]
 8002206:	f000 f919 	bl	800243c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220e:	2b00      	cmp	r3, #0
 8002210:	d008      	beq.n	8002224 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	210e      	movs	r1, #14
 800221e:	430a      	orrs	r2, r1
 8002220:	601a      	str	r2, [r3, #0]
 8002222:	e00f      	b.n	8002244 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2104      	movs	r1, #4
 8002230:	438a      	bics	r2, r1
 8002232:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	210a      	movs	r1, #10
 8002240:	430a      	orrs	r2, r1
 8002242:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	2380      	movs	r3, #128	; 0x80
 800224c:	025b      	lsls	r3, r3, #9
 800224e:	4013      	ands	r3, r2
 8002250:	d008      	beq.n	8002264 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800225c:	2180      	movs	r1, #128	; 0x80
 800225e:	0049      	lsls	r1, r1, #1
 8002260:	430a      	orrs	r2, r1
 8002262:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002268:	2b00      	cmp	r3, #0
 800226a:	d008      	beq.n	800227e <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002276:	2180      	movs	r1, #128	; 0x80
 8002278:	0049      	lsls	r1, r1, #1
 800227a:	430a      	orrs	r2, r1
 800227c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2101      	movs	r1, #1
 800228a:	430a      	orrs	r2, r1
 800228c:	601a      	str	r2, [r3, #0]
 800228e:	e00a      	b.n	80022a6 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2280      	movs	r2, #128	; 0x80
 8002294:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2224      	movs	r2, #36	; 0x24
 800229a:	2100      	movs	r1, #0
 800229c:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 800229e:	2317      	movs	r3, #23
 80022a0:	18fb      	adds	r3, r7, r3
 80022a2:	2201      	movs	r2, #1
 80022a4:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80022a6:	2317      	movs	r3, #23
 80022a8:	18fb      	adds	r3, r7, r3
 80022aa:	781b      	ldrb	r3, [r3, #0]
}
 80022ac:	0018      	movs	r0, r3
 80022ae:	46bd      	mov	sp, r7
 80022b0:	b006      	add	sp, #24
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	60fb      	str	r3, [r7, #12]
#else
  uint32_t flag_it = DMA1->ISR;
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d0:	221c      	movs	r2, #28
 80022d2:	4013      	ands	r3, r2
 80022d4:	2204      	movs	r2, #4
 80022d6:	409a      	lsls	r2, r3
 80022d8:	0013      	movs	r3, r2
 80022da:	68fa      	ldr	r2, [r7, #12]
 80022dc:	4013      	ands	r3, r2
 80022de:	d026      	beq.n	800232e <HAL_DMA_IRQHandler+0x7a>
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	2204      	movs	r2, #4
 80022e4:	4013      	ands	r3, r2
 80022e6:	d022      	beq.n	800232e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2220      	movs	r2, #32
 80022f0:	4013      	ands	r3, r2
 80022f2:	d107      	bne.n	8002304 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2104      	movs	r1, #4
 8002300:	438a      	bics	r2, r1
 8002302:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002308:	221c      	movs	r2, #28
 800230a:	401a      	ands	r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002310:	2104      	movs	r1, #4
 8002312:	4091      	lsls	r1, r2
 8002314:	000a      	movs	r2, r1
 8002316:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231c:	2b00      	cmp	r3, #0
 800231e:	d100      	bne.n	8002322 <HAL_DMA_IRQHandler+0x6e>
 8002320:	e080      	b.n	8002424 <HAL_DMA_IRQHandler+0x170>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	0010      	movs	r0, r2
 800232a:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 800232c:	e07a      	b.n	8002424 <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002332:	221c      	movs	r2, #28
 8002334:	4013      	ands	r3, r2
 8002336:	2202      	movs	r2, #2
 8002338:	409a      	lsls	r2, r3
 800233a:	0013      	movs	r3, r2
 800233c:	68fa      	ldr	r2, [r7, #12]
 800233e:	4013      	ands	r3, r2
 8002340:	d03c      	beq.n	80023bc <HAL_DMA_IRQHandler+0x108>
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	2202      	movs	r2, #2
 8002346:	4013      	ands	r3, r2
 8002348:	d038      	beq.n	80023bc <HAL_DMA_IRQHandler+0x108>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2220      	movs	r2, #32
 8002352:	4013      	ands	r3, r2
 8002354:	d10b      	bne.n	800236e <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	210a      	movs	r1, #10
 8002362:	438a      	bics	r2, r1
 8002364:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2225      	movs	r2, #37	; 0x25
 800236a:	2101      	movs	r1, #1
 800236c:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	001a      	movs	r2, r3
 8002374:	4b2e      	ldr	r3, [pc, #184]	; (8002430 <HAL_DMA_IRQHandler+0x17c>)
 8002376:	429a      	cmp	r2, r3
 8002378:	d909      	bls.n	800238e <HAL_DMA_IRQHandler+0xda>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237e:	221c      	movs	r2, #28
 8002380:	401a      	ands	r2, r3
 8002382:	4b2c      	ldr	r3, [pc, #176]	; (8002434 <HAL_DMA_IRQHandler+0x180>)
 8002384:	2102      	movs	r1, #2
 8002386:	4091      	lsls	r1, r2
 8002388:	000a      	movs	r2, r1
 800238a:	605a      	str	r2, [r3, #4]
 800238c:	e008      	b.n	80023a0 <HAL_DMA_IRQHandler+0xec>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002392:	221c      	movs	r2, #28
 8002394:	401a      	ands	r2, r3
 8002396:	4b28      	ldr	r3, [pc, #160]	; (8002438 <HAL_DMA_IRQHandler+0x184>)
 8002398:	2102      	movs	r1, #2
 800239a:	4091      	lsls	r1, r2
 800239c:	000a      	movs	r2, r1
 800239e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2224      	movs	r2, #36	; 0x24
 80023a4:	2100      	movs	r1, #0
 80023a6:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d039      	beq.n	8002424 <HAL_DMA_IRQHandler+0x170>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	0010      	movs	r0, r2
 80023b8:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80023ba:	e033      	b.n	8002424 <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c0:	221c      	movs	r2, #28
 80023c2:	4013      	ands	r3, r2
 80023c4:	2208      	movs	r2, #8
 80023c6:	409a      	lsls	r2, r3
 80023c8:	0013      	movs	r3, r2
 80023ca:	68fa      	ldr	r2, [r7, #12]
 80023cc:	4013      	ands	r3, r2
 80023ce:	d02a      	beq.n	8002426 <HAL_DMA_IRQHandler+0x172>
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	2208      	movs	r2, #8
 80023d4:	4013      	ands	r3, r2
 80023d6:	d026      	beq.n	8002426 <HAL_DMA_IRQHandler+0x172>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	210e      	movs	r1, #14
 80023e4:	438a      	bics	r2, r1
 80023e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ec:	221c      	movs	r2, #28
 80023ee:	401a      	ands	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f4:	2101      	movs	r1, #1
 80023f6:	4091      	lsls	r1, r2
 80023f8:	000a      	movs	r2, r1
 80023fa:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2225      	movs	r2, #37	; 0x25
 8002406:	2101      	movs	r1, #1
 8002408:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2224      	movs	r2, #36	; 0x24
 800240e:	2100      	movs	r1, #0
 8002410:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002416:	2b00      	cmp	r3, #0
 8002418:	d005      	beq.n	8002426 <HAL_DMA_IRQHandler+0x172>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	0010      	movs	r0, r2
 8002422:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002424:	46c0      	nop			; (mov r8, r8)
 8002426:	46c0      	nop			; (mov r8, r8)
}
 8002428:	46bd      	mov	sp, r7
 800242a:	b004      	add	sp, #16
 800242c:	bd80      	pop	{r7, pc}
 800242e:	46c0      	nop			; (mov r8, r8)
 8002430:	40020080 	.word	0x40020080
 8002434:	40020400 	.word	0x40020400
 8002438:	40020000 	.word	0x40020000

0800243c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	607a      	str	r2, [r7, #4]
 8002448:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800244e:	68fa      	ldr	r2, [r7, #12]
 8002450:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002452:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002458:	2b00      	cmp	r3, #0
 800245a:	d004      	beq.n	8002466 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002460:	68fa      	ldr	r2, [r7, #12]
 8002462:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002464:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246a:	221c      	movs	r2, #28
 800246c:	401a      	ands	r2, r3
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002472:	2101      	movs	r1, #1
 8002474:	4091      	lsls	r1, r2
 8002476:	000a      	movs	r2, r1
 8002478:	605a      	str	r2, [r3, #4]
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	683a      	ldr	r2, [r7, #0]
 8002480:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	2b10      	cmp	r3, #16
 8002488:	d108      	bne.n	800249c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	68ba      	ldr	r2, [r7, #8]
 8002498:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800249a:	e007      	b.n	80024ac <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	68ba      	ldr	r2, [r7, #8]
 80024a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	60da      	str	r2, [r3, #12]
}
 80024ac:	46c0      	nop			; (mov r8, r8)
 80024ae:	46bd      	mov	sp, r7
 80024b0:	b004      	add	sp, #16
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

#if defined(DMA2)
  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	001a      	movs	r2, r3
 80024c2:	4b1d      	ldr	r3, [pc, #116]	; (8002538 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d814      	bhi.n	80024f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x3e>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024cc:	089b      	lsrs	r3, r3, #2
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	4a1a      	ldr	r2, [pc, #104]	; (800253c <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 80024d2:	189a      	adds	r2, r3, r2
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	649a      	str	r2, [r3, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	001a      	movs	r2, r3
 80024de:	23ff      	movs	r3, #255	; 0xff
 80024e0:	4013      	ands	r3, r2
 80024e2:	3b08      	subs	r3, #8
 80024e4:	2114      	movs	r1, #20
 80024e6:	0018      	movs	r0, r3
 80024e8:	f7fd fe0c 	bl	8000104 <__udivsi3>
 80024ec:	0003      	movs	r3, r0
 80024ee:	60fb      	str	r3, [r7, #12]
 80024f0:	e014      	b.n	800251c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f6:	089b      	lsrs	r3, r3, #2
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	4a11      	ldr	r2, [pc, #68]	; (8002540 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 80024fc:	189a      	adds	r2, r3, r2
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	649a      	str	r2, [r3, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	001a      	movs	r2, r3
 8002508:	23ff      	movs	r3, #255	; 0xff
 800250a:	4013      	ands	r3, r2
 800250c:	3b08      	subs	r3, #8
 800250e:	2114      	movs	r1, #20
 8002510:	0018      	movs	r0, r3
 8002512:	f7fd fdf7 	bl	8000104 <__udivsi3>
 8002516:	0003      	movs	r3, r0
 8002518:	3307      	adds	r3, #7
 800251a:	60fb      	str	r3, [r7, #12]
  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	4a09      	ldr	r2, [pc, #36]	; (8002544 <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 8002520:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	221f      	movs	r2, #31
 8002526:	4013      	ands	r3, r2
 8002528:	2201      	movs	r2, #1
 800252a:	409a      	lsls	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002530:	46c0      	nop			; (mov r8, r8)
 8002532:	46bd      	mov	sp, r7
 8002534:	b004      	add	sp, #16
 8002536:	bd80      	pop	{r7, pc}
 8002538:	40020407 	.word	0x40020407
 800253c:	40020800 	.word	0x40020800
 8002540:	4002081c 	.word	0x4002081c
 8002544:	40020880 	.word	0x40020880

08002548 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	227f      	movs	r2, #127	; 0x7f
 8002556:	4013      	ands	r3, r2
 8002558:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	4a0a      	ldr	r2, [pc, #40]	; (8002588 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800255e:	4694      	mov	ip, r2
 8002560:	4463      	add	r3, ip
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	001a      	movs	r2, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a07      	ldr	r2, [pc, #28]	; (800258c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800256e:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	3b01      	subs	r3, #1
 8002574:	2203      	movs	r2, #3
 8002576:	4013      	ands	r3, r2
 8002578:	2201      	movs	r2, #1
 800257a:	409a      	lsls	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002580:	46c0      	nop			; (mov r8, r8)
 8002582:	46bd      	mov	sp, r7
 8002584:	b004      	add	sp, #16
 8002586:	bd80      	pop	{r7, pc}
 8002588:	1000823f 	.word	0x1000823f
 800258c:	40020940 	.word	0x40020940

08002590 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b086      	sub	sp, #24
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800259a:	2300      	movs	r3, #0
 800259c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800259e:	e14d      	b.n	800283c <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2101      	movs	r1, #1
 80025a6:	697a      	ldr	r2, [r7, #20]
 80025a8:	4091      	lsls	r1, r2
 80025aa:	000a      	movs	r2, r1
 80025ac:	4013      	ands	r3, r2
 80025ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d100      	bne.n	80025b8 <HAL_GPIO_Init+0x28>
 80025b6:	e13e      	b.n	8002836 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	2203      	movs	r2, #3
 80025be:	4013      	ands	r3, r2
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d005      	beq.n	80025d0 <HAL_GPIO_Init+0x40>
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	2203      	movs	r2, #3
 80025ca:	4013      	ands	r3, r2
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d130      	bne.n	8002632 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	2203      	movs	r2, #3
 80025dc:	409a      	lsls	r2, r3
 80025de:	0013      	movs	r3, r2
 80025e0:	43da      	mvns	r2, r3
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	4013      	ands	r3, r2
 80025e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	68da      	ldr	r2, [r3, #12]
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	409a      	lsls	r2, r3
 80025f2:	0013      	movs	r3, r2
 80025f4:	693a      	ldr	r2, [r7, #16]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	693a      	ldr	r2, [r7, #16]
 80025fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002606:	2201      	movs	r2, #1
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	409a      	lsls	r2, r3
 800260c:	0013      	movs	r3, r2
 800260e:	43da      	mvns	r2, r3
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	4013      	ands	r3, r2
 8002614:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	091b      	lsrs	r3, r3, #4
 800261c:	2201      	movs	r2, #1
 800261e:	401a      	ands	r2, r3
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	409a      	lsls	r2, r3
 8002624:	0013      	movs	r3, r2
 8002626:	693a      	ldr	r2, [r7, #16]
 8002628:	4313      	orrs	r3, r2
 800262a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	2203      	movs	r2, #3
 8002638:	4013      	ands	r3, r2
 800263a:	2b03      	cmp	r3, #3
 800263c:	d017      	beq.n	800266e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	2203      	movs	r2, #3
 800264a:	409a      	lsls	r2, r3
 800264c:	0013      	movs	r3, r2
 800264e:	43da      	mvns	r2, r3
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	4013      	ands	r3, r2
 8002654:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	689a      	ldr	r2, [r3, #8]
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	409a      	lsls	r2, r3
 8002660:	0013      	movs	r3, r2
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	4313      	orrs	r3, r2
 8002666:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	2203      	movs	r2, #3
 8002674:	4013      	ands	r3, r2
 8002676:	2b02      	cmp	r3, #2
 8002678:	d123      	bne.n	80026c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	08da      	lsrs	r2, r3, #3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	3208      	adds	r2, #8
 8002682:	0092      	lsls	r2, r2, #2
 8002684:	58d3      	ldr	r3, [r2, r3]
 8002686:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	2207      	movs	r2, #7
 800268c:	4013      	ands	r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	220f      	movs	r2, #15
 8002692:	409a      	lsls	r2, r3
 8002694:	0013      	movs	r3, r2
 8002696:	43da      	mvns	r2, r3
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	4013      	ands	r3, r2
 800269c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	691a      	ldr	r2, [r3, #16]
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	2107      	movs	r1, #7
 80026a6:	400b      	ands	r3, r1
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	409a      	lsls	r2, r3
 80026ac:	0013      	movs	r3, r2
 80026ae:	693a      	ldr	r2, [r7, #16]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	08da      	lsrs	r2, r3, #3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	3208      	adds	r2, #8
 80026bc:	0092      	lsls	r2, r2, #2
 80026be:	6939      	ldr	r1, [r7, #16]
 80026c0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	005b      	lsls	r3, r3, #1
 80026cc:	2203      	movs	r2, #3
 80026ce:	409a      	lsls	r2, r3
 80026d0:	0013      	movs	r3, r2
 80026d2:	43da      	mvns	r2, r3
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	4013      	ands	r3, r2
 80026d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	2203      	movs	r2, #3
 80026e0:	401a      	ands	r2, r3
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	409a      	lsls	r2, r3
 80026e8:	0013      	movs	r3, r2
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	693a      	ldr	r2, [r7, #16]
 80026f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685a      	ldr	r2, [r3, #4]
 80026fa:	23c0      	movs	r3, #192	; 0xc0
 80026fc:	029b      	lsls	r3, r3, #10
 80026fe:	4013      	ands	r3, r2
 8002700:	d100      	bne.n	8002704 <HAL_GPIO_Init+0x174>
 8002702:	e098      	b.n	8002836 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002704:	4a53      	ldr	r2, [pc, #332]	; (8002854 <HAL_GPIO_Init+0x2c4>)
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	089b      	lsrs	r3, r3, #2
 800270a:	3318      	adds	r3, #24
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	589b      	ldr	r3, [r3, r2]
 8002710:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	2203      	movs	r2, #3
 8002716:	4013      	ands	r3, r2
 8002718:	00db      	lsls	r3, r3, #3
 800271a:	220f      	movs	r2, #15
 800271c:	409a      	lsls	r2, r3
 800271e:	0013      	movs	r3, r2
 8002720:	43da      	mvns	r2, r3
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	4013      	ands	r3, r2
 8002726:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	23a0      	movs	r3, #160	; 0xa0
 800272c:	05db      	lsls	r3, r3, #23
 800272e:	429a      	cmp	r2, r3
 8002730:	d019      	beq.n	8002766 <HAL_GPIO_Init+0x1d6>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a48      	ldr	r2, [pc, #288]	; (8002858 <HAL_GPIO_Init+0x2c8>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d013      	beq.n	8002762 <HAL_GPIO_Init+0x1d2>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a47      	ldr	r2, [pc, #284]	; (800285c <HAL_GPIO_Init+0x2cc>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d00d      	beq.n	800275e <HAL_GPIO_Init+0x1ce>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a46      	ldr	r2, [pc, #280]	; (8002860 <HAL_GPIO_Init+0x2d0>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d007      	beq.n	800275a <HAL_GPIO_Init+0x1ca>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a45      	ldr	r2, [pc, #276]	; (8002864 <HAL_GPIO_Init+0x2d4>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d101      	bne.n	8002756 <HAL_GPIO_Init+0x1c6>
 8002752:	2304      	movs	r3, #4
 8002754:	e008      	b.n	8002768 <HAL_GPIO_Init+0x1d8>
 8002756:	2305      	movs	r3, #5
 8002758:	e006      	b.n	8002768 <HAL_GPIO_Init+0x1d8>
 800275a:	2303      	movs	r3, #3
 800275c:	e004      	b.n	8002768 <HAL_GPIO_Init+0x1d8>
 800275e:	2302      	movs	r3, #2
 8002760:	e002      	b.n	8002768 <HAL_GPIO_Init+0x1d8>
 8002762:	2301      	movs	r3, #1
 8002764:	e000      	b.n	8002768 <HAL_GPIO_Init+0x1d8>
 8002766:	2300      	movs	r3, #0
 8002768:	697a      	ldr	r2, [r7, #20]
 800276a:	2103      	movs	r1, #3
 800276c:	400a      	ands	r2, r1
 800276e:	00d2      	lsls	r2, r2, #3
 8002770:	4093      	lsls	r3, r2
 8002772:	693a      	ldr	r2, [r7, #16]
 8002774:	4313      	orrs	r3, r2
 8002776:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002778:	4936      	ldr	r1, [pc, #216]	; (8002854 <HAL_GPIO_Init+0x2c4>)
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	089b      	lsrs	r3, r3, #2
 800277e:	3318      	adds	r3, #24
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	693a      	ldr	r2, [r7, #16]
 8002784:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002786:	4a33      	ldr	r2, [pc, #204]	; (8002854 <HAL_GPIO_Init+0x2c4>)
 8002788:	2380      	movs	r3, #128	; 0x80
 800278a:	58d3      	ldr	r3, [r2, r3]
 800278c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	43da      	mvns	r2, r3
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	4013      	ands	r3, r2
 8002796:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685a      	ldr	r2, [r3, #4]
 800279c:	2380      	movs	r3, #128	; 0x80
 800279e:	025b      	lsls	r3, r3, #9
 80027a0:	4013      	ands	r3, r2
 80027a2:	d003      	beq.n	80027ac <HAL_GPIO_Init+0x21c>
        {
          temp |= iocurrent;
 80027a4:	693a      	ldr	r2, [r7, #16]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80027ac:	4929      	ldr	r1, [pc, #164]	; (8002854 <HAL_GPIO_Init+0x2c4>)
 80027ae:	2280      	movs	r2, #128	; 0x80
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 80027b4:	4a27      	ldr	r2, [pc, #156]	; (8002854 <HAL_GPIO_Init+0x2c4>)
 80027b6:	2384      	movs	r3, #132	; 0x84
 80027b8:	58d3      	ldr	r3, [r2, r3]
 80027ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	43da      	mvns	r2, r3
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	4013      	ands	r3, r2
 80027c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	685a      	ldr	r2, [r3, #4]
 80027ca:	2380      	movs	r3, #128	; 0x80
 80027cc:	029b      	lsls	r3, r3, #10
 80027ce:	4013      	ands	r3, r2
 80027d0:	d003      	beq.n	80027da <HAL_GPIO_Init+0x24a>
        {
          temp |= iocurrent;
 80027d2:	693a      	ldr	r2, [r7, #16]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80027da:	491e      	ldr	r1, [pc, #120]	; (8002854 <HAL_GPIO_Init+0x2c4>)
 80027dc:	2284      	movs	r2, #132	; 0x84
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027e2:	4b1c      	ldr	r3, [pc, #112]	; (8002854 <HAL_GPIO_Init+0x2c4>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	43da      	mvns	r2, r3
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	4013      	ands	r3, r2
 80027f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	685a      	ldr	r2, [r3, #4]
 80027f6:	2380      	movs	r3, #128	; 0x80
 80027f8:	035b      	lsls	r3, r3, #13
 80027fa:	4013      	ands	r3, r2
 80027fc:	d003      	beq.n	8002806 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 80027fe:	693a      	ldr	r2, [r7, #16]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	4313      	orrs	r3, r2
 8002804:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002806:	4b13      	ldr	r3, [pc, #76]	; (8002854 <HAL_GPIO_Init+0x2c4>)
 8002808:	693a      	ldr	r2, [r7, #16]
 800280a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800280c:	4b11      	ldr	r3, [pc, #68]	; (8002854 <HAL_GPIO_Init+0x2c4>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	43da      	mvns	r2, r3
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	4013      	ands	r3, r2
 800281a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685a      	ldr	r2, [r3, #4]
 8002820:	2380      	movs	r3, #128	; 0x80
 8002822:	039b      	lsls	r3, r3, #14
 8002824:	4013      	ands	r3, r2
 8002826:	d003      	beq.n	8002830 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8002828:	693a      	ldr	r2, [r7, #16]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	4313      	orrs	r3, r2
 800282e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002830:	4b08      	ldr	r3, [pc, #32]	; (8002854 <HAL_GPIO_Init+0x2c4>)
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	3301      	adds	r3, #1
 800283a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	40da      	lsrs	r2, r3
 8002844:	1e13      	subs	r3, r2, #0
 8002846:	d000      	beq.n	800284a <HAL_GPIO_Init+0x2ba>
 8002848:	e6aa      	b.n	80025a0 <HAL_GPIO_Init+0x10>
  }
}
 800284a:	46c0      	nop			; (mov r8, r8)
 800284c:	46c0      	nop			; (mov r8, r8)
 800284e:	46bd      	mov	sp, r7
 8002850:	b006      	add	sp, #24
 8002852:	bd80      	pop	{r7, pc}
 8002854:	40021800 	.word	0x40021800
 8002858:	50000400 	.word	0x50000400
 800285c:	50000800 	.word	0x50000800
 8002860:	50000c00 	.word	0x50000c00
 8002864:	50001000 	.word	0x50001000

08002868 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	0008      	movs	r0, r1
 8002872:	0011      	movs	r1, r2
 8002874:	1cbb      	adds	r3, r7, #2
 8002876:	1c02      	adds	r2, r0, #0
 8002878:	801a      	strh	r2, [r3, #0]
 800287a:	1c7b      	adds	r3, r7, #1
 800287c:	1c0a      	adds	r2, r1, #0
 800287e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002880:	1c7b      	adds	r3, r7, #1
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d004      	beq.n	8002892 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002888:	1cbb      	adds	r3, r7, #2
 800288a:	881a      	ldrh	r2, [r3, #0]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002890:	e003      	b.n	800289a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002892:	1cbb      	adds	r3, r7, #2
 8002894:	881a      	ldrh	r2, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	629a      	str	r2, [r3, #40]	; 0x28
}
 800289a:	46c0      	nop			; (mov r8, r8)
 800289c:	46bd      	mov	sp, r7
 800289e:	b002      	add	sp, #8
 80028a0:	bd80      	pop	{r7, pc}
	...

080028a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80028ac:	4b19      	ldr	r3, [pc, #100]	; (8002914 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a19      	ldr	r2, [pc, #100]	; (8002918 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80028b2:	4013      	ands	r3, r2
 80028b4:	0019      	movs	r1, r3
 80028b6:	4b17      	ldr	r3, [pc, #92]	; (8002914 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	430a      	orrs	r2, r1
 80028bc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	2380      	movs	r3, #128	; 0x80
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d11f      	bne.n	8002908 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80028c8:	4b14      	ldr	r3, [pc, #80]	; (800291c <HAL_PWREx_ControlVoltageScaling+0x78>)
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	0013      	movs	r3, r2
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	189b      	adds	r3, r3, r2
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	4912      	ldr	r1, [pc, #72]	; (8002920 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80028d6:	0018      	movs	r0, r3
 80028d8:	f7fd fc14 	bl	8000104 <__udivsi3>
 80028dc:	0003      	movs	r3, r0
 80028de:	3301      	adds	r3, #1
 80028e0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80028e2:	e008      	b.n	80028f6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d003      	beq.n	80028f2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	3b01      	subs	r3, #1
 80028ee:	60fb      	str	r3, [r7, #12]
 80028f0:	e001      	b.n	80028f6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e009      	b.n	800290a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80028f6:	4b07      	ldr	r3, [pc, #28]	; (8002914 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80028f8:	695a      	ldr	r2, [r3, #20]
 80028fa:	2380      	movs	r3, #128	; 0x80
 80028fc:	00db      	lsls	r3, r3, #3
 80028fe:	401a      	ands	r2, r3
 8002900:	2380      	movs	r3, #128	; 0x80
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	429a      	cmp	r2, r3
 8002906:	d0ed      	beq.n	80028e4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002908:	2300      	movs	r3, #0
}
 800290a:	0018      	movs	r0, r3
 800290c:	46bd      	mov	sp, r7
 800290e:	b004      	add	sp, #16
 8002910:	bd80      	pop	{r7, pc}
 8002912:	46c0      	nop			; (mov r8, r8)
 8002914:	40007000 	.word	0x40007000
 8002918:	fffff9ff 	.word	0xfffff9ff
 800291c:	20000000 	.word	0x20000000
 8002920:	000f4240 	.word	0x000f4240

08002924 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b088      	sub	sp, #32
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d102      	bne.n	8002938 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	f000 fb56 	bl	8002fe4 <HAL_RCC_OscConfig+0x6c0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2201      	movs	r2, #1
 800293e:	4013      	ands	r3, r2
 8002940:	d100      	bne.n	8002944 <HAL_RCC_OscConfig+0x20>
 8002942:	e07d      	b.n	8002a40 <HAL_RCC_OscConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002944:	4bc3      	ldr	r3, [pc, #780]	; (8002c54 <HAL_RCC_OscConfig+0x330>)
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	2238      	movs	r2, #56	; 0x38
 800294a:	4013      	ands	r3, r2
 800294c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800294e:	4bc1      	ldr	r3, [pc, #772]	; (8002c54 <HAL_RCC_OscConfig+0x330>)
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	2203      	movs	r2, #3
 8002954:	4013      	ands	r3, r2
 8002956:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	2b10      	cmp	r3, #16
 800295c:	d102      	bne.n	8002964 <HAL_RCC_OscConfig+0x40>
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	2b03      	cmp	r3, #3
 8002962:	d002      	beq.n	800296a <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	2b08      	cmp	r3, #8
 8002968:	d10c      	bne.n	8002984 <HAL_RCC_OscConfig+0x60>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800296a:	4bba      	ldr	r3, [pc, #744]	; (8002c54 <HAL_RCC_OscConfig+0x330>)
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	2380      	movs	r3, #128	; 0x80
 8002970:	029b      	lsls	r3, r3, #10
 8002972:	4013      	ands	r3, r2
 8002974:	d063      	beq.n	8002a3e <HAL_RCC_OscConfig+0x11a>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d15f      	bne.n	8002a3e <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	f000 fb30 	bl	8002fe4 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685a      	ldr	r2, [r3, #4]
 8002988:	2380      	movs	r3, #128	; 0x80
 800298a:	025b      	lsls	r3, r3, #9
 800298c:	429a      	cmp	r2, r3
 800298e:	d107      	bne.n	80029a0 <HAL_RCC_OscConfig+0x7c>
 8002990:	4bb0      	ldr	r3, [pc, #704]	; (8002c54 <HAL_RCC_OscConfig+0x330>)
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	4baf      	ldr	r3, [pc, #700]	; (8002c54 <HAL_RCC_OscConfig+0x330>)
 8002996:	2180      	movs	r1, #128	; 0x80
 8002998:	0249      	lsls	r1, r1, #9
 800299a:	430a      	orrs	r2, r1
 800299c:	601a      	str	r2, [r3, #0]
 800299e:	e020      	b.n	80029e2 <HAL_RCC_OscConfig+0xbe>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685a      	ldr	r2, [r3, #4]
 80029a4:	23a0      	movs	r3, #160	; 0xa0
 80029a6:	02db      	lsls	r3, r3, #11
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d10e      	bne.n	80029ca <HAL_RCC_OscConfig+0xa6>
 80029ac:	4ba9      	ldr	r3, [pc, #676]	; (8002c54 <HAL_RCC_OscConfig+0x330>)
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	4ba8      	ldr	r3, [pc, #672]	; (8002c54 <HAL_RCC_OscConfig+0x330>)
 80029b2:	2180      	movs	r1, #128	; 0x80
 80029b4:	02c9      	lsls	r1, r1, #11
 80029b6:	430a      	orrs	r2, r1
 80029b8:	601a      	str	r2, [r3, #0]
 80029ba:	4ba6      	ldr	r3, [pc, #664]	; (8002c54 <HAL_RCC_OscConfig+0x330>)
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	4ba5      	ldr	r3, [pc, #660]	; (8002c54 <HAL_RCC_OscConfig+0x330>)
 80029c0:	2180      	movs	r1, #128	; 0x80
 80029c2:	0249      	lsls	r1, r1, #9
 80029c4:	430a      	orrs	r2, r1
 80029c6:	601a      	str	r2, [r3, #0]
 80029c8:	e00b      	b.n	80029e2 <HAL_RCC_OscConfig+0xbe>
 80029ca:	4ba2      	ldr	r3, [pc, #648]	; (8002c54 <HAL_RCC_OscConfig+0x330>)
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	4ba1      	ldr	r3, [pc, #644]	; (8002c54 <HAL_RCC_OscConfig+0x330>)
 80029d0:	49a1      	ldr	r1, [pc, #644]	; (8002c58 <HAL_RCC_OscConfig+0x334>)
 80029d2:	400a      	ands	r2, r1
 80029d4:	601a      	str	r2, [r3, #0]
 80029d6:	4b9f      	ldr	r3, [pc, #636]	; (8002c54 <HAL_RCC_OscConfig+0x330>)
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	4b9e      	ldr	r3, [pc, #632]	; (8002c54 <HAL_RCC_OscConfig+0x330>)
 80029dc:	499f      	ldr	r1, [pc, #636]	; (8002c5c <HAL_RCC_OscConfig+0x338>)
 80029de:	400a      	ands	r2, r1
 80029e0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d014      	beq.n	8002a14 <HAL_RCC_OscConfig+0xf0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ea:	f7fe fb93 	bl	8001114 <HAL_GetTick>
 80029ee:	0003      	movs	r3, r0
 80029f0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029f2:	e008      	b.n	8002a06 <HAL_RCC_OscConfig+0xe2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029f4:	f7fe fb8e 	bl	8001114 <HAL_GetTick>
 80029f8:	0002      	movs	r2, r0
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b64      	cmp	r3, #100	; 0x64
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_OscConfig+0xe2>
          {
            return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e2ee      	b.n	8002fe4 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a06:	4b93      	ldr	r3, [pc, #588]	; (8002c54 <HAL_RCC_OscConfig+0x330>)
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	2380      	movs	r3, #128	; 0x80
 8002a0c:	029b      	lsls	r3, r3, #10
 8002a0e:	4013      	ands	r3, r2
 8002a10:	d0f0      	beq.n	80029f4 <HAL_RCC_OscConfig+0xd0>
 8002a12:	e015      	b.n	8002a40 <HAL_RCC_OscConfig+0x11c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a14:	f7fe fb7e 	bl	8001114 <HAL_GetTick>
 8002a18:	0003      	movs	r3, r0
 8002a1a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a1c:	e008      	b.n	8002a30 <HAL_RCC_OscConfig+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a1e:	f7fe fb79 	bl	8001114 <HAL_GetTick>
 8002a22:	0002      	movs	r2, r0
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	2b64      	cmp	r3, #100	; 0x64
 8002a2a:	d901      	bls.n	8002a30 <HAL_RCC_OscConfig+0x10c>
          {
            return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e2d9      	b.n	8002fe4 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a30:	4b88      	ldr	r3, [pc, #544]	; (8002c54 <HAL_RCC_OscConfig+0x330>)
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	2380      	movs	r3, #128	; 0x80
 8002a36:	029b      	lsls	r3, r3, #10
 8002a38:	4013      	ands	r3, r2
 8002a3a:	d1f0      	bne.n	8002a1e <HAL_RCC_OscConfig+0xfa>
 8002a3c:	e000      	b.n	8002a40 <HAL_RCC_OscConfig+0x11c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a3e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2202      	movs	r2, #2
 8002a46:	4013      	ands	r3, r2
 8002a48:	d100      	bne.n	8002a4c <HAL_RCC_OscConfig+0x128>
 8002a4a:	e099      	b.n	8002b80 <HAL_RCC_OscConfig+0x25c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a4c:	4b81      	ldr	r3, [pc, #516]	; (8002c54 <HAL_RCC_OscConfig+0x330>)
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	2238      	movs	r2, #56	; 0x38
 8002a52:	4013      	ands	r3, r2
 8002a54:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a56:	4b7f      	ldr	r3, [pc, #508]	; (8002c54 <HAL_RCC_OscConfig+0x330>)
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	2203      	movs	r2, #3
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	2b10      	cmp	r3, #16
 8002a64:	d102      	bne.n	8002a6c <HAL_RCC_OscConfig+0x148>
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d002      	beq.n	8002a72 <HAL_RCC_OscConfig+0x14e>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d135      	bne.n	8002ade <HAL_RCC_OscConfig+0x1ba>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a72:	4b78      	ldr	r3, [pc, #480]	; (8002c54 <HAL_RCC_OscConfig+0x330>)
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	2380      	movs	r3, #128	; 0x80
 8002a78:	00db      	lsls	r3, r3, #3
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	d005      	beq.n	8002a8a <HAL_RCC_OscConfig+0x166>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d101      	bne.n	8002a8a <HAL_RCC_OscConfig+0x166>
      {
        return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e2ac      	b.n	8002fe4 <HAL_RCC_OscConfig+0x6c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a8a:	4b72      	ldr	r3, [pc, #456]	; (8002c54 <HAL_RCC_OscConfig+0x330>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	4a74      	ldr	r2, [pc, #464]	; (8002c60 <HAL_RCC_OscConfig+0x33c>)
 8002a90:	4013      	ands	r3, r2
 8002a92:	0019      	movs	r1, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	695b      	ldr	r3, [r3, #20]
 8002a98:	021a      	lsls	r2, r3, #8
 8002a9a:	4b6e      	ldr	r3, [pc, #440]	; (8002c54 <HAL_RCC_OscConfig+0x330>)
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d112      	bne.n	8002acc <HAL_RCC_OscConfig+0x1a8>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002aa6:	4b6b      	ldr	r3, [pc, #428]	; (8002c54 <HAL_RCC_OscConfig+0x330>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a6e      	ldr	r2, [pc, #440]	; (8002c64 <HAL_RCC_OscConfig+0x340>)
 8002aac:	4013      	ands	r3, r2
 8002aae:	0019      	movs	r1, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	691a      	ldr	r2, [r3, #16]
 8002ab4:	4b67      	ldr	r3, [pc, #412]	; (8002c54 <HAL_RCC_OscConfig+0x330>)
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002aba:	4b66      	ldr	r3, [pc, #408]	; (8002c54 <HAL_RCC_OscConfig+0x330>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	0adb      	lsrs	r3, r3, #11
 8002ac0:	2207      	movs	r2, #7
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	4a68      	ldr	r2, [pc, #416]	; (8002c68 <HAL_RCC_OscConfig+0x344>)
 8002ac6:	40da      	lsrs	r2, r3
 8002ac8:	4b68      	ldr	r3, [pc, #416]	; (8002c6c <HAL_RCC_OscConfig+0x348>)
 8002aca:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002acc:	4b68      	ldr	r3, [pc, #416]	; (8002c70 <HAL_RCC_OscConfig+0x34c>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	0018      	movs	r0, r3
 8002ad2:	f7fe fac3 	bl	800105c <HAL_InitTick>
 8002ad6:	1e03      	subs	r3, r0, #0
 8002ad8:	d051      	beq.n	8002b7e <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e282      	b.n	8002fe4 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d030      	beq.n	8002b48 <HAL_RCC_OscConfig+0x224>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002ae6:	4b5b      	ldr	r3, [pc, #364]	; (8002c54 <HAL_RCC_OscConfig+0x330>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a5e      	ldr	r2, [pc, #376]	; (8002c64 <HAL_RCC_OscConfig+0x340>)
 8002aec:	4013      	ands	r3, r2
 8002aee:	0019      	movs	r1, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	691a      	ldr	r2, [r3, #16]
 8002af4:	4b57      	ldr	r3, [pc, #348]	; (8002c54 <HAL_RCC_OscConfig+0x330>)
 8002af6:	430a      	orrs	r2, r1
 8002af8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002afa:	4b56      	ldr	r3, [pc, #344]	; (8002c54 <HAL_RCC_OscConfig+0x330>)
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	4b55      	ldr	r3, [pc, #340]	; (8002c54 <HAL_RCC_OscConfig+0x330>)
 8002b00:	2180      	movs	r1, #128	; 0x80
 8002b02:	0049      	lsls	r1, r1, #1
 8002b04:	430a      	orrs	r2, r1
 8002b06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b08:	f7fe fb04 	bl	8001114 <HAL_GetTick>
 8002b0c:	0003      	movs	r3, r0
 8002b0e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b10:	e008      	b.n	8002b24 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b12:	f7fe faff 	bl	8001114 <HAL_GetTick>
 8002b16:	0002      	movs	r2, r0
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d901      	bls.n	8002b24 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e25f      	b.n	8002fe4 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b24:	4b4b      	ldr	r3, [pc, #300]	; (8002c54 <HAL_RCC_OscConfig+0x330>)
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	2380      	movs	r3, #128	; 0x80
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	d0f0      	beq.n	8002b12 <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b30:	4b48      	ldr	r3, [pc, #288]	; (8002c54 <HAL_RCC_OscConfig+0x330>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	4a4a      	ldr	r2, [pc, #296]	; (8002c60 <HAL_RCC_OscConfig+0x33c>)
 8002b36:	4013      	ands	r3, r2
 8002b38:	0019      	movs	r1, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	021a      	lsls	r2, r3, #8
 8002b40:	4b44      	ldr	r3, [pc, #272]	; (8002c54 <HAL_RCC_OscConfig+0x330>)
 8002b42:	430a      	orrs	r2, r1
 8002b44:	605a      	str	r2, [r3, #4]
 8002b46:	e01b      	b.n	8002b80 <HAL_RCC_OscConfig+0x25c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002b48:	4b42      	ldr	r3, [pc, #264]	; (8002c54 <HAL_RCC_OscConfig+0x330>)
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	4b41      	ldr	r3, [pc, #260]	; (8002c54 <HAL_RCC_OscConfig+0x330>)
 8002b4e:	4949      	ldr	r1, [pc, #292]	; (8002c74 <HAL_RCC_OscConfig+0x350>)
 8002b50:	400a      	ands	r2, r1
 8002b52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b54:	f7fe fade 	bl	8001114 <HAL_GetTick>
 8002b58:	0003      	movs	r3, r0
 8002b5a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b5c:	e008      	b.n	8002b70 <HAL_RCC_OscConfig+0x24c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b5e:	f7fe fad9 	bl	8001114 <HAL_GetTick>
 8002b62:	0002      	movs	r2, r0
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d901      	bls.n	8002b70 <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e239      	b.n	8002fe4 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b70:	4b38      	ldr	r3, [pc, #224]	; (8002c54 <HAL_RCC_OscConfig+0x330>)
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	2380      	movs	r3, #128	; 0x80
 8002b76:	00db      	lsls	r3, r3, #3
 8002b78:	4013      	ands	r3, r2
 8002b7a:	d1f0      	bne.n	8002b5e <HAL_RCC_OscConfig+0x23a>
 8002b7c:	e000      	b.n	8002b80 <HAL_RCC_OscConfig+0x25c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b7e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2208      	movs	r2, #8
 8002b86:	4013      	ands	r3, r2
 8002b88:	d047      	beq.n	8002c1a <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002b8a:	4b32      	ldr	r3, [pc, #200]	; (8002c54 <HAL_RCC_OscConfig+0x330>)
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	2238      	movs	r2, #56	; 0x38
 8002b90:	4013      	ands	r3, r2
 8002b92:	2b18      	cmp	r3, #24
 8002b94:	d10a      	bne.n	8002bac <HAL_RCC_OscConfig+0x288>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002b96:	4b2f      	ldr	r3, [pc, #188]	; (8002c54 <HAL_RCC_OscConfig+0x330>)
 8002b98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b9a:	2202      	movs	r2, #2
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	d03c      	beq.n	8002c1a <HAL_RCC_OscConfig+0x2f6>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	699b      	ldr	r3, [r3, #24]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d138      	bne.n	8002c1a <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e21b      	b.n	8002fe4 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	699b      	ldr	r3, [r3, #24]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d019      	beq.n	8002be8 <HAL_RCC_OscConfig+0x2c4>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002bb4:	4b27      	ldr	r3, [pc, #156]	; (8002c54 <HAL_RCC_OscConfig+0x330>)
 8002bb6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002bb8:	4b26      	ldr	r3, [pc, #152]	; (8002c54 <HAL_RCC_OscConfig+0x330>)
 8002bba:	2101      	movs	r1, #1
 8002bbc:	430a      	orrs	r2, r1
 8002bbe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc0:	f7fe faa8 	bl	8001114 <HAL_GetTick>
 8002bc4:	0003      	movs	r3, r0
 8002bc6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002bc8:	e008      	b.n	8002bdc <HAL_RCC_OscConfig+0x2b8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bca:	f7fe faa3 	bl	8001114 <HAL_GetTick>
 8002bce:	0002      	movs	r2, r0
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d901      	bls.n	8002bdc <HAL_RCC_OscConfig+0x2b8>
          {
            return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e203      	b.n	8002fe4 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002bdc:	4b1d      	ldr	r3, [pc, #116]	; (8002c54 <HAL_RCC_OscConfig+0x330>)
 8002bde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002be0:	2202      	movs	r2, #2
 8002be2:	4013      	ands	r3, r2
 8002be4:	d0f1      	beq.n	8002bca <HAL_RCC_OscConfig+0x2a6>
 8002be6:	e018      	b.n	8002c1a <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002be8:	4b1a      	ldr	r3, [pc, #104]	; (8002c54 <HAL_RCC_OscConfig+0x330>)
 8002bea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002bec:	4b19      	ldr	r3, [pc, #100]	; (8002c54 <HAL_RCC_OscConfig+0x330>)
 8002bee:	2101      	movs	r1, #1
 8002bf0:	438a      	bics	r2, r1
 8002bf2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf4:	f7fe fa8e 	bl	8001114 <HAL_GetTick>
 8002bf8:	0003      	movs	r3, r0
 8002bfa:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bfc:	e008      	b.n	8002c10 <HAL_RCC_OscConfig+0x2ec>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bfe:	f7fe fa89 	bl	8001114 <HAL_GetTick>
 8002c02:	0002      	movs	r2, r0
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d901      	bls.n	8002c10 <HAL_RCC_OscConfig+0x2ec>
          {
            return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e1e9      	b.n	8002fe4 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c10:	4b10      	ldr	r3, [pc, #64]	; (8002c54 <HAL_RCC_OscConfig+0x330>)
 8002c12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c14:	2202      	movs	r2, #2
 8002c16:	4013      	ands	r3, r2
 8002c18:	d1f1      	bne.n	8002bfe <HAL_RCC_OscConfig+0x2da>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2204      	movs	r2, #4
 8002c20:	4013      	ands	r3, r2
 8002c22:	d100      	bne.n	8002c26 <HAL_RCC_OscConfig+0x302>
 8002c24:	e0c6      	b.n	8002db4 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c26:	231f      	movs	r3, #31
 8002c28:	18fb      	adds	r3, r7, r3
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002c2e:	4b09      	ldr	r3, [pc, #36]	; (8002c54 <HAL_RCC_OscConfig+0x330>)
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	2238      	movs	r2, #56	; 0x38
 8002c34:	4013      	ands	r3, r2
 8002c36:	2b20      	cmp	r3, #32
 8002c38:	d11e      	bne.n	8002c78 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002c3a:	4b06      	ldr	r3, [pc, #24]	; (8002c54 <HAL_RCC_OscConfig+0x330>)
 8002c3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c3e:	2202      	movs	r2, #2
 8002c40:	4013      	ands	r3, r2
 8002c42:	d100      	bne.n	8002c46 <HAL_RCC_OscConfig+0x322>
 8002c44:	e0b6      	b.n	8002db4 <HAL_RCC_OscConfig+0x490>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d000      	beq.n	8002c50 <HAL_RCC_OscConfig+0x32c>
 8002c4e:	e0b1      	b.n	8002db4 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e1c7      	b.n	8002fe4 <HAL_RCC_OscConfig+0x6c0>
 8002c54:	40021000 	.word	0x40021000
 8002c58:	fffeffff 	.word	0xfffeffff
 8002c5c:	fffbffff 	.word	0xfffbffff
 8002c60:	ffff80ff 	.word	0xffff80ff
 8002c64:	ffffc7ff 	.word	0xffffc7ff
 8002c68:	00f42400 	.word	0x00f42400
 8002c6c:	20000000 	.word	0x20000000
 8002c70:	20000004 	.word	0x20000004
 8002c74:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002c78:	4bb8      	ldr	r3, [pc, #736]	; (8002f5c <HAL_RCC_OscConfig+0x638>)
 8002c7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c7c:	2380      	movs	r3, #128	; 0x80
 8002c7e:	055b      	lsls	r3, r3, #21
 8002c80:	4013      	ands	r3, r2
 8002c82:	d101      	bne.n	8002c88 <HAL_RCC_OscConfig+0x364>
 8002c84:	2301      	movs	r3, #1
 8002c86:	e000      	b.n	8002c8a <HAL_RCC_OscConfig+0x366>
 8002c88:	2300      	movs	r3, #0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d011      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002c8e:	4bb3      	ldr	r3, [pc, #716]	; (8002f5c <HAL_RCC_OscConfig+0x638>)
 8002c90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c92:	4bb2      	ldr	r3, [pc, #712]	; (8002f5c <HAL_RCC_OscConfig+0x638>)
 8002c94:	2180      	movs	r1, #128	; 0x80
 8002c96:	0549      	lsls	r1, r1, #21
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	63da      	str	r2, [r3, #60]	; 0x3c
 8002c9c:	4baf      	ldr	r3, [pc, #700]	; (8002f5c <HAL_RCC_OscConfig+0x638>)
 8002c9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ca0:	2380      	movs	r3, #128	; 0x80
 8002ca2:	055b      	lsls	r3, r3, #21
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	60fb      	str	r3, [r7, #12]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002caa:	231f      	movs	r3, #31
 8002cac:	18fb      	adds	r3, r7, r3
 8002cae:	2201      	movs	r2, #1
 8002cb0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cb2:	4bab      	ldr	r3, [pc, #684]	; (8002f60 <HAL_RCC_OscConfig+0x63c>)
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	2380      	movs	r3, #128	; 0x80
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	4013      	ands	r3, r2
 8002cbc:	d11a      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002cbe:	4ba8      	ldr	r3, [pc, #672]	; (8002f60 <HAL_RCC_OscConfig+0x63c>)
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	4ba7      	ldr	r3, [pc, #668]	; (8002f60 <HAL_RCC_OscConfig+0x63c>)
 8002cc4:	2180      	movs	r1, #128	; 0x80
 8002cc6:	0049      	lsls	r1, r1, #1
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002ccc:	f7fe fa22 	bl	8001114 <HAL_GetTick>
 8002cd0:	0003      	movs	r3, r0
 8002cd2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cd4:	e008      	b.n	8002ce8 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cd6:	f7fe fa1d 	bl	8001114 <HAL_GetTick>
 8002cda:	0002      	movs	r2, r0
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d901      	bls.n	8002ce8 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e17d      	b.n	8002fe4 <HAL_RCC_OscConfig+0x6c0>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ce8:	4b9d      	ldr	r3, [pc, #628]	; (8002f60 <HAL_RCC_OscConfig+0x63c>)
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	2380      	movs	r3, #128	; 0x80
 8002cee:	005b      	lsls	r3, r3, #1
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	d0f0      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d106      	bne.n	8002d0a <HAL_RCC_OscConfig+0x3e6>
 8002cfc:	4b97      	ldr	r3, [pc, #604]	; (8002f5c <HAL_RCC_OscConfig+0x638>)
 8002cfe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d00:	4b96      	ldr	r3, [pc, #600]	; (8002f5c <HAL_RCC_OscConfig+0x638>)
 8002d02:	2101      	movs	r1, #1
 8002d04:	430a      	orrs	r2, r1
 8002d06:	65da      	str	r2, [r3, #92]	; 0x5c
 8002d08:	e01c      	b.n	8002d44 <HAL_RCC_OscConfig+0x420>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	2b05      	cmp	r3, #5
 8002d10:	d10c      	bne.n	8002d2c <HAL_RCC_OscConfig+0x408>
 8002d12:	4b92      	ldr	r3, [pc, #584]	; (8002f5c <HAL_RCC_OscConfig+0x638>)
 8002d14:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d16:	4b91      	ldr	r3, [pc, #580]	; (8002f5c <HAL_RCC_OscConfig+0x638>)
 8002d18:	2104      	movs	r1, #4
 8002d1a:	430a      	orrs	r2, r1
 8002d1c:	65da      	str	r2, [r3, #92]	; 0x5c
 8002d1e:	4b8f      	ldr	r3, [pc, #572]	; (8002f5c <HAL_RCC_OscConfig+0x638>)
 8002d20:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d22:	4b8e      	ldr	r3, [pc, #568]	; (8002f5c <HAL_RCC_OscConfig+0x638>)
 8002d24:	2101      	movs	r1, #1
 8002d26:	430a      	orrs	r2, r1
 8002d28:	65da      	str	r2, [r3, #92]	; 0x5c
 8002d2a:	e00b      	b.n	8002d44 <HAL_RCC_OscConfig+0x420>
 8002d2c:	4b8b      	ldr	r3, [pc, #556]	; (8002f5c <HAL_RCC_OscConfig+0x638>)
 8002d2e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d30:	4b8a      	ldr	r3, [pc, #552]	; (8002f5c <HAL_RCC_OscConfig+0x638>)
 8002d32:	2101      	movs	r1, #1
 8002d34:	438a      	bics	r2, r1
 8002d36:	65da      	str	r2, [r3, #92]	; 0x5c
 8002d38:	4b88      	ldr	r3, [pc, #544]	; (8002f5c <HAL_RCC_OscConfig+0x638>)
 8002d3a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d3c:	4b87      	ldr	r3, [pc, #540]	; (8002f5c <HAL_RCC_OscConfig+0x638>)
 8002d3e:	2104      	movs	r1, #4
 8002d40:	438a      	bics	r2, r1
 8002d42:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d014      	beq.n	8002d76 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d4c:	f7fe f9e2 	bl	8001114 <HAL_GetTick>
 8002d50:	0003      	movs	r3, r0
 8002d52:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d54:	e009      	b.n	8002d6a <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d56:	f7fe f9dd 	bl	8001114 <HAL_GetTick>
 8002d5a:	0002      	movs	r2, r0
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	4a80      	ldr	r2, [pc, #512]	; (8002f64 <HAL_RCC_OscConfig+0x640>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e13c      	b.n	8002fe4 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d6a:	4b7c      	ldr	r3, [pc, #496]	; (8002f5c <HAL_RCC_OscConfig+0x638>)
 8002d6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d6e:	2202      	movs	r2, #2
 8002d70:	4013      	ands	r3, r2
 8002d72:	d0f0      	beq.n	8002d56 <HAL_RCC_OscConfig+0x432>
 8002d74:	e013      	b.n	8002d9e <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d76:	f7fe f9cd 	bl	8001114 <HAL_GetTick>
 8002d7a:	0003      	movs	r3, r0
 8002d7c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d7e:	e009      	b.n	8002d94 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d80:	f7fe f9c8 	bl	8001114 <HAL_GetTick>
 8002d84:	0002      	movs	r2, r0
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	4a76      	ldr	r2, [pc, #472]	; (8002f64 <HAL_RCC_OscConfig+0x640>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d901      	bls.n	8002d94 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e127      	b.n	8002fe4 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d94:	4b71      	ldr	r3, [pc, #452]	; (8002f5c <HAL_RCC_OscConfig+0x638>)
 8002d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d98:	2202      	movs	r2, #2
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	d1f0      	bne.n	8002d80 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002d9e:	231f      	movs	r3, #31
 8002da0:	18fb      	adds	r3, r7, r3
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d105      	bne.n	8002db4 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002da8:	4b6c      	ldr	r3, [pc, #432]	; (8002f5c <HAL_RCC_OscConfig+0x638>)
 8002daa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002dac:	4b6b      	ldr	r3, [pc, #428]	; (8002f5c <HAL_RCC_OscConfig+0x638>)
 8002dae:	496e      	ldr	r1, [pc, #440]	; (8002f68 <HAL_RCC_OscConfig+0x644>)
 8002db0:	400a      	ands	r2, r1
 8002db2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2220      	movs	r2, #32
 8002dba:	4013      	ands	r3, r2
 8002dbc:	d039      	beq.n	8002e32 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	69db      	ldr	r3, [r3, #28]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d01b      	beq.n	8002dfe <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002dc6:	4b65      	ldr	r3, [pc, #404]	; (8002f5c <HAL_RCC_OscConfig+0x638>)
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	4b64      	ldr	r3, [pc, #400]	; (8002f5c <HAL_RCC_OscConfig+0x638>)
 8002dcc:	2180      	movs	r1, #128	; 0x80
 8002dce:	03c9      	lsls	r1, r1, #15
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dd4:	f7fe f99e 	bl	8001114 <HAL_GetTick>
 8002dd8:	0003      	movs	r3, r0
 8002dda:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002ddc:	e008      	b.n	8002df0 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002dde:	f7fe f999 	bl	8001114 <HAL_GetTick>
 8002de2:	0002      	movs	r2, r0
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d901      	bls.n	8002df0 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e0f9      	b.n	8002fe4 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002df0:	4b5a      	ldr	r3, [pc, #360]	; (8002f5c <HAL_RCC_OscConfig+0x638>)
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	2380      	movs	r3, #128	; 0x80
 8002df6:	041b      	lsls	r3, r3, #16
 8002df8:	4013      	ands	r3, r2
 8002dfa:	d0f0      	beq.n	8002dde <HAL_RCC_OscConfig+0x4ba>
 8002dfc:	e019      	b.n	8002e32 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002dfe:	4b57      	ldr	r3, [pc, #348]	; (8002f5c <HAL_RCC_OscConfig+0x638>)
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	4b56      	ldr	r3, [pc, #344]	; (8002f5c <HAL_RCC_OscConfig+0x638>)
 8002e04:	4959      	ldr	r1, [pc, #356]	; (8002f6c <HAL_RCC_OscConfig+0x648>)
 8002e06:	400a      	ands	r2, r1
 8002e08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e0a:	f7fe f983 	bl	8001114 <HAL_GetTick>
 8002e0e:	0003      	movs	r3, r0
 8002e10:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002e12:	e008      	b.n	8002e26 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e14:	f7fe f97e 	bl	8001114 <HAL_GetTick>
 8002e18:	0002      	movs	r2, r0
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e0de      	b.n	8002fe4 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002e26:	4b4d      	ldr	r3, [pc, #308]	; (8002f5c <HAL_RCC_OscConfig+0x638>)
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	2380      	movs	r3, #128	; 0x80
 8002e2c:	041b      	lsls	r3, r3, #16
 8002e2e:	4013      	ands	r3, r2
 8002e30:	d1f0      	bne.n	8002e14 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a1b      	ldr	r3, [r3, #32]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d100      	bne.n	8002e3c <HAL_RCC_OscConfig+0x518>
 8002e3a:	e0d2      	b.n	8002fe2 <HAL_RCC_OscConfig+0x6be>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e3c:	4b47      	ldr	r3, [pc, #284]	; (8002f5c <HAL_RCC_OscConfig+0x638>)
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	2238      	movs	r2, #56	; 0x38
 8002e42:	4013      	ands	r3, r2
 8002e44:	2b10      	cmp	r3, #16
 8002e46:	d100      	bne.n	8002e4a <HAL_RCC_OscConfig+0x526>
 8002e48:	e081      	b.n	8002f4e <HAL_RCC_OscConfig+0x62a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a1b      	ldr	r3, [r3, #32]
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d156      	bne.n	8002f00 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e52:	4b42      	ldr	r3, [pc, #264]	; (8002f5c <HAL_RCC_OscConfig+0x638>)
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	4b41      	ldr	r3, [pc, #260]	; (8002f5c <HAL_RCC_OscConfig+0x638>)
 8002e58:	4945      	ldr	r1, [pc, #276]	; (8002f70 <HAL_RCC_OscConfig+0x64c>)
 8002e5a:	400a      	ands	r2, r1
 8002e5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e5e:	f7fe f959 	bl	8001114 <HAL_GetTick>
 8002e62:	0003      	movs	r3, r0
 8002e64:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e66:	e008      	b.n	8002e7a <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e68:	f7fe f954 	bl	8001114 <HAL_GetTick>
 8002e6c:	0002      	movs	r2, r0
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e0b4      	b.n	8002fe4 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e7a:	4b38      	ldr	r3, [pc, #224]	; (8002f5c <HAL_RCC_OscConfig+0x638>)
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	2380      	movs	r3, #128	; 0x80
 8002e80:	049b      	lsls	r3, r3, #18
 8002e82:	4013      	ands	r3, r2
 8002e84:	d1f0      	bne.n	8002e68 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e86:	4b35      	ldr	r3, [pc, #212]	; (8002f5c <HAL_RCC_OscConfig+0x638>)
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	4a3a      	ldr	r2, [pc, #232]	; (8002f74 <HAL_RCC_OscConfig+0x650>)
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	0019      	movs	r1, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e98:	431a      	orrs	r2, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e9e:	021b      	lsls	r3, r3, #8
 8002ea0:	431a      	orrs	r2, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea6:	431a      	orrs	r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eac:	431a      	orrs	r2, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb2:	431a      	orrs	r2, r3
 8002eb4:	4b29      	ldr	r3, [pc, #164]	; (8002f5c <HAL_RCC_OscConfig+0x638>)
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002eba:	4b28      	ldr	r3, [pc, #160]	; (8002f5c <HAL_RCC_OscConfig+0x638>)
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	4b27      	ldr	r3, [pc, #156]	; (8002f5c <HAL_RCC_OscConfig+0x638>)
 8002ec0:	2180      	movs	r1, #128	; 0x80
 8002ec2:	0449      	lsls	r1, r1, #17
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002ec8:	4b24      	ldr	r3, [pc, #144]	; (8002f5c <HAL_RCC_OscConfig+0x638>)
 8002eca:	68da      	ldr	r2, [r3, #12]
 8002ecc:	4b23      	ldr	r3, [pc, #140]	; (8002f5c <HAL_RCC_OscConfig+0x638>)
 8002ece:	2180      	movs	r1, #128	; 0x80
 8002ed0:	0549      	lsls	r1, r1, #21
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed6:	f7fe f91d 	bl	8001114 <HAL_GetTick>
 8002eda:	0003      	movs	r3, r0
 8002edc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ede:	e008      	b.n	8002ef2 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ee0:	f7fe f918 	bl	8001114 <HAL_GetTick>
 8002ee4:	0002      	movs	r2, r0
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e078      	b.n	8002fe4 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ef2:	4b1a      	ldr	r3, [pc, #104]	; (8002f5c <HAL_RCC_OscConfig+0x638>)
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	2380      	movs	r3, #128	; 0x80
 8002ef8:	049b      	lsls	r3, r3, #18
 8002efa:	4013      	ands	r3, r2
 8002efc:	d0f0      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x5bc>
 8002efe:	e070      	b.n	8002fe2 <HAL_RCC_OscConfig+0x6be>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f00:	4b16      	ldr	r3, [pc, #88]	; (8002f5c <HAL_RCC_OscConfig+0x638>)
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	4b15      	ldr	r3, [pc, #84]	; (8002f5c <HAL_RCC_OscConfig+0x638>)
 8002f06:	491a      	ldr	r1, [pc, #104]	; (8002f70 <HAL_RCC_OscConfig+0x64c>)
 8002f08:	400a      	ands	r2, r1
 8002f0a:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8002f0c:	4b13      	ldr	r3, [pc, #76]	; (8002f5c <HAL_RCC_OscConfig+0x638>)
 8002f0e:	68da      	ldr	r2, [r3, #12]
 8002f10:	4b12      	ldr	r3, [pc, #72]	; (8002f5c <HAL_RCC_OscConfig+0x638>)
 8002f12:	2103      	movs	r1, #3
 8002f14:	438a      	bics	r2, r1
 8002f16:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002f18:	4b10      	ldr	r3, [pc, #64]	; (8002f5c <HAL_RCC_OscConfig+0x638>)
 8002f1a:	68da      	ldr	r2, [r3, #12]
 8002f1c:	4b0f      	ldr	r3, [pc, #60]	; (8002f5c <HAL_RCC_OscConfig+0x638>)
 8002f1e:	4916      	ldr	r1, [pc, #88]	; (8002f78 <HAL_RCC_OscConfig+0x654>)
 8002f20:	400a      	ands	r2, r1
 8002f22:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f24:	f7fe f8f6 	bl	8001114 <HAL_GetTick>
 8002f28:	0003      	movs	r3, r0
 8002f2a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f2c:	e008      	b.n	8002f40 <HAL_RCC_OscConfig+0x61c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f2e:	f7fe f8f1 	bl	8001114 <HAL_GetTick>
 8002f32:	0002      	movs	r2, r0
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d901      	bls.n	8002f40 <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e051      	b.n	8002fe4 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f40:	4b06      	ldr	r3, [pc, #24]	; (8002f5c <HAL_RCC_OscConfig+0x638>)
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	2380      	movs	r3, #128	; 0x80
 8002f46:	049b      	lsls	r3, r3, #18
 8002f48:	4013      	ands	r3, r2
 8002f4a:	d1f0      	bne.n	8002f2e <HAL_RCC_OscConfig+0x60a>
 8002f4c:	e049      	b.n	8002fe2 <HAL_RCC_OscConfig+0x6be>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a1b      	ldr	r3, [r3, #32]
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d112      	bne.n	8002f7c <HAL_RCC_OscConfig+0x658>
      {
        return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e044      	b.n	8002fe4 <HAL_RCC_OscConfig+0x6c0>
 8002f5a:	46c0      	nop			; (mov r8, r8)
 8002f5c:	40021000 	.word	0x40021000
 8002f60:	40007000 	.word	0x40007000
 8002f64:	00001388 	.word	0x00001388
 8002f68:	efffffff 	.word	0xefffffff
 8002f6c:	ffbfffff 	.word	0xffbfffff
 8002f70:	feffffff 	.word	0xfeffffff
 8002f74:	11c1808c 	.word	0x11c1808c
 8002f78:	eefeffff 	.word	0xeefeffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002f7c:	4b1b      	ldr	r3, [pc, #108]	; (8002fec <HAL_RCC_OscConfig+0x6c8>)
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	2203      	movs	r2, #3
 8002f86:	401a      	ands	r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d126      	bne.n	8002fde <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	2270      	movs	r2, #112	; 0x70
 8002f94:	401a      	ands	r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d11f      	bne.n	8002fde <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f9e:	697a      	ldr	r2, [r7, #20]
 8002fa0:	23fe      	movs	r3, #254	; 0xfe
 8002fa2:	01db      	lsls	r3, r3, #7
 8002fa4:	401a      	ands	r2, r3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002faa:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d116      	bne.n	8002fde <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002fb0:	697a      	ldr	r2, [r7, #20]
 8002fb2:	23f8      	movs	r3, #248	; 0xf8
 8002fb4:	039b      	lsls	r3, r3, #14
 8002fb6:	401a      	ands	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d10e      	bne.n	8002fde <HAL_RCC_OscConfig+0x6ba>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002fc0:	697a      	ldr	r2, [r7, #20]
 8002fc2:	23e0      	movs	r3, #224	; 0xe0
 8002fc4:	051b      	lsls	r3, r3, #20
 8002fc6:	401a      	ands	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d106      	bne.n	8002fde <HAL_RCC_OscConfig+0x6ba>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	0f5b      	lsrs	r3, r3, #29
 8002fd4:	075a      	lsls	r2, r3, #29
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d001      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x6be>
        {
          return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e000      	b.n	8002fe4 <HAL_RCC_OscConfig+0x6c0>
        }
      }
    }
  }
  return HAL_OK;
 8002fe2:	2300      	movs	r3, #0
}
 8002fe4:	0018      	movs	r0, r3
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	b008      	add	sp, #32
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	40021000 	.word	0x40021000

08002ff0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d101      	bne.n	8003004 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e0e9      	b.n	80031d8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003004:	4b76      	ldr	r3, [pc, #472]	; (80031e0 <HAL_RCC_ClockConfig+0x1f0>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2207      	movs	r2, #7
 800300a:	4013      	ands	r3, r2
 800300c:	683a      	ldr	r2, [r7, #0]
 800300e:	429a      	cmp	r2, r3
 8003010:	d91e      	bls.n	8003050 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003012:	4b73      	ldr	r3, [pc, #460]	; (80031e0 <HAL_RCC_ClockConfig+0x1f0>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2207      	movs	r2, #7
 8003018:	4393      	bics	r3, r2
 800301a:	0019      	movs	r1, r3
 800301c:	4b70      	ldr	r3, [pc, #448]	; (80031e0 <HAL_RCC_ClockConfig+0x1f0>)
 800301e:	683a      	ldr	r2, [r7, #0]
 8003020:	430a      	orrs	r2, r1
 8003022:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003024:	f7fe f876 	bl	8001114 <HAL_GetTick>
 8003028:	0003      	movs	r3, r0
 800302a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800302c:	e009      	b.n	8003042 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800302e:	f7fe f871 	bl	8001114 <HAL_GetTick>
 8003032:	0002      	movs	r2, r0
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	4a6a      	ldr	r2, [pc, #424]	; (80031e4 <HAL_RCC_ClockConfig+0x1f4>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d901      	bls.n	8003042 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e0ca      	b.n	80031d8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003042:	4b67      	ldr	r3, [pc, #412]	; (80031e0 <HAL_RCC_ClockConfig+0x1f0>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2207      	movs	r2, #7
 8003048:	4013      	ands	r3, r2
 800304a:	683a      	ldr	r2, [r7, #0]
 800304c:	429a      	cmp	r2, r3
 800304e:	d1ee      	bne.n	800302e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2202      	movs	r2, #2
 8003056:	4013      	ands	r3, r2
 8003058:	d015      	beq.n	8003086 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2204      	movs	r2, #4
 8003060:	4013      	ands	r3, r2
 8003062:	d006      	beq.n	8003072 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003064:	4b60      	ldr	r3, [pc, #384]	; (80031e8 <HAL_RCC_ClockConfig+0x1f8>)
 8003066:	689a      	ldr	r2, [r3, #8]
 8003068:	4b5f      	ldr	r3, [pc, #380]	; (80031e8 <HAL_RCC_ClockConfig+0x1f8>)
 800306a:	21e0      	movs	r1, #224	; 0xe0
 800306c:	01c9      	lsls	r1, r1, #7
 800306e:	430a      	orrs	r2, r1
 8003070:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003072:	4b5d      	ldr	r3, [pc, #372]	; (80031e8 <HAL_RCC_ClockConfig+0x1f8>)
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	4a5d      	ldr	r2, [pc, #372]	; (80031ec <HAL_RCC_ClockConfig+0x1fc>)
 8003078:	4013      	ands	r3, r2
 800307a:	0019      	movs	r1, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	689a      	ldr	r2, [r3, #8]
 8003080:	4b59      	ldr	r3, [pc, #356]	; (80031e8 <HAL_RCC_ClockConfig+0x1f8>)
 8003082:	430a      	orrs	r2, r1
 8003084:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2201      	movs	r2, #1
 800308c:	4013      	ands	r3, r2
 800308e:	d057      	beq.n	8003140 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	2b01      	cmp	r3, #1
 8003096:	d107      	bne.n	80030a8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003098:	4b53      	ldr	r3, [pc, #332]	; (80031e8 <HAL_RCC_ClockConfig+0x1f8>)
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	2380      	movs	r3, #128	; 0x80
 800309e:	029b      	lsls	r3, r3, #10
 80030a0:	4013      	ands	r3, r2
 80030a2:	d12b      	bne.n	80030fc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e097      	b.n	80031d8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d107      	bne.n	80030c0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030b0:	4b4d      	ldr	r3, [pc, #308]	; (80031e8 <HAL_RCC_ClockConfig+0x1f8>)
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	2380      	movs	r3, #128	; 0x80
 80030b6:	049b      	lsls	r3, r3, #18
 80030b8:	4013      	ands	r3, r2
 80030ba:	d11f      	bne.n	80030fc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e08b      	b.n	80031d8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d107      	bne.n	80030d8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030c8:	4b47      	ldr	r3, [pc, #284]	; (80031e8 <HAL_RCC_ClockConfig+0x1f8>)
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	2380      	movs	r3, #128	; 0x80
 80030ce:	00db      	lsls	r3, r3, #3
 80030d0:	4013      	ands	r3, r2
 80030d2:	d113      	bne.n	80030fc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e07f      	b.n	80031d8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	2b03      	cmp	r3, #3
 80030de:	d106      	bne.n	80030ee <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030e0:	4b41      	ldr	r3, [pc, #260]	; (80031e8 <HAL_RCC_ClockConfig+0x1f8>)
 80030e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030e4:	2202      	movs	r2, #2
 80030e6:	4013      	ands	r3, r2
 80030e8:	d108      	bne.n	80030fc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e074      	b.n	80031d8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030ee:	4b3e      	ldr	r3, [pc, #248]	; (80031e8 <HAL_RCC_ClockConfig+0x1f8>)
 80030f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030f2:	2202      	movs	r2, #2
 80030f4:	4013      	ands	r3, r2
 80030f6:	d101      	bne.n	80030fc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e06d      	b.n	80031d8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80030fc:	4b3a      	ldr	r3, [pc, #232]	; (80031e8 <HAL_RCC_ClockConfig+0x1f8>)
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	2207      	movs	r2, #7
 8003102:	4393      	bics	r3, r2
 8003104:	0019      	movs	r1, r3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685a      	ldr	r2, [r3, #4]
 800310a:	4b37      	ldr	r3, [pc, #220]	; (80031e8 <HAL_RCC_ClockConfig+0x1f8>)
 800310c:	430a      	orrs	r2, r1
 800310e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003110:	f7fe f800 	bl	8001114 <HAL_GetTick>
 8003114:	0003      	movs	r3, r0
 8003116:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003118:	e009      	b.n	800312e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800311a:	f7fd fffb 	bl	8001114 <HAL_GetTick>
 800311e:	0002      	movs	r2, r0
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	4a2f      	ldr	r2, [pc, #188]	; (80031e4 <HAL_RCC_ClockConfig+0x1f4>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d901      	bls.n	800312e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e054      	b.n	80031d8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800312e:	4b2e      	ldr	r3, [pc, #184]	; (80031e8 <HAL_RCC_ClockConfig+0x1f8>)
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	2238      	movs	r2, #56	; 0x38
 8003134:	401a      	ands	r2, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	00db      	lsls	r3, r3, #3
 800313c:	429a      	cmp	r2, r3
 800313e:	d1ec      	bne.n	800311a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003140:	4b27      	ldr	r3, [pc, #156]	; (80031e0 <HAL_RCC_ClockConfig+0x1f0>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2207      	movs	r2, #7
 8003146:	4013      	ands	r3, r2
 8003148:	683a      	ldr	r2, [r7, #0]
 800314a:	429a      	cmp	r2, r3
 800314c:	d21e      	bcs.n	800318c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800314e:	4b24      	ldr	r3, [pc, #144]	; (80031e0 <HAL_RCC_ClockConfig+0x1f0>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2207      	movs	r2, #7
 8003154:	4393      	bics	r3, r2
 8003156:	0019      	movs	r1, r3
 8003158:	4b21      	ldr	r3, [pc, #132]	; (80031e0 <HAL_RCC_ClockConfig+0x1f0>)
 800315a:	683a      	ldr	r2, [r7, #0]
 800315c:	430a      	orrs	r2, r1
 800315e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003160:	f7fd ffd8 	bl	8001114 <HAL_GetTick>
 8003164:	0003      	movs	r3, r0
 8003166:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003168:	e009      	b.n	800317e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800316a:	f7fd ffd3 	bl	8001114 <HAL_GetTick>
 800316e:	0002      	movs	r2, r0
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	4a1b      	ldr	r2, [pc, #108]	; (80031e4 <HAL_RCC_ClockConfig+0x1f4>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d901      	bls.n	800317e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e02c      	b.n	80031d8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800317e:	4b18      	ldr	r3, [pc, #96]	; (80031e0 <HAL_RCC_ClockConfig+0x1f0>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2207      	movs	r2, #7
 8003184:	4013      	ands	r3, r2
 8003186:	683a      	ldr	r2, [r7, #0]
 8003188:	429a      	cmp	r2, r3
 800318a:	d1ee      	bne.n	800316a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2204      	movs	r2, #4
 8003192:	4013      	ands	r3, r2
 8003194:	d009      	beq.n	80031aa <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003196:	4b14      	ldr	r3, [pc, #80]	; (80031e8 <HAL_RCC_ClockConfig+0x1f8>)
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	4a15      	ldr	r2, [pc, #84]	; (80031f0 <HAL_RCC_ClockConfig+0x200>)
 800319c:	4013      	ands	r3, r2
 800319e:	0019      	movs	r1, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	68da      	ldr	r2, [r3, #12]
 80031a4:	4b10      	ldr	r3, [pc, #64]	; (80031e8 <HAL_RCC_ClockConfig+0x1f8>)
 80031a6:	430a      	orrs	r2, r1
 80031a8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80031aa:	f000 f829 	bl	8003200 <HAL_RCC_GetSysClockFreq>
 80031ae:	0001      	movs	r1, r0
 80031b0:	4b0d      	ldr	r3, [pc, #52]	; (80031e8 <HAL_RCC_ClockConfig+0x1f8>)
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	0a1b      	lsrs	r3, r3, #8
 80031b6:	220f      	movs	r2, #15
 80031b8:	401a      	ands	r2, r3
 80031ba:	4b0e      	ldr	r3, [pc, #56]	; (80031f4 <HAL_RCC_ClockConfig+0x204>)
 80031bc:	0092      	lsls	r2, r2, #2
 80031be:	58d3      	ldr	r3, [r2, r3]
 80031c0:	221f      	movs	r2, #31
 80031c2:	4013      	ands	r3, r2
 80031c4:	000a      	movs	r2, r1
 80031c6:	40da      	lsrs	r2, r3
 80031c8:	4b0b      	ldr	r3, [pc, #44]	; (80031f8 <HAL_RCC_ClockConfig+0x208>)
 80031ca:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80031cc:	4b0b      	ldr	r3, [pc, #44]	; (80031fc <HAL_RCC_ClockConfig+0x20c>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	0018      	movs	r0, r3
 80031d2:	f7fd ff43 	bl	800105c <HAL_InitTick>
 80031d6:	0003      	movs	r3, r0
}
 80031d8:	0018      	movs	r0, r3
 80031da:	46bd      	mov	sp, r7
 80031dc:	b004      	add	sp, #16
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	40022000 	.word	0x40022000
 80031e4:	00001388 	.word	0x00001388
 80031e8:	40021000 	.word	0x40021000
 80031ec:	fffff0ff 	.word	0xfffff0ff
 80031f0:	ffff8fff 	.word	0xffff8fff
 80031f4:	0800382c 	.word	0x0800382c
 80031f8:	20000000 	.word	0x20000000
 80031fc:	20000004 	.word	0x20000004

08003200 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b086      	sub	sp, #24
 8003204:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003206:	4b3c      	ldr	r3, [pc, #240]	; (80032f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	2238      	movs	r2, #56	; 0x38
 800320c:	4013      	ands	r3, r2
 800320e:	d10f      	bne.n	8003230 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003210:	4b39      	ldr	r3, [pc, #228]	; (80032f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	0adb      	lsrs	r3, r3, #11
 8003216:	2207      	movs	r2, #7
 8003218:	4013      	ands	r3, r2
 800321a:	2201      	movs	r2, #1
 800321c:	409a      	lsls	r2, r3
 800321e:	0013      	movs	r3, r2
 8003220:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003222:	6839      	ldr	r1, [r7, #0]
 8003224:	4835      	ldr	r0, [pc, #212]	; (80032fc <HAL_RCC_GetSysClockFreq+0xfc>)
 8003226:	f7fc ff6d 	bl	8000104 <__udivsi3>
 800322a:	0003      	movs	r3, r0
 800322c:	613b      	str	r3, [r7, #16]
 800322e:	e05d      	b.n	80032ec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003230:	4b31      	ldr	r3, [pc, #196]	; (80032f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	2238      	movs	r2, #56	; 0x38
 8003236:	4013      	ands	r3, r2
 8003238:	2b08      	cmp	r3, #8
 800323a:	d102      	bne.n	8003242 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800323c:	4b30      	ldr	r3, [pc, #192]	; (8003300 <HAL_RCC_GetSysClockFreq+0x100>)
 800323e:	613b      	str	r3, [r7, #16]
 8003240:	e054      	b.n	80032ec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003242:	4b2d      	ldr	r3, [pc, #180]	; (80032f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	2238      	movs	r2, #56	; 0x38
 8003248:	4013      	ands	r3, r2
 800324a:	2b10      	cmp	r3, #16
 800324c:	d138      	bne.n	80032c0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800324e:	4b2a      	ldr	r3, [pc, #168]	; (80032f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	2203      	movs	r2, #3
 8003254:	4013      	ands	r3, r2
 8003256:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003258:	4b27      	ldr	r3, [pc, #156]	; (80032f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	091b      	lsrs	r3, r3, #4
 800325e:	2207      	movs	r2, #7
 8003260:	4013      	ands	r3, r2
 8003262:	3301      	adds	r3, #1
 8003264:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2b03      	cmp	r3, #3
 800326a:	d10d      	bne.n	8003288 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800326c:	68b9      	ldr	r1, [r7, #8]
 800326e:	4824      	ldr	r0, [pc, #144]	; (8003300 <HAL_RCC_GetSysClockFreq+0x100>)
 8003270:	f7fc ff48 	bl	8000104 <__udivsi3>
 8003274:	0003      	movs	r3, r0
 8003276:	0019      	movs	r1, r3
 8003278:	4b1f      	ldr	r3, [pc, #124]	; (80032f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	0a1b      	lsrs	r3, r3, #8
 800327e:	227f      	movs	r2, #127	; 0x7f
 8003280:	4013      	ands	r3, r2
 8003282:	434b      	muls	r3, r1
 8003284:	617b      	str	r3, [r7, #20]
        break;
 8003286:	e00d      	b.n	80032a4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003288:	68b9      	ldr	r1, [r7, #8]
 800328a:	481c      	ldr	r0, [pc, #112]	; (80032fc <HAL_RCC_GetSysClockFreq+0xfc>)
 800328c:	f7fc ff3a 	bl	8000104 <__udivsi3>
 8003290:	0003      	movs	r3, r0
 8003292:	0019      	movs	r1, r3
 8003294:	4b18      	ldr	r3, [pc, #96]	; (80032f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	0a1b      	lsrs	r3, r3, #8
 800329a:	227f      	movs	r2, #127	; 0x7f
 800329c:	4013      	ands	r3, r2
 800329e:	434b      	muls	r3, r1
 80032a0:	617b      	str	r3, [r7, #20]
        break;
 80032a2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80032a4:	4b14      	ldr	r3, [pc, #80]	; (80032f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	0f5b      	lsrs	r3, r3, #29
 80032aa:	2207      	movs	r2, #7
 80032ac:	4013      	ands	r3, r2
 80032ae:	3301      	adds	r3, #1
 80032b0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80032b2:	6879      	ldr	r1, [r7, #4]
 80032b4:	6978      	ldr	r0, [r7, #20]
 80032b6:	f7fc ff25 	bl	8000104 <__udivsi3>
 80032ba:	0003      	movs	r3, r0
 80032bc:	613b      	str	r3, [r7, #16]
 80032be:	e015      	b.n	80032ec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80032c0:	4b0d      	ldr	r3, [pc, #52]	; (80032f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	2238      	movs	r2, #56	; 0x38
 80032c6:	4013      	ands	r3, r2
 80032c8:	2b20      	cmp	r3, #32
 80032ca:	d103      	bne.n	80032d4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80032cc:	2380      	movs	r3, #128	; 0x80
 80032ce:	021b      	lsls	r3, r3, #8
 80032d0:	613b      	str	r3, [r7, #16]
 80032d2:	e00b      	b.n	80032ec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80032d4:	4b08      	ldr	r3, [pc, #32]	; (80032f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	2238      	movs	r2, #56	; 0x38
 80032da:	4013      	ands	r3, r2
 80032dc:	2b18      	cmp	r3, #24
 80032de:	d103      	bne.n	80032e8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80032e0:	23fa      	movs	r3, #250	; 0xfa
 80032e2:	01db      	lsls	r3, r3, #7
 80032e4:	613b      	str	r3, [r7, #16]
 80032e6:	e001      	b.n	80032ec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80032e8:	2300      	movs	r3, #0
 80032ea:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80032ec:	693b      	ldr	r3, [r7, #16]
}
 80032ee:	0018      	movs	r0, r3
 80032f0:	46bd      	mov	sp, r7
 80032f2:	b006      	add	sp, #24
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	46c0      	nop			; (mov r8, r8)
 80032f8:	40021000 	.word	0x40021000
 80032fc:	00f42400 	.word	0x00f42400
 8003300:	007a1200 	.word	0x007a1200

08003304 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800330c:	2313      	movs	r3, #19
 800330e:	18fb      	adds	r3, r7, r3
 8003310:	2200      	movs	r2, #0
 8003312:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003314:	2312      	movs	r3, #18
 8003316:	18fb      	adds	r3, r7, r3
 8003318:	2200      	movs	r2, #0
 800331a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	2380      	movs	r3, #128	; 0x80
 8003322:	029b      	lsls	r3, r3, #10
 8003324:	4013      	ands	r3, r2
 8003326:	d100      	bne.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003328:	e0ad      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 800332a:	2011      	movs	r0, #17
 800332c:	183b      	adds	r3, r7, r0
 800332e:	2200      	movs	r2, #0
 8003330:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003332:	4b47      	ldr	r3, [pc, #284]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003334:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003336:	2380      	movs	r3, #128	; 0x80
 8003338:	055b      	lsls	r3, r3, #21
 800333a:	4013      	ands	r3, r2
 800333c:	d110      	bne.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800333e:	4b44      	ldr	r3, [pc, #272]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003340:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003342:	4b43      	ldr	r3, [pc, #268]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003344:	2180      	movs	r1, #128	; 0x80
 8003346:	0549      	lsls	r1, r1, #21
 8003348:	430a      	orrs	r2, r1
 800334a:	63da      	str	r2, [r3, #60]	; 0x3c
 800334c:	4b40      	ldr	r3, [pc, #256]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800334e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003350:	2380      	movs	r3, #128	; 0x80
 8003352:	055b      	lsls	r3, r3, #21
 8003354:	4013      	ands	r3, r2
 8003356:	60bb      	str	r3, [r7, #8]
 8003358:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800335a:	183b      	adds	r3, r7, r0
 800335c:	2201      	movs	r2, #1
 800335e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003360:	4b3c      	ldr	r3, [pc, #240]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	4b3b      	ldr	r3, [pc, #236]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003366:	2180      	movs	r1, #128	; 0x80
 8003368:	0049      	lsls	r1, r1, #1
 800336a:	430a      	orrs	r2, r1
 800336c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800336e:	f7fd fed1 	bl	8001114 <HAL_GetTick>
 8003372:	0003      	movs	r3, r0
 8003374:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003376:	e00b      	b.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003378:	f7fd fecc 	bl	8001114 <HAL_GetTick>
 800337c:	0002      	movs	r2, r0
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b02      	cmp	r3, #2
 8003384:	d904      	bls.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003386:	2313      	movs	r3, #19
 8003388:	18fb      	adds	r3, r7, r3
 800338a:	2203      	movs	r2, #3
 800338c:	701a      	strb	r2, [r3, #0]
        break;
 800338e:	e005      	b.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003390:	4b30      	ldr	r3, [pc, #192]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	2380      	movs	r3, #128	; 0x80
 8003396:	005b      	lsls	r3, r3, #1
 8003398:	4013      	ands	r3, r2
 800339a:	d0ed      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800339c:	2313      	movs	r3, #19
 800339e:	18fb      	adds	r3, r7, r3
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d15e      	bne.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80033a6:	4b2a      	ldr	r3, [pc, #168]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80033a8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80033aa:	23c0      	movs	r3, #192	; 0xc0
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	4013      	ands	r3, r2
 80033b0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d019      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033bc:	697a      	ldr	r2, [r7, #20]
 80033be:	429a      	cmp	r2, r3
 80033c0:	d014      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80033c2:	4b23      	ldr	r3, [pc, #140]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80033c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c6:	4a24      	ldr	r2, [pc, #144]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80033c8:	4013      	ands	r3, r2
 80033ca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033cc:	4b20      	ldr	r3, [pc, #128]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80033ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80033d0:	4b1f      	ldr	r3, [pc, #124]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80033d2:	2180      	movs	r1, #128	; 0x80
 80033d4:	0249      	lsls	r1, r1, #9
 80033d6:	430a      	orrs	r2, r1
 80033d8:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033da:	4b1d      	ldr	r3, [pc, #116]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80033dc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80033de:	4b1c      	ldr	r3, [pc, #112]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80033e0:	491e      	ldr	r1, [pc, #120]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x158>)
 80033e2:	400a      	ands	r2, r1
 80033e4:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80033e6:	4b1a      	ldr	r3, [pc, #104]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80033e8:	697a      	ldr	r2, [r7, #20]
 80033ea:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	2201      	movs	r2, #1
 80033f0:	4013      	ands	r3, r2
 80033f2:	d016      	beq.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f4:	f7fd fe8e 	bl	8001114 <HAL_GetTick>
 80033f8:	0003      	movs	r3, r0
 80033fa:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033fc:	e00c      	b.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033fe:	f7fd fe89 	bl	8001114 <HAL_GetTick>
 8003402:	0002      	movs	r2, r0
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	4a15      	ldr	r2, [pc, #84]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d904      	bls.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800340e:	2313      	movs	r3, #19
 8003410:	18fb      	adds	r3, r7, r3
 8003412:	2203      	movs	r2, #3
 8003414:	701a      	strb	r2, [r3, #0]
            break;
 8003416:	e004      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003418:	4b0d      	ldr	r3, [pc, #52]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800341a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800341c:	2202      	movs	r2, #2
 800341e:	4013      	ands	r3, r2
 8003420:	d0ed      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003422:	2313      	movs	r3, #19
 8003424:	18fb      	adds	r3, r7, r3
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d10a      	bne.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800342c:	4b08      	ldr	r3, [pc, #32]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800342e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003430:	4a09      	ldr	r2, [pc, #36]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8003432:	4013      	ands	r3, r2
 8003434:	0019      	movs	r1, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800343a:	4b05      	ldr	r3, [pc, #20]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800343c:	430a      	orrs	r2, r1
 800343e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003440:	e016      	b.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003442:	2312      	movs	r3, #18
 8003444:	18fb      	adds	r3, r7, r3
 8003446:	2213      	movs	r2, #19
 8003448:	18ba      	adds	r2, r7, r2
 800344a:	7812      	ldrb	r2, [r2, #0]
 800344c:	701a      	strb	r2, [r3, #0]
 800344e:	e00f      	b.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003450:	40021000 	.word	0x40021000
 8003454:	40007000 	.word	0x40007000
 8003458:	fffffcff 	.word	0xfffffcff
 800345c:	fffeffff 	.word	0xfffeffff
 8003460:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003464:	2312      	movs	r3, #18
 8003466:	18fb      	adds	r3, r7, r3
 8003468:	2213      	movs	r2, #19
 800346a:	18ba      	adds	r2, r7, r2
 800346c:	7812      	ldrb	r2, [r2, #0]
 800346e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003470:	2311      	movs	r3, #17
 8003472:	18fb      	adds	r3, r7, r3
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	2b01      	cmp	r3, #1
 8003478:	d105      	bne.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800347a:	4bb6      	ldr	r3, [pc, #728]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800347c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800347e:	4bb5      	ldr	r3, [pc, #724]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003480:	49b5      	ldr	r1, [pc, #724]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8003482:	400a      	ands	r2, r1
 8003484:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	2201      	movs	r2, #1
 800348c:	4013      	ands	r3, r2
 800348e:	d009      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003490:	4bb0      	ldr	r3, [pc, #704]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003494:	2203      	movs	r2, #3
 8003496:	4393      	bics	r3, r2
 8003498:	0019      	movs	r1, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685a      	ldr	r2, [r3, #4]
 800349e:	4bad      	ldr	r3, [pc, #692]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80034a0:	430a      	orrs	r2, r1
 80034a2:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2202      	movs	r2, #2
 80034aa:	4013      	ands	r3, r2
 80034ac:	d009      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034ae:	4ba9      	ldr	r3, [pc, #676]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80034b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034b2:	220c      	movs	r2, #12
 80034b4:	4393      	bics	r3, r2
 80034b6:	0019      	movs	r1, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689a      	ldr	r2, [r3, #8]
 80034bc:	4ba5      	ldr	r3, [pc, #660]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80034be:	430a      	orrs	r2, r1
 80034c0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2204      	movs	r2, #4
 80034c8:	4013      	ands	r3, r2
 80034ca:	d009      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80034cc:	4ba1      	ldr	r3, [pc, #644]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80034ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034d0:	2230      	movs	r2, #48	; 0x30
 80034d2:	4393      	bics	r3, r2
 80034d4:	0019      	movs	r1, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	68da      	ldr	r2, [r3, #12]
 80034da:	4b9e      	ldr	r3, [pc, #632]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80034dc:	430a      	orrs	r2, r1
 80034de:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2210      	movs	r2, #16
 80034e6:	4013      	ands	r3, r2
 80034e8:	d009      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80034ea:	4b9a      	ldr	r3, [pc, #616]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80034ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ee:	4a9b      	ldr	r2, [pc, #620]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80034f0:	4013      	ands	r3, r2
 80034f2:	0019      	movs	r1, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	691a      	ldr	r2, [r3, #16]
 80034f8:	4b96      	ldr	r3, [pc, #600]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80034fa:	430a      	orrs	r2, r1
 80034fc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	2380      	movs	r3, #128	; 0x80
 8003504:	015b      	lsls	r3, r3, #5
 8003506:	4013      	ands	r3, r2
 8003508:	d009      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 800350a:	4b92      	ldr	r3, [pc, #584]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800350c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800350e:	4a94      	ldr	r2, [pc, #592]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003510:	4013      	ands	r3, r2
 8003512:	0019      	movs	r1, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	695a      	ldr	r2, [r3, #20]
 8003518:	4b8e      	ldr	r3, [pc, #568]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800351a:	430a      	orrs	r2, r1
 800351c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	2380      	movs	r3, #128	; 0x80
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	4013      	ands	r3, r2
 8003528:	d009      	beq.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800352a:	4b8a      	ldr	r3, [pc, #552]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800352c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800352e:	4a8d      	ldr	r2, [pc, #564]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8003530:	4013      	ands	r3, r2
 8003532:	0019      	movs	r1, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003538:	4b86      	ldr	r3, [pc, #536]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800353a:	430a      	orrs	r2, r1
 800353c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	2380      	movs	r3, #128	; 0x80
 8003544:	00db      	lsls	r3, r3, #3
 8003546:	4013      	ands	r3, r2
 8003548:	d009      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800354a:	4b82      	ldr	r3, [pc, #520]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800354c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800354e:	4a86      	ldr	r2, [pc, #536]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8003550:	4013      	ands	r3, r2
 8003552:	0019      	movs	r1, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003558:	4b7e      	ldr	r3, [pc, #504]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800355a:	430a      	orrs	r2, r1
 800355c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2220      	movs	r2, #32
 8003564:	4013      	ands	r3, r2
 8003566:	d009      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003568:	4b7a      	ldr	r3, [pc, #488]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800356a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800356c:	4a7f      	ldr	r2, [pc, #508]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800356e:	4013      	ands	r3, r2
 8003570:	0019      	movs	r1, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	699a      	ldr	r2, [r3, #24]
 8003576:	4b77      	ldr	r3, [pc, #476]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003578:	430a      	orrs	r2, r1
 800357a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2240      	movs	r2, #64	; 0x40
 8003582:	4013      	ands	r3, r2
 8003584:	d009      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003586:	4b73      	ldr	r3, [pc, #460]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800358a:	4a79      	ldr	r2, [pc, #484]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800358c:	4013      	ands	r3, r2
 800358e:	0019      	movs	r1, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	69da      	ldr	r2, [r3, #28]
 8003594:	4b6f      	ldr	r3, [pc, #444]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003596:	430a      	orrs	r2, r1
 8003598:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	2380      	movs	r3, #128	; 0x80
 80035a0:	01db      	lsls	r3, r3, #7
 80035a2:	4013      	ands	r3, r2
 80035a4:	d015      	beq.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035a6:	4b6b      	ldr	r3, [pc, #428]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80035a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	0899      	lsrs	r1, r3, #2
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035b2:	4b68      	ldr	r3, [pc, #416]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80035b4:	430a      	orrs	r2, r1
 80035b6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035bc:	2380      	movs	r3, #128	; 0x80
 80035be:	05db      	lsls	r3, r3, #23
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d106      	bne.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80035c4:	4b63      	ldr	r3, [pc, #396]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80035c6:	68da      	ldr	r2, [r3, #12]
 80035c8:	4b62      	ldr	r3, [pc, #392]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80035ca:	2180      	movs	r1, #128	; 0x80
 80035cc:	0249      	lsls	r1, r1, #9
 80035ce:	430a      	orrs	r2, r1
 80035d0:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	2380      	movs	r3, #128	; 0x80
 80035d8:	031b      	lsls	r3, r3, #12
 80035da:	4013      	ands	r3, r2
 80035dc:	d009      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80035de:	4b5d      	ldr	r3, [pc, #372]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80035e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035e2:	2240      	movs	r2, #64	; 0x40
 80035e4:	4393      	bics	r3, r2
 80035e6:	0019      	movs	r1, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035ec:	4b59      	ldr	r3, [pc, #356]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80035ee:	430a      	orrs	r2, r1
 80035f0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	2380      	movs	r3, #128	; 0x80
 80035f8:	039b      	lsls	r3, r3, #14
 80035fa:	4013      	ands	r3, r2
 80035fc:	d016      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80035fe:	4b55      	ldr	r3, [pc, #340]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003602:	4a5c      	ldr	r2, [pc, #368]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8003604:	4013      	ands	r3, r2
 8003606:	0019      	movs	r1, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800360c:	4b51      	ldr	r3, [pc, #324]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800360e:	430a      	orrs	r2, r1
 8003610:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003616:	2380      	movs	r3, #128	; 0x80
 8003618:	03db      	lsls	r3, r3, #15
 800361a:	429a      	cmp	r2, r3
 800361c:	d106      	bne.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800361e:	4b4d      	ldr	r3, [pc, #308]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003620:	68da      	ldr	r2, [r3, #12]
 8003622:	4b4c      	ldr	r3, [pc, #304]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003624:	2180      	movs	r1, #128	; 0x80
 8003626:	0449      	lsls	r1, r1, #17
 8003628:	430a      	orrs	r2, r1
 800362a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	2380      	movs	r3, #128	; 0x80
 8003632:	03db      	lsls	r3, r3, #15
 8003634:	4013      	ands	r3, r2
 8003636:	d016      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003638:	4b46      	ldr	r3, [pc, #280]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800363a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800363c:	4a4e      	ldr	r2, [pc, #312]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800363e:	4013      	ands	r3, r2
 8003640:	0019      	movs	r1, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003646:	4b43      	ldr	r3, [pc, #268]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003648:	430a      	orrs	r2, r1
 800364a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003650:	2380      	movs	r3, #128	; 0x80
 8003652:	045b      	lsls	r3, r3, #17
 8003654:	429a      	cmp	r2, r3
 8003656:	d106      	bne.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003658:	4b3e      	ldr	r3, [pc, #248]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800365a:	68da      	ldr	r2, [r3, #12]
 800365c:	4b3d      	ldr	r3, [pc, #244]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800365e:	2180      	movs	r1, #128	; 0x80
 8003660:	0449      	lsls	r1, r1, #17
 8003662:	430a      	orrs	r2, r1
 8003664:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	2380      	movs	r3, #128	; 0x80
 800366c:	011b      	lsls	r3, r3, #4
 800366e:	4013      	ands	r3, r2
 8003670:	d014      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003672:	4b38      	ldr	r3, [pc, #224]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003676:	2203      	movs	r2, #3
 8003678:	4393      	bics	r3, r2
 800367a:	0019      	movs	r1, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a1a      	ldr	r2, [r3, #32]
 8003680:	4b34      	ldr	r3, [pc, #208]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003682:	430a      	orrs	r2, r1
 8003684:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a1b      	ldr	r3, [r3, #32]
 800368a:	2b01      	cmp	r3, #1
 800368c:	d106      	bne.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800368e:	4b31      	ldr	r3, [pc, #196]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003690:	68da      	ldr	r2, [r3, #12]
 8003692:	4b30      	ldr	r3, [pc, #192]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003694:	2180      	movs	r1, #128	; 0x80
 8003696:	0249      	lsls	r1, r1, #9
 8003698:	430a      	orrs	r2, r1
 800369a:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	2380      	movs	r3, #128	; 0x80
 80036a2:	019b      	lsls	r3, r3, #6
 80036a4:	4013      	ands	r3, r2
 80036a6:	d014      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80036a8:	4b2a      	ldr	r3, [pc, #168]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80036aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ac:	220c      	movs	r2, #12
 80036ae:	4393      	bics	r3, r2
 80036b0:	0019      	movs	r1, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036b6:	4b27      	ldr	r3, [pc, #156]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80036b8:	430a      	orrs	r2, r1
 80036ba:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c0:	2b04      	cmp	r3, #4
 80036c2:	d106      	bne.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80036c4:	4b23      	ldr	r3, [pc, #140]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80036c6:	68da      	ldr	r2, [r3, #12]
 80036c8:	4b22      	ldr	r3, [pc, #136]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80036ca:	2180      	movs	r1, #128	; 0x80
 80036cc:	0249      	lsls	r1, r1, #9
 80036ce:	430a      	orrs	r2, r1
 80036d0:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	2380      	movs	r3, #128	; 0x80
 80036d8:	045b      	lsls	r3, r3, #17
 80036da:	4013      	ands	r3, r2
 80036dc:	d016      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036de:	4b1d      	ldr	r3, [pc, #116]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80036e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e2:	4a22      	ldr	r2, [pc, #136]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80036e4:	4013      	ands	r3, r2
 80036e6:	0019      	movs	r1, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036ec:	4b19      	ldr	r3, [pc, #100]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80036ee:	430a      	orrs	r2, r1
 80036f0:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036f6:	2380      	movs	r3, #128	; 0x80
 80036f8:	019b      	lsls	r3, r3, #6
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d106      	bne.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80036fe:	4b15      	ldr	r3, [pc, #84]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003700:	68da      	ldr	r2, [r3, #12]
 8003702:	4b14      	ldr	r3, [pc, #80]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003704:	2180      	movs	r1, #128	; 0x80
 8003706:	0449      	lsls	r1, r1, #17
 8003708:	430a      	orrs	r2, r1
 800370a:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	2380      	movs	r3, #128	; 0x80
 8003712:	049b      	lsls	r3, r3, #18
 8003714:	4013      	ands	r3, r2
 8003716:	d016      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003718:	4b0e      	ldr	r3, [pc, #56]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800371a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800371c:	4a10      	ldr	r2, [pc, #64]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800371e:	4013      	ands	r3, r2
 8003720:	0019      	movs	r1, r3
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003726:	4b0b      	ldr	r3, [pc, #44]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003728:	430a      	orrs	r2, r1
 800372a:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003730:	2380      	movs	r3, #128	; 0x80
 8003732:	005b      	lsls	r3, r3, #1
 8003734:	429a      	cmp	r2, r3
 8003736:	d106      	bne.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003738:	4b06      	ldr	r3, [pc, #24]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800373a:	68da      	ldr	r2, [r3, #12]
 800373c:	4b05      	ldr	r3, [pc, #20]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800373e:	2180      	movs	r1, #128	; 0x80
 8003740:	0449      	lsls	r1, r1, #17
 8003742:	430a      	orrs	r2, r1
 8003744:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003746:	2312      	movs	r3, #18
 8003748:	18fb      	adds	r3, r7, r3
 800374a:	781b      	ldrb	r3, [r3, #0]
}
 800374c:	0018      	movs	r0, r3
 800374e:	46bd      	mov	sp, r7
 8003750:	b006      	add	sp, #24
 8003752:	bd80      	pop	{r7, pc}
 8003754:	40021000 	.word	0x40021000
 8003758:	efffffff 	.word	0xefffffff
 800375c:	fffff3ff 	.word	0xfffff3ff
 8003760:	fffffcff 	.word	0xfffffcff
 8003764:	fff3ffff 	.word	0xfff3ffff
 8003768:	ffcfffff 	.word	0xffcfffff
 800376c:	ffffcfff 	.word	0xffffcfff
 8003770:	ffff3fff 	.word	0xffff3fff
 8003774:	ffbfffff 	.word	0xffbfffff
 8003778:	feffffff 	.word	0xfeffffff

0800377c <__libc_init_array>:
 800377c:	b570      	push	{r4, r5, r6, lr}
 800377e:	2600      	movs	r6, #0
 8003780:	4d0c      	ldr	r5, [pc, #48]	; (80037b4 <__libc_init_array+0x38>)
 8003782:	4c0d      	ldr	r4, [pc, #52]	; (80037b8 <__libc_init_array+0x3c>)
 8003784:	1b64      	subs	r4, r4, r5
 8003786:	10a4      	asrs	r4, r4, #2
 8003788:	42a6      	cmp	r6, r4
 800378a:	d109      	bne.n	80037a0 <__libc_init_array+0x24>
 800378c:	2600      	movs	r6, #0
 800378e:	f000 f821 	bl	80037d4 <_init>
 8003792:	4d0a      	ldr	r5, [pc, #40]	; (80037bc <__libc_init_array+0x40>)
 8003794:	4c0a      	ldr	r4, [pc, #40]	; (80037c0 <__libc_init_array+0x44>)
 8003796:	1b64      	subs	r4, r4, r5
 8003798:	10a4      	asrs	r4, r4, #2
 800379a:	42a6      	cmp	r6, r4
 800379c:	d105      	bne.n	80037aa <__libc_init_array+0x2e>
 800379e:	bd70      	pop	{r4, r5, r6, pc}
 80037a0:	00b3      	lsls	r3, r6, #2
 80037a2:	58eb      	ldr	r3, [r5, r3]
 80037a4:	4798      	blx	r3
 80037a6:	3601      	adds	r6, #1
 80037a8:	e7ee      	b.n	8003788 <__libc_init_array+0xc>
 80037aa:	00b3      	lsls	r3, r6, #2
 80037ac:	58eb      	ldr	r3, [r5, r3]
 80037ae:	4798      	blx	r3
 80037b0:	3601      	adds	r6, #1
 80037b2:	e7f2      	b.n	800379a <__libc_init_array+0x1e>
 80037b4:	0800386c 	.word	0x0800386c
 80037b8:	0800386c 	.word	0x0800386c
 80037bc:	0800386c 	.word	0x0800386c
 80037c0:	08003870 	.word	0x08003870

080037c4 <memset>:
 80037c4:	0003      	movs	r3, r0
 80037c6:	1882      	adds	r2, r0, r2
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d100      	bne.n	80037ce <memset+0xa>
 80037cc:	4770      	bx	lr
 80037ce:	7019      	strb	r1, [r3, #0]
 80037d0:	3301      	adds	r3, #1
 80037d2:	e7f9      	b.n	80037c8 <memset+0x4>

080037d4 <_init>:
 80037d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037d6:	46c0      	nop			; (mov r8, r8)
 80037d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037da:	bc08      	pop	{r3}
 80037dc:	469e      	mov	lr, r3
 80037de:	4770      	bx	lr

080037e0 <_fini>:
 80037e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037e2:	46c0      	nop			; (mov r8, r8)
 80037e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037e6:	bc08      	pop	{r3}
 80037e8:	469e      	mov	lr, r3
 80037ea:	4770      	bx	lr
