
exercicio_07.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e1c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002ed8  08002ed8  00012ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f18  08002f18  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002f18  08002f18  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f18  08002f18  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f18  08002f18  00012f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f1c  08002f1c  00012f1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002f20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  2000000c  08002f2c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08002f2c  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008985  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001947  00000000  00000000  000289b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000850  00000000  00000000  0002a300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000788  00000000  00000000  0002ab50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ac7a  00000000  00000000  0002b2d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008df8  00000000  00000000  00045f52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000af956  00000000  00000000  0004ed4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fe6a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c78  00000000  00000000  000fe6f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08002ec0 	.word	0x08002ec0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08002ec0 	.word	0x08002ec0

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003f6:	f000 f9fd 	bl	80007f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003fa:	f000 f841 	bl	8000480 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_DMA_Init();
 80003fe:	f000 f8f3 	bl	80005e8 <MX_DMA_Init>
  MX_ADC1_Init();
 8000402:	f000 f885 	bl	8000510 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1); // para calibrar ADC
 8000406:	4b19      	ldr	r3, [pc, #100]	; (800046c <main+0x7c>)
 8000408:	0018      	movs	r0, r3
 800040a:	f001 f9c1 	bl	8001790 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, &valorADC, 1); // leitura do valor de entrada
 800040e:	4918      	ldr	r1, [pc, #96]	; (8000470 <main+0x80>)
 8000410:	4b16      	ldr	r3, [pc, #88]	; (800046c <main+0x7c>)
 8000412:	2201      	movs	r2, #1
 8000414:	0018      	movs	r0, r3
 8000416:	f000 fda7 	bl	8000f68 <HAL_ADC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // supondo que os valores sejam estes:
	  uint16_t TS_CAL1 = 1037;
 800041a:	1dbb      	adds	r3, r7, #6
 800041c:	4a15      	ldr	r2, [pc, #84]	; (8000474 <main+0x84>)
 800041e:	801a      	strh	r2, [r3, #0]
	  uint16_t TS_CAL2 = 1378;
 8000420:	1d3b      	adds	r3, r7, #4
 8000422:	4a15      	ldr	r2, [pc, #84]	; (8000478 <main+0x88>)
 8000424:	801a      	strh	r2, [r3, #0]
	  uint16_t TS_CAL1_TEMP = 30;
 8000426:	1cbb      	adds	r3, r7, #2
 8000428:	221e      	movs	r2, #30
 800042a:	801a      	strh	r2, [r3, #0]
	  uint16_t TS_CAL2_TEMP = 130;
 800042c:	003b      	movs	r3, r7
 800042e:	2282      	movs	r2, #130	; 0x82
 8000430:	801a      	strh	r2, [r3, #0]
	  //if(HAL_OK == HAL_ADC_PollForConversion(&hadc1, 2)) {

		  //valorADC = __HAL_ADC_CALC_TEMPERATURE(2500UL, valorADC, hadc1.Init.Resolution);
	  //}

	  celcius = (TS_CAL2_TEMP - TS_CAL1_TEMP) / (TS_CAL2 - TS_CAL1) * (valorADC - TS_CAL1) + TS_CAL1_TEMP;
 8000432:	003b      	movs	r3, r7
 8000434:	881a      	ldrh	r2, [r3, #0]
 8000436:	1cbb      	adds	r3, r7, #2
 8000438:	881b      	ldrh	r3, [r3, #0]
 800043a:	1ad0      	subs	r0, r2, r3
 800043c:	1d3b      	adds	r3, r7, #4
 800043e:	881a      	ldrh	r2, [r3, #0]
 8000440:	1dbb      	adds	r3, r7, #6
 8000442:	881b      	ldrh	r3, [r3, #0]
 8000444:	1ad3      	subs	r3, r2, r3
 8000446:	0019      	movs	r1, r3
 8000448:	f7ff fee6 	bl	8000218 <__divsi3>
 800044c:	0003      	movs	r3, r0
 800044e:	0019      	movs	r1, r3
 8000450:	4b07      	ldr	r3, [pc, #28]	; (8000470 <main+0x80>)
 8000452:	681a      	ldr	r2, [r3, #0]
 8000454:	1dbb      	adds	r3, r7, #6
 8000456:	881b      	ldrh	r3, [r3, #0]
 8000458:	1ad3      	subs	r3, r2, r3
 800045a:	434b      	muls	r3, r1
 800045c:	001a      	movs	r2, r3
 800045e:	1cbb      	adds	r3, r7, #2
 8000460:	881b      	ldrh	r3, [r3, #0]
 8000462:	18d2      	adds	r2, r2, r3
 8000464:	4b05      	ldr	r3, [pc, #20]	; (800047c <main+0x8c>)
 8000466:	601a      	str	r2, [r3, #0]
  {
 8000468:	e7d7      	b.n	800041a <main+0x2a>
 800046a:	46c0      	nop			; (mov r8, r8)
 800046c:	2000002c 	.word	0x2000002c
 8000470:	20000028 	.word	0x20000028
 8000474:	0000040d 	.word	0x0000040d
 8000478:	00000562 	.word	0x00000562
 800047c:	200000f0 	.word	0x200000f0

08000480 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000480:	b590      	push	{r4, r7, lr}
 8000482:	b095      	sub	sp, #84	; 0x54
 8000484:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000486:	2414      	movs	r4, #20
 8000488:	193b      	adds	r3, r7, r4
 800048a:	0018      	movs	r0, r3
 800048c:	233c      	movs	r3, #60	; 0x3c
 800048e:	001a      	movs	r2, r3
 8000490:	2100      	movs	r1, #0
 8000492:	f002 fd0d 	bl	8002eb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000496:	1d3b      	adds	r3, r7, #4
 8000498:	0018      	movs	r0, r3
 800049a:	2310      	movs	r3, #16
 800049c:	001a      	movs	r2, r3
 800049e:	2100      	movs	r1, #0
 80004a0:	f002 fd06 	bl	8002eb0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004a4:	2380      	movs	r3, #128	; 0x80
 80004a6:	009b      	lsls	r3, r3, #2
 80004a8:	0018      	movs	r0, r3
 80004aa:	f001 fd71 	bl	8001f90 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004ae:	193b      	adds	r3, r7, r4
 80004b0:	2202      	movs	r2, #2
 80004b2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004b4:	193b      	adds	r3, r7, r4
 80004b6:	2280      	movs	r2, #128	; 0x80
 80004b8:	0052      	lsls	r2, r2, #1
 80004ba:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80004bc:	193b      	adds	r3, r7, r4
 80004be:	2200      	movs	r2, #0
 80004c0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004c2:	193b      	adds	r3, r7, r4
 80004c4:	2240      	movs	r2, #64	; 0x40
 80004c6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004c8:	193b      	adds	r3, r7, r4
 80004ca:	2200      	movs	r2, #0
 80004cc:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004ce:	193b      	adds	r3, r7, r4
 80004d0:	0018      	movs	r0, r3
 80004d2:	f001 fd9d 	bl	8002010 <HAL_RCC_OscConfig>
 80004d6:	1e03      	subs	r3, r0, #0
 80004d8:	d001      	beq.n	80004de <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80004da:	f000 f8a3 	bl	8000624 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004de:	1d3b      	adds	r3, r7, #4
 80004e0:	2207      	movs	r2, #7
 80004e2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004e4:	1d3b      	adds	r3, r7, #4
 80004e6:	2200      	movs	r2, #0
 80004e8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004ea:	1d3b      	adds	r3, r7, #4
 80004ec:	2200      	movs	r2, #0
 80004ee:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004f0:	1d3b      	adds	r3, r7, #4
 80004f2:	2200      	movs	r2, #0
 80004f4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004f6:	1d3b      	adds	r3, r7, #4
 80004f8:	2100      	movs	r1, #0
 80004fa:	0018      	movs	r0, r3
 80004fc:	f002 f8ee 	bl	80026dc <HAL_RCC_ClockConfig>
 8000500:	1e03      	subs	r3, r0, #0
 8000502:	d001      	beq.n	8000508 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000504:	f000 f88e 	bl	8000624 <Error_Handler>
  }
}
 8000508:	46c0      	nop			; (mov r8, r8)
 800050a:	46bd      	mov	sp, r7
 800050c:	b015      	add	sp, #84	; 0x54
 800050e:	bd90      	pop	{r4, r7, pc}

08000510 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000516:	1d3b      	adds	r3, r7, #4
 8000518:	0018      	movs	r0, r3
 800051a:	230c      	movs	r3, #12
 800051c:	001a      	movs	r2, r3
 800051e:	2100      	movs	r1, #0
 8000520:	f002 fcc6 	bl	8002eb0 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000524:	4b2d      	ldr	r3, [pc, #180]	; (80005dc <MX_ADC1_Init+0xcc>)
 8000526:	4a2e      	ldr	r2, [pc, #184]	; (80005e0 <MX_ADC1_Init+0xd0>)
 8000528:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800052a:	4b2c      	ldr	r3, [pc, #176]	; (80005dc <MX_ADC1_Init+0xcc>)
 800052c:	2280      	movs	r2, #128	; 0x80
 800052e:	05d2      	lsls	r2, r2, #23
 8000530:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000532:	4b2a      	ldr	r3, [pc, #168]	; (80005dc <MX_ADC1_Init+0xcc>)
 8000534:	2200      	movs	r2, #0
 8000536:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000538:	4b28      	ldr	r3, [pc, #160]	; (80005dc <MX_ADC1_Init+0xcc>)
 800053a:	2200      	movs	r2, #0
 800053c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800053e:	4b27      	ldr	r3, [pc, #156]	; (80005dc <MX_ADC1_Init+0xcc>)
 8000540:	2200      	movs	r2, #0
 8000542:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000544:	4b25      	ldr	r3, [pc, #148]	; (80005dc <MX_ADC1_Init+0xcc>)
 8000546:	2204      	movs	r2, #4
 8000548:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800054a:	4b24      	ldr	r3, [pc, #144]	; (80005dc <MX_ADC1_Init+0xcc>)
 800054c:	2200      	movs	r2, #0
 800054e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000550:	4b22      	ldr	r3, [pc, #136]	; (80005dc <MX_ADC1_Init+0xcc>)
 8000552:	2200      	movs	r2, #0
 8000554:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000556:	4b21      	ldr	r3, [pc, #132]	; (80005dc <MX_ADC1_Init+0xcc>)
 8000558:	2201      	movs	r2, #1
 800055a:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 800055c:	4b1f      	ldr	r3, [pc, #124]	; (80005dc <MX_ADC1_Init+0xcc>)
 800055e:	2201      	movs	r2, #1
 8000560:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000562:	4b1e      	ldr	r3, [pc, #120]	; (80005dc <MX_ADC1_Init+0xcc>)
 8000564:	2220      	movs	r2, #32
 8000566:	2100      	movs	r1, #0
 8000568:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800056a:	4b1c      	ldr	r3, [pc, #112]	; (80005dc <MX_ADC1_Init+0xcc>)
 800056c:	2200      	movs	r2, #0
 800056e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000570:	4b1a      	ldr	r3, [pc, #104]	; (80005dc <MX_ADC1_Init+0xcc>)
 8000572:	2200      	movs	r2, #0
 8000574:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000576:	4b19      	ldr	r3, [pc, #100]	; (80005dc <MX_ADC1_Init+0xcc>)
 8000578:	222c      	movs	r2, #44	; 0x2c
 800057a:	2101      	movs	r1, #1
 800057c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800057e:	4b17      	ldr	r3, [pc, #92]	; (80005dc <MX_ADC1_Init+0xcc>)
 8000580:	2200      	movs	r2, #0
 8000582:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_79CYCLES_5;
 8000584:	4b15      	ldr	r3, [pc, #84]	; (80005dc <MX_ADC1_Init+0xcc>)
 8000586:	2206      	movs	r2, #6
 8000588:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_79CYCLES_5;
 800058a:	4b14      	ldr	r3, [pc, #80]	; (80005dc <MX_ADC1_Init+0xcc>)
 800058c:	2206      	movs	r2, #6
 800058e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000590:	4b12      	ldr	r3, [pc, #72]	; (80005dc <MX_ADC1_Init+0xcc>)
 8000592:	223c      	movs	r2, #60	; 0x3c
 8000594:	2100      	movs	r1, #0
 8000596:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000598:	4b10      	ldr	r3, [pc, #64]	; (80005dc <MX_ADC1_Init+0xcc>)
 800059a:	2200      	movs	r2, #0
 800059c:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800059e:	4b0f      	ldr	r3, [pc, #60]	; (80005dc <MX_ADC1_Init+0xcc>)
 80005a0:	0018      	movs	r0, r3
 80005a2:	f000 fb03 	bl	8000bac <HAL_ADC_Init>
 80005a6:	1e03      	subs	r3, r0, #0
 80005a8:	d001      	beq.n	80005ae <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80005aa:	f000 f83b 	bl	8000624 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80005ae:	1d3b      	adds	r3, r7, #4
 80005b0:	4a0c      	ldr	r2, [pc, #48]	; (80005e4 <MX_ADC1_Init+0xd4>)
 80005b2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005b4:	1d3b      	adds	r3, r7, #4
 80005b6:	2200      	movs	r2, #0
 80005b8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80005ba:	1d3b      	adds	r3, r7, #4
 80005bc:	2200      	movs	r2, #0
 80005be:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005c0:	1d3a      	adds	r2, r7, #4
 80005c2:	4b06      	ldr	r3, [pc, #24]	; (80005dc <MX_ADC1_Init+0xcc>)
 80005c4:	0011      	movs	r1, r2
 80005c6:	0018      	movs	r0, r3
 80005c8:	f000 fd74 	bl	80010b4 <HAL_ADC_ConfigChannel>
 80005cc:	1e03      	subs	r3, r0, #0
 80005ce:	d001      	beq.n	80005d4 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80005d0:	f000 f828 	bl	8000624 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005d4:	46c0      	nop			; (mov r8, r8)
 80005d6:	46bd      	mov	sp, r7
 80005d8:	b004      	add	sp, #16
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	2000002c 	.word	0x2000002c
 80005e0:	40012400 	.word	0x40012400
 80005e4:	b0001000 	.word	0xb0001000

080005e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005ee:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <MX_DMA_Init+0x38>)
 80005f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80005f2:	4b0b      	ldr	r3, [pc, #44]	; (8000620 <MX_DMA_Init+0x38>)
 80005f4:	2101      	movs	r1, #1
 80005f6:	430a      	orrs	r2, r1
 80005f8:	639a      	str	r2, [r3, #56]	; 0x38
 80005fa:	4b09      	ldr	r3, [pc, #36]	; (8000620 <MX_DMA_Init+0x38>)
 80005fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005fe:	2201      	movs	r2, #1
 8000600:	4013      	ands	r3, r2
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000606:	2200      	movs	r2, #0
 8000608:	2100      	movs	r1, #0
 800060a:	2009      	movs	r0, #9
 800060c:	f001 f9ee 	bl	80019ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000610:	2009      	movs	r0, #9
 8000612:	f001 fa00 	bl	8001a16 <HAL_NVIC_EnableIRQ>

}
 8000616:	46c0      	nop			; (mov r8, r8)
 8000618:	46bd      	mov	sp, r7
 800061a:	b002      	add	sp, #8
 800061c:	bd80      	pop	{r7, pc}
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	40021000 	.word	0x40021000

08000624 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000628:	b672      	cpsid	i
}
 800062a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800062c:	e7fe      	b.n	800062c <Error_Handler+0x8>
	...

08000630 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000636:	4b11      	ldr	r3, [pc, #68]	; (800067c <HAL_MspInit+0x4c>)
 8000638:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800063a:	4b10      	ldr	r3, [pc, #64]	; (800067c <HAL_MspInit+0x4c>)
 800063c:	2101      	movs	r1, #1
 800063e:	430a      	orrs	r2, r1
 8000640:	641a      	str	r2, [r3, #64]	; 0x40
 8000642:	4b0e      	ldr	r3, [pc, #56]	; (800067c <HAL_MspInit+0x4c>)
 8000644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000646:	2201      	movs	r2, #1
 8000648:	4013      	ands	r3, r2
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800064e:	4b0b      	ldr	r3, [pc, #44]	; (800067c <HAL_MspInit+0x4c>)
 8000650:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000652:	4b0a      	ldr	r3, [pc, #40]	; (800067c <HAL_MspInit+0x4c>)
 8000654:	2180      	movs	r1, #128	; 0x80
 8000656:	0549      	lsls	r1, r1, #21
 8000658:	430a      	orrs	r2, r1
 800065a:	63da      	str	r2, [r3, #60]	; 0x3c
 800065c:	4b07      	ldr	r3, [pc, #28]	; (800067c <HAL_MspInit+0x4c>)
 800065e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000660:	2380      	movs	r3, #128	; 0x80
 8000662:	055b      	lsls	r3, r3, #21
 8000664:	4013      	ands	r3, r2
 8000666:	603b      	str	r3, [r7, #0]
 8000668:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800066a:	23c0      	movs	r3, #192	; 0xc0
 800066c:	00db      	lsls	r3, r3, #3
 800066e:	0018      	movs	r0, r3
 8000670:	f000 f946 	bl	8000900 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000674:	46c0      	nop			; (mov r8, r8)
 8000676:	46bd      	mov	sp, r7
 8000678:	b002      	add	sp, #8
 800067a:	bd80      	pop	{r7, pc}
 800067c:	40021000 	.word	0x40021000

08000680 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000680:	b590      	push	{r4, r7, lr}
 8000682:	b097      	sub	sp, #92	; 0x5c
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000688:	240c      	movs	r4, #12
 800068a:	193b      	adds	r3, r7, r4
 800068c:	0018      	movs	r0, r3
 800068e:	234c      	movs	r3, #76	; 0x4c
 8000690:	001a      	movs	r2, r3
 8000692:	2100      	movs	r1, #0
 8000694:	f002 fc0c 	bl	8002eb0 <memset>
  if(hadc->Instance==ADC1)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a27      	ldr	r2, [pc, #156]	; (800073c <HAL_ADC_MspInit+0xbc>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d147      	bne.n	8000732 <HAL_ADC_MspInit+0xb2>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80006a2:	193b      	adds	r3, r7, r4
 80006a4:	2280      	movs	r2, #128	; 0x80
 80006a6:	01d2      	lsls	r2, r2, #7
 80006a8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80006aa:	193b      	adds	r3, r7, r4
 80006ac:	2200      	movs	r2, #0
 80006ae:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006b0:	193b      	adds	r3, r7, r4
 80006b2:	0018      	movs	r0, r3
 80006b4:	f002 f99c 	bl	80029f0 <HAL_RCCEx_PeriphCLKConfig>
 80006b8:	1e03      	subs	r3, r0, #0
 80006ba:	d001      	beq.n	80006c0 <HAL_ADC_MspInit+0x40>
    {
      Error_Handler();
 80006bc:	f7ff ffb2 	bl	8000624 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80006c0:	4b1f      	ldr	r3, [pc, #124]	; (8000740 <HAL_ADC_MspInit+0xc0>)
 80006c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006c4:	4b1e      	ldr	r3, [pc, #120]	; (8000740 <HAL_ADC_MspInit+0xc0>)
 80006c6:	2180      	movs	r1, #128	; 0x80
 80006c8:	0349      	lsls	r1, r1, #13
 80006ca:	430a      	orrs	r2, r1
 80006cc:	641a      	str	r2, [r3, #64]	; 0x40
 80006ce:	4b1c      	ldr	r3, [pc, #112]	; (8000740 <HAL_ADC_MspInit+0xc0>)
 80006d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006d2:	2380      	movs	r3, #128	; 0x80
 80006d4:	035b      	lsls	r3, r3, #13
 80006d6:	4013      	ands	r3, r2
 80006d8:	60bb      	str	r3, [r7, #8]
 80006da:	68bb      	ldr	r3, [r7, #8]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80006dc:	4b19      	ldr	r3, [pc, #100]	; (8000744 <HAL_ADC_MspInit+0xc4>)
 80006de:	4a1a      	ldr	r2, [pc, #104]	; (8000748 <HAL_ADC_MspInit+0xc8>)
 80006e0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80006e2:	4b18      	ldr	r3, [pc, #96]	; (8000744 <HAL_ADC_MspInit+0xc4>)
 80006e4:	2205      	movs	r2, #5
 80006e6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006e8:	4b16      	ldr	r3, [pc, #88]	; (8000744 <HAL_ADC_MspInit+0xc4>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006ee:	4b15      	ldr	r3, [pc, #84]	; (8000744 <HAL_ADC_MspInit+0xc4>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006f4:	4b13      	ldr	r3, [pc, #76]	; (8000744 <HAL_ADC_MspInit+0xc4>)
 80006f6:	2280      	movs	r2, #128	; 0x80
 80006f8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006fa:	4b12      	ldr	r3, [pc, #72]	; (8000744 <HAL_ADC_MspInit+0xc4>)
 80006fc:	2280      	movs	r2, #128	; 0x80
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000702:	4b10      	ldr	r3, [pc, #64]	; (8000744 <HAL_ADC_MspInit+0xc4>)
 8000704:	2280      	movs	r2, #128	; 0x80
 8000706:	00d2      	lsls	r2, r2, #3
 8000708:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800070a:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <HAL_ADC_MspInit+0xc4>)
 800070c:	2220      	movs	r2, #32
 800070e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000710:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <HAL_ADC_MspInit+0xc4>)
 8000712:	2200      	movs	r2, #0
 8000714:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000716:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <HAL_ADC_MspInit+0xc4>)
 8000718:	0018      	movs	r0, r3
 800071a:	f001 f999 	bl	8001a50 <HAL_DMA_Init>
 800071e:	1e03      	subs	r3, r0, #0
 8000720:	d001      	beq.n	8000726 <HAL_ADC_MspInit+0xa6>
    {
      Error_Handler();
 8000722:	f7ff ff7f 	bl	8000624 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	4a06      	ldr	r2, [pc, #24]	; (8000744 <HAL_ADC_MspInit+0xc4>)
 800072a:	651a      	str	r2, [r3, #80]	; 0x50
 800072c:	4b05      	ldr	r3, [pc, #20]	; (8000744 <HAL_ADC_MspInit+0xc4>)
 800072e:	687a      	ldr	r2, [r7, #4]
 8000730:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	46bd      	mov	sp, r7
 8000736:	b017      	add	sp, #92	; 0x5c
 8000738:	bd90      	pop	{r4, r7, pc}
 800073a:	46c0      	nop			; (mov r8, r8)
 800073c:	40012400 	.word	0x40012400
 8000740:	40021000 	.word	0x40021000
 8000744:	20000090 	.word	0x20000090
 8000748:	40020008 	.word	0x40020008

0800074c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000750:	e7fe      	b.n	8000750 <NMI_Handler+0x4>

08000752 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000752:	b580      	push	{r7, lr}
 8000754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000756:	e7fe      	b.n	8000756 <HardFault_Handler+0x4>

08000758 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800075c:	46c0      	nop			; (mov r8, r8)
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}

08000762 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000762:	b580      	push	{r7, lr}
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000766:	46c0      	nop			; (mov r8, r8)
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}

0800076c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000770:	f000 f8aa 	bl	80008c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000774:	46c0      	nop			; (mov r8, r8)
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
	...

0800077c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000780:	4b03      	ldr	r3, [pc, #12]	; (8000790 <DMA1_Channel1_IRQHandler+0x14>)
 8000782:	0018      	movs	r0, r3
 8000784:	f001 fa96 	bl	8001cb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000788:	46c0      	nop			; (mov r8, r8)
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	46c0      	nop			; (mov r8, r8)
 8000790:	20000090 	.word	0x20000090

08000794 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000798:	46c0      	nop			; (mov r8, r8)
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
	...

080007a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007a0:	480d      	ldr	r0, [pc, #52]	; (80007d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007a2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80007a4:	f7ff fff6 	bl	8000794 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007a8:	480c      	ldr	r0, [pc, #48]	; (80007dc <LoopForever+0x6>)
  ldr r1, =_edata
 80007aa:	490d      	ldr	r1, [pc, #52]	; (80007e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007ac:	4a0d      	ldr	r2, [pc, #52]	; (80007e4 <LoopForever+0xe>)
  movs r3, #0
 80007ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007b0:	e002      	b.n	80007b8 <LoopCopyDataInit>

080007b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007b6:	3304      	adds	r3, #4

080007b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007bc:	d3f9      	bcc.n	80007b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007be:	4a0a      	ldr	r2, [pc, #40]	; (80007e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007c0:	4c0a      	ldr	r4, [pc, #40]	; (80007ec <LoopForever+0x16>)
  movs r3, #0
 80007c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007c4:	e001      	b.n	80007ca <LoopFillZerobss>

080007c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007c8:	3204      	adds	r2, #4

080007ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007cc:	d3fb      	bcc.n	80007c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007ce:	f002 fb4b 	bl	8002e68 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80007d2:	f7ff fe0d 	bl	80003f0 <main>

080007d6 <LoopForever>:

LoopForever:
  b LoopForever
 80007d6:	e7fe      	b.n	80007d6 <LoopForever>
  ldr   r0, =_estack
 80007d8:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 80007dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007e0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007e4:	08002f20 	.word	0x08002f20
  ldr r2, =_sbss
 80007e8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007ec:	200000f8 	.word	0x200000f8

080007f0 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007f0:	e7fe      	b.n	80007f0 <ADC1_COMP_IRQHandler>
	...

080007f4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80007fa:	1dfb      	adds	r3, r7, #7
 80007fc:	2200      	movs	r2, #0
 80007fe:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000800:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <HAL_Init+0x3c>)
 8000802:	681a      	ldr	r2, [r3, #0]
 8000804:	4b0a      	ldr	r3, [pc, #40]	; (8000830 <HAL_Init+0x3c>)
 8000806:	2180      	movs	r1, #128	; 0x80
 8000808:	0049      	lsls	r1, r1, #1
 800080a:	430a      	orrs	r2, r1
 800080c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800080e:	2003      	movs	r0, #3
 8000810:	f000 f810 	bl	8000834 <HAL_InitTick>
 8000814:	1e03      	subs	r3, r0, #0
 8000816:	d003      	beq.n	8000820 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000818:	1dfb      	adds	r3, r7, #7
 800081a:	2201      	movs	r2, #1
 800081c:	701a      	strb	r2, [r3, #0]
 800081e:	e001      	b.n	8000824 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000820:	f7ff ff06 	bl	8000630 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000824:	1dfb      	adds	r3, r7, #7
 8000826:	781b      	ldrb	r3, [r3, #0]
}
 8000828:	0018      	movs	r0, r3
 800082a:	46bd      	mov	sp, r7
 800082c:	b002      	add	sp, #8
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40022000 	.word	0x40022000

08000834 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000834:	b590      	push	{r4, r7, lr}
 8000836:	b085      	sub	sp, #20
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800083c:	230f      	movs	r3, #15
 800083e:	18fb      	adds	r3, r7, r3
 8000840:	2200      	movs	r2, #0
 8000842:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000844:	4b1d      	ldr	r3, [pc, #116]	; (80008bc <HAL_InitTick+0x88>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d02b      	beq.n	80008a4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800084c:	4b1c      	ldr	r3, [pc, #112]	; (80008c0 <HAL_InitTick+0x8c>)
 800084e:	681c      	ldr	r4, [r3, #0]
 8000850:	4b1a      	ldr	r3, [pc, #104]	; (80008bc <HAL_InitTick+0x88>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	0019      	movs	r1, r3
 8000856:	23fa      	movs	r3, #250	; 0xfa
 8000858:	0098      	lsls	r0, r3, #2
 800085a:	f7ff fc53 	bl	8000104 <__udivsi3>
 800085e:	0003      	movs	r3, r0
 8000860:	0019      	movs	r1, r3
 8000862:	0020      	movs	r0, r4
 8000864:	f7ff fc4e 	bl	8000104 <__udivsi3>
 8000868:	0003      	movs	r3, r0
 800086a:	0018      	movs	r0, r3
 800086c:	f001 f8e3 	bl	8001a36 <HAL_SYSTICK_Config>
 8000870:	1e03      	subs	r3, r0, #0
 8000872:	d112      	bne.n	800089a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	2b03      	cmp	r3, #3
 8000878:	d80a      	bhi.n	8000890 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800087a:	6879      	ldr	r1, [r7, #4]
 800087c:	2301      	movs	r3, #1
 800087e:	425b      	negs	r3, r3
 8000880:	2200      	movs	r2, #0
 8000882:	0018      	movs	r0, r3
 8000884:	f001 f8b2 	bl	80019ec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000888:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <HAL_InitTick+0x90>)
 800088a:	687a      	ldr	r2, [r7, #4]
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	e00d      	b.n	80008ac <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000890:	230f      	movs	r3, #15
 8000892:	18fb      	adds	r3, r7, r3
 8000894:	2201      	movs	r2, #1
 8000896:	701a      	strb	r2, [r3, #0]
 8000898:	e008      	b.n	80008ac <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800089a:	230f      	movs	r3, #15
 800089c:	18fb      	adds	r3, r7, r3
 800089e:	2201      	movs	r2, #1
 80008a0:	701a      	strb	r2, [r3, #0]
 80008a2:	e003      	b.n	80008ac <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008a4:	230f      	movs	r3, #15
 80008a6:	18fb      	adds	r3, r7, r3
 80008a8:	2201      	movs	r2, #1
 80008aa:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80008ac:	230f      	movs	r3, #15
 80008ae:	18fb      	adds	r3, r7, r3
 80008b0:	781b      	ldrb	r3, [r3, #0]
}
 80008b2:	0018      	movs	r0, r3
 80008b4:	46bd      	mov	sp, r7
 80008b6:	b005      	add	sp, #20
 80008b8:	bd90      	pop	{r4, r7, pc}
 80008ba:	46c0      	nop			; (mov r8, r8)
 80008bc:	20000008 	.word	0x20000008
 80008c0:	20000000 	.word	0x20000000
 80008c4:	20000004 	.word	0x20000004

080008c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80008cc:	4b05      	ldr	r3, [pc, #20]	; (80008e4 <HAL_IncTick+0x1c>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	001a      	movs	r2, r3
 80008d2:	4b05      	ldr	r3, [pc, #20]	; (80008e8 <HAL_IncTick+0x20>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	18d2      	adds	r2, r2, r3
 80008d8:	4b03      	ldr	r3, [pc, #12]	; (80008e8 <HAL_IncTick+0x20>)
 80008da:	601a      	str	r2, [r3, #0]
}
 80008dc:	46c0      	nop			; (mov r8, r8)
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	46c0      	nop			; (mov r8, r8)
 80008e4:	20000008 	.word	0x20000008
 80008e8:	200000f4 	.word	0x200000f4

080008ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  return uwTick;
 80008f0:	4b02      	ldr	r3, [pc, #8]	; (80008fc <HAL_GetTick+0x10>)
 80008f2:	681b      	ldr	r3, [r3, #0]
}
 80008f4:	0018      	movs	r0, r3
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	46c0      	nop			; (mov r8, r8)
 80008fc:	200000f4 	.word	0x200000f4

08000900 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000908:	4b06      	ldr	r3, [pc, #24]	; (8000924 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a06      	ldr	r2, [pc, #24]	; (8000928 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800090e:	4013      	ands	r3, r2
 8000910:	0019      	movs	r1, r3
 8000912:	4b04      	ldr	r3, [pc, #16]	; (8000924 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000914:	687a      	ldr	r2, [r7, #4]
 8000916:	430a      	orrs	r2, r1
 8000918:	601a      	str	r2, [r3, #0]
}
 800091a:	46c0      	nop			; (mov r8, r8)
 800091c:	46bd      	mov	sp, r7
 800091e:	b002      	add	sp, #8
 8000920:	bd80      	pop	{r7, pc}
 8000922:	46c0      	nop			; (mov r8, r8)
 8000924:	40010000 	.word	0x40010000
 8000928:	fffff9ff 	.word	0xfffff9ff

0800092c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
 8000934:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4a05      	ldr	r2, [pc, #20]	; (8000950 <LL_ADC_SetCommonPathInternalCh+0x24>)
 800093c:	401a      	ands	r2, r3
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	431a      	orrs	r2, r3
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	601a      	str	r2, [r3, #0]
}
 8000946:	46c0      	nop			; (mov r8, r8)
 8000948:	46bd      	mov	sp, r7
 800094a:	b002      	add	sp, #8
 800094c:	bd80      	pop	{r7, pc}
 800094e:	46c0      	nop			; (mov r8, r8)
 8000950:	fe3fffff 	.word	0xfe3fffff

08000954 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681a      	ldr	r2, [r3, #0]
 8000960:	23e0      	movs	r3, #224	; 0xe0
 8000962:	045b      	lsls	r3, r3, #17
 8000964:	4013      	ands	r3, r2
}
 8000966:	0018      	movs	r0, r3
 8000968:	46bd      	mov	sp, r7
 800096a:	b002      	add	sp, #8
 800096c:	bd80      	pop	{r7, pc}

0800096e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800096e:	b580      	push	{r7, lr}
 8000970:	b084      	sub	sp, #16
 8000972:	af00      	add	r7, sp, #0
 8000974:	60f8      	str	r0, [r7, #12]
 8000976:	60b9      	str	r1, [r7, #8]
 8000978:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	695b      	ldr	r3, [r3, #20]
 800097e:	68ba      	ldr	r2, [r7, #8]
 8000980:	2104      	movs	r1, #4
 8000982:	400a      	ands	r2, r1
 8000984:	2107      	movs	r1, #7
 8000986:	4091      	lsls	r1, r2
 8000988:	000a      	movs	r2, r1
 800098a:	43d2      	mvns	r2, r2
 800098c:	401a      	ands	r2, r3
 800098e:	68bb      	ldr	r3, [r7, #8]
 8000990:	2104      	movs	r1, #4
 8000992:	400b      	ands	r3, r1
 8000994:	6879      	ldr	r1, [r7, #4]
 8000996:	4099      	lsls	r1, r3
 8000998:	000b      	movs	r3, r1
 800099a:	431a      	orrs	r2, r3
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80009a0:	46c0      	nop			; (mov r8, r8)
 80009a2:	46bd      	mov	sp, r7
 80009a4:	b004      	add	sp, #16
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	68da      	ldr	r2, [r3, #12]
 80009b4:	23c0      	movs	r3, #192	; 0xc0
 80009b6:	011b      	lsls	r3, r3, #4
 80009b8:	4013      	ands	r3, r2
 80009ba:	d101      	bne.n	80009c0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80009bc:	2301      	movs	r3, #1
 80009be:	e000      	b.n	80009c2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80009c0:	2300      	movs	r3, #0
}
 80009c2:	0018      	movs	r0, r3
 80009c4:	46bd      	mov	sp, r7
 80009c6:	b002      	add	sp, #8
 80009c8:	bd80      	pop	{r7, pc}

080009ca <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80009ca:	b580      	push	{r7, lr}
 80009cc:	b084      	sub	sp, #16
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	60f8      	str	r0, [r7, #12]
 80009d2:	60b9      	str	r1, [r7, #8]
 80009d4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009da:	68ba      	ldr	r2, [r7, #8]
 80009dc:	211f      	movs	r1, #31
 80009de:	400a      	ands	r2, r1
 80009e0:	210f      	movs	r1, #15
 80009e2:	4091      	lsls	r1, r2
 80009e4:	000a      	movs	r2, r1
 80009e6:	43d2      	mvns	r2, r2
 80009e8:	401a      	ands	r2, r3
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	0e9b      	lsrs	r3, r3, #26
 80009ee:	210f      	movs	r1, #15
 80009f0:	4019      	ands	r1, r3
 80009f2:	68bb      	ldr	r3, [r7, #8]
 80009f4:	201f      	movs	r0, #31
 80009f6:	4003      	ands	r3, r0
 80009f8:	4099      	lsls	r1, r3
 80009fa:	000b      	movs	r3, r1
 80009fc:	431a      	orrs	r2, r3
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000a02:	46c0      	nop			; (mov r8, r8)
 8000a04:	46bd      	mov	sp, r7
 8000a06:	b004      	add	sp, #16
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b082      	sub	sp, #8
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	6078      	str	r0, [r7, #4]
 8000a12:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	035b      	lsls	r3, r3, #13
 8000a1c:	0b5b      	lsrs	r3, r3, #13
 8000a1e:	431a      	orrs	r2, r3
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000a24:	46c0      	nop			; (mov r8, r8)
 8000a26:	46bd      	mov	sp, r7
 8000a28:	b002      	add	sp, #8
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a3a:	683a      	ldr	r2, [r7, #0]
 8000a3c:	0352      	lsls	r2, r2, #13
 8000a3e:	0b52      	lsrs	r2, r2, #13
 8000a40:	43d2      	mvns	r2, r2
 8000a42:	401a      	ands	r2, r3
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000a48:	46c0      	nop			; (mov r8, r8)
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	b002      	add	sp, #8
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	60f8      	str	r0, [r7, #12]
 8000a58:	60b9      	str	r1, [r7, #8]
 8000a5a:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	695b      	ldr	r3, [r3, #20]
 8000a60:	68ba      	ldr	r2, [r7, #8]
 8000a62:	0212      	lsls	r2, r2, #8
 8000a64:	43d2      	mvns	r2, r2
 8000a66:	401a      	ands	r2, r3
 8000a68:	68bb      	ldr	r3, [r7, #8]
 8000a6a:	021b      	lsls	r3, r3, #8
 8000a6c:	6879      	ldr	r1, [r7, #4]
 8000a6e:	400b      	ands	r3, r1
 8000a70:	4904      	ldr	r1, [pc, #16]	; (8000a84 <LL_ADC_SetChannelSamplingTime+0x34>)
 8000a72:	400b      	ands	r3, r1
 8000a74:	431a      	orrs	r2, r3
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000a7a:	46c0      	nop			; (mov r8, r8)
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	b004      	add	sp, #16
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	46c0      	nop			; (mov r8, r8)
 8000a84:	07ffff00 	.word	0x07ffff00

08000a88 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	689b      	ldr	r3, [r3, #8]
 8000a94:	4a05      	ldr	r2, [pc, #20]	; (8000aac <LL_ADC_EnableInternalRegulator+0x24>)
 8000a96:	4013      	ands	r3, r2
 8000a98:	2280      	movs	r2, #128	; 0x80
 8000a9a:	0552      	lsls	r2, r2, #21
 8000a9c:	431a      	orrs	r2, r3
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000aa2:	46c0      	nop			; (mov r8, r8)
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	b002      	add	sp, #8
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	46c0      	nop			; (mov r8, r8)
 8000aac:	6fffffe8 	.word	0x6fffffe8

08000ab0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	689a      	ldr	r2, [r3, #8]
 8000abc:	2380      	movs	r3, #128	; 0x80
 8000abe:	055b      	lsls	r3, r3, #21
 8000ac0:	401a      	ands	r2, r3
 8000ac2:	2380      	movs	r3, #128	; 0x80
 8000ac4:	055b      	lsls	r3, r3, #21
 8000ac6:	429a      	cmp	r2, r3
 8000ac8:	d101      	bne.n	8000ace <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8000aca:	2301      	movs	r3, #1
 8000acc:	e000      	b.n	8000ad0 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8000ace:	2300      	movs	r3, #0
}
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	b002      	add	sp, #8
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	689b      	ldr	r3, [r3, #8]
 8000ae4:	4a04      	ldr	r2, [pc, #16]	; (8000af8 <LL_ADC_Enable+0x20>)
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	2201      	movs	r2, #1
 8000aea:	431a      	orrs	r2, r3
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000af0:	46c0      	nop			; (mov r8, r8)
 8000af2:	46bd      	mov	sp, r7
 8000af4:	b002      	add	sp, #8
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	7fffffe8 	.word	0x7fffffe8

08000afc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	689b      	ldr	r3, [r3, #8]
 8000b08:	4a04      	ldr	r2, [pc, #16]	; (8000b1c <LL_ADC_Disable+0x20>)
 8000b0a:	4013      	ands	r3, r2
 8000b0c:	2202      	movs	r2, #2
 8000b0e:	431a      	orrs	r2, r3
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8000b14:	46c0      	nop			; (mov r8, r8)
 8000b16:	46bd      	mov	sp, r7
 8000b18:	b002      	add	sp, #8
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	7fffffe8 	.word	0x7fffffe8

08000b20 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	689b      	ldr	r3, [r3, #8]
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	4013      	ands	r3, r2
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d101      	bne.n	8000b38 <LL_ADC_IsEnabled+0x18>
 8000b34:	2301      	movs	r3, #1
 8000b36:	e000      	b.n	8000b3a <LL_ADC_IsEnabled+0x1a>
 8000b38:	2300      	movs	r3, #0
}
 8000b3a:	0018      	movs	r0, r3
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	b002      	add	sp, #8
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8000b42:	b580      	push	{r7, lr}
 8000b44:	b082      	sub	sp, #8
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	689b      	ldr	r3, [r3, #8]
 8000b4e:	2202      	movs	r2, #2
 8000b50:	4013      	ands	r3, r2
 8000b52:	2b02      	cmp	r3, #2
 8000b54:	d101      	bne.n	8000b5a <LL_ADC_IsDisableOngoing+0x18>
 8000b56:	2301      	movs	r3, #1
 8000b58:	e000      	b.n	8000b5c <LL_ADC_IsDisableOngoing+0x1a>
 8000b5a:	2300      	movs	r3, #0
}
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	b002      	add	sp, #8
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	689b      	ldr	r3, [r3, #8]
 8000b70:	4a04      	ldr	r2, [pc, #16]	; (8000b84 <LL_ADC_REG_StartConversion+0x20>)
 8000b72:	4013      	ands	r3, r2
 8000b74:	2204      	movs	r2, #4
 8000b76:	431a      	orrs	r2, r3
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000b7c:	46c0      	nop			; (mov r8, r8)
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	b002      	add	sp, #8
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	7fffffe8 	.word	0x7fffffe8

08000b88 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	689b      	ldr	r3, [r3, #8]
 8000b94:	2204      	movs	r2, #4
 8000b96:	4013      	ands	r3, r2
 8000b98:	2b04      	cmp	r3, #4
 8000b9a:	d101      	bne.n	8000ba0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	e000      	b.n	8000ba2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000ba0:	2300      	movs	r3, #0
}
 8000ba2:	0018      	movs	r0, r3
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	b002      	add	sp, #8
 8000ba8:	bd80      	pop	{r7, pc}
	...

08000bac <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b088      	sub	sp, #32
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bb4:	231f      	movs	r3, #31
 8000bb6:	18fb      	adds	r3, r7, r3
 8000bb8:	2200      	movs	r2, #0
 8000bba:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d101      	bne.n	8000bd2 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	e1b1      	b.n	8000f36 <HAL_ADC_Init+0x38a>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d10a      	bne.n	8000bf0 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	0018      	movs	r0, r3
 8000bde:	f7ff fd4f 	bl	8000680 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2200      	movs	r2, #0
 8000be6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2254      	movs	r2, #84	; 0x54
 8000bec:	2100      	movs	r1, #0
 8000bee:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	0018      	movs	r0, r3
 8000bf6:	f7ff ff5b 	bl	8000ab0 <LL_ADC_IsInternalRegulatorEnabled>
 8000bfa:	1e03      	subs	r3, r0, #0
 8000bfc:	d115      	bne.n	8000c2a <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	0018      	movs	r0, r3
 8000c04:	f7ff ff40 	bl	8000a88 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000c08:	4bcd      	ldr	r3, [pc, #820]	; (8000f40 <HAL_ADC_Init+0x394>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	49cd      	ldr	r1, [pc, #820]	; (8000f44 <HAL_ADC_Init+0x398>)
 8000c0e:	0018      	movs	r0, r3
 8000c10:	f7ff fa78 	bl	8000104 <__udivsi3>
 8000c14:	0003      	movs	r3, r0
 8000c16:	3301      	adds	r3, #1
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000c1c:	e002      	b.n	8000c24 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8000c1e:	68bb      	ldr	r3, [r7, #8]
 8000c20:	3b01      	subs	r3, #1
 8000c22:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d1f9      	bne.n	8000c1e <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	0018      	movs	r0, r3
 8000c30:	f7ff ff3e 	bl	8000ab0 <LL_ADC_IsInternalRegulatorEnabled>
 8000c34:	1e03      	subs	r3, r0, #0
 8000c36:	d10f      	bne.n	8000c58 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c3c:	2210      	movs	r2, #16
 8000c3e:	431a      	orrs	r2, r3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c48:	2201      	movs	r2, #1
 8000c4a:	431a      	orrs	r2, r3
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8000c50:	231f      	movs	r3, #31
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	2201      	movs	r2, #1
 8000c56:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	0018      	movs	r0, r3
 8000c5e:	f7ff ff93 	bl	8000b88 <LL_ADC_REG_IsConversionOngoing>
 8000c62:	0003      	movs	r3, r0
 8000c64:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c6a:	2210      	movs	r2, #16
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	d000      	beq.n	8000c72 <HAL_ADC_Init+0xc6>
 8000c70:	e154      	b.n	8000f1c <HAL_ADC_Init+0x370>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d000      	beq.n	8000c7a <HAL_ADC_Init+0xce>
 8000c78:	e150      	b.n	8000f1c <HAL_ADC_Init+0x370>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c7e:	4ab2      	ldr	r2, [pc, #712]	; (8000f48 <HAL_ADC_Init+0x39c>)
 8000c80:	4013      	ands	r3, r2
 8000c82:	2202      	movs	r2, #2
 8000c84:	431a      	orrs	r2, r3
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	0018      	movs	r0, r3
 8000c90:	f7ff ff46 	bl	8000b20 <LL_ADC_IsEnabled>
 8000c94:	1e03      	subs	r3, r0, #0
 8000c96:	d156      	bne.n	8000d46 <HAL_ADC_Init+0x19a>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	68db      	ldr	r3, [r3, #12]
 8000c9e:	2218      	movs	r2, #24
 8000ca0:	4393      	bics	r3, r2
 8000ca2:	0019      	movs	r1, r3
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	689a      	ldr	r2, [r3, #8]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	430a      	orrs	r2, r1
 8000cae:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	0f9b      	lsrs	r3, r3, #30
 8000cb6:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	697a      	ldr	r2, [r7, #20]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	223c      	movs	r2, #60	; 0x3c
 8000cc8:	5c9b      	ldrb	r3, [r3, r2]
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d111      	bne.n	8000cf2 <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	0f9b      	lsrs	r3, r3, #30
 8000cd4:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000cda:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8000ce0:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8000ce6:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	4313      	orrs	r3, r2
 8000cec:	2201      	movs	r2, #1
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	691b      	ldr	r3, [r3, #16]
 8000cf8:	4a94      	ldr	r2, [pc, #592]	; (8000f4c <HAL_ADC_Init+0x3a0>)
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	0019      	movs	r1, r3
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	697a      	ldr	r2, [r7, #20]
 8000d04:	430a      	orrs	r2, r1
 8000d06:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	685a      	ldr	r2, [r3, #4]
 8000d0c:	23c0      	movs	r3, #192	; 0xc0
 8000d0e:	061b      	lsls	r3, r3, #24
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d018      	beq.n	8000d46 <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000d18:	2380      	movs	r3, #128	; 0x80
 8000d1a:	05db      	lsls	r3, r3, #23
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	d012      	beq.n	8000d46 <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000d24:	2380      	movs	r3, #128	; 0x80
 8000d26:	061b      	lsls	r3, r3, #24
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	d00c      	beq.n	8000d46 <HAL_ADC_Init+0x19a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8000d2c:	4b88      	ldr	r3, [pc, #544]	; (8000f50 <HAL_ADC_Init+0x3a4>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a88      	ldr	r2, [pc, #544]	; (8000f54 <HAL_ADC_Init+0x3a8>)
 8000d32:	4013      	ands	r3, r2
 8000d34:	0019      	movs	r1, r3
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	685a      	ldr	r2, [r3, #4]
 8000d3a:	23f0      	movs	r3, #240	; 0xf0
 8000d3c:	039b      	lsls	r3, r3, #14
 8000d3e:	401a      	ands	r2, r3
 8000d40:	4b83      	ldr	r3, [pc, #524]	; (8000f50 <HAL_ADC_Init+0x3a4>)
 8000d42:	430a      	orrs	r2, r1
 8000d44:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	7e1b      	ldrb	r3, [r3, #24]
 8000d4a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	7e5b      	ldrb	r3, [r3, #25]
 8000d50:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000d52:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	7e9b      	ldrb	r3, [r3, #26]
 8000d58:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000d5a:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d002      	beq.n	8000d6a <HAL_ADC_Init+0x1be>
 8000d64:	2380      	movs	r3, #128	; 0x80
 8000d66:	015b      	lsls	r3, r3, #5
 8000d68:	e000      	b.n	8000d6c <HAL_ADC_Init+0x1c0>
 8000d6a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000d6c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000d72:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	691b      	ldr	r3, [r3, #16]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	da04      	bge.n	8000d86 <HAL_ADC_Init+0x1da>
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	691b      	ldr	r3, [r3, #16]
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	085b      	lsrs	r3, r3, #1
 8000d84:	e001      	b.n	8000d8a <HAL_ADC_Init+0x1de>
 8000d86:	2380      	movs	r3, #128	; 0x80
 8000d88:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                           |
 8000d8a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	212c      	movs	r1, #44	; 0x2c
 8000d90:	5c5b      	ldrb	r3, [r3, r1]
 8000d92:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000d94:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000d96:	69ba      	ldr	r2, [r7, #24]
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2220      	movs	r2, #32
 8000da0:	5c9b      	ldrb	r3, [r3, r2]
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d115      	bne.n	8000dd2 <HAL_ADC_Init+0x226>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	7e9b      	ldrb	r3, [r3, #26]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d105      	bne.n	8000dba <HAL_ADC_Init+0x20e>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000dae:	69bb      	ldr	r3, [r7, #24]
 8000db0:	2280      	movs	r2, #128	; 0x80
 8000db2:	0252      	lsls	r2, r2, #9
 8000db4:	4313      	orrs	r3, r2
 8000db6:	61bb      	str	r3, [r7, #24]
 8000db8:	e00b      	b.n	8000dd2 <HAL_ADC_Init+0x226>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dbe:	2220      	movs	r2, #32
 8000dc0:	431a      	orrs	r2, r3
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000dca:	2201      	movs	r2, #1
 8000dcc:	431a      	orrs	r2, r3
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d00a      	beq.n	8000df0 <HAL_ADC_Init+0x244>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000dde:	23e0      	movs	r3, #224	; 0xe0
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	401a      	ands	r2, r3
                   hadc->Init.ExternalTrigConvEdge);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000de8:	4313      	orrs	r3, r2
 8000dea:	69ba      	ldr	r2, [r7, #24]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	68db      	ldr	r3, [r3, #12]
 8000df6:	4a58      	ldr	r2, [pc, #352]	; (8000f58 <HAL_ADC_Init+0x3ac>)
 8000df8:	4013      	ands	r3, r2
 8000dfa:	0019      	movs	r1, r3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	430a      	orrs	r2, r1
 8000e04:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	691b      	ldr	r3, [r3, #16]
 8000e0c:	4a53      	ldr	r2, [pc, #332]	; (8000f5c <HAL_ADC_Init+0x3b0>)
 8000e0e:	4013      	ands	r3, r2
 8000e10:	0019      	movs	r1, r3
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	697a      	ldr	r2, [r7, #20]
 8000e18:	430a      	orrs	r2, r1
 8000e1a:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6818      	ldr	r0, [r3, #0]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e24:	001a      	movs	r2, r3
 8000e26:	2100      	movs	r1, #0
 8000e28:	f7ff fda1 	bl	800096e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6818      	ldr	r0, [r3, #0]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e34:	494a      	ldr	r1, [pc, #296]	; (8000f60 <HAL_ADC_Init+0x3b4>)
 8000e36:	001a      	movs	r2, r3
 8000e38:	f7ff fd99 	bl	800096e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	691b      	ldr	r3, [r3, #16]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d109      	bne.n	8000e58 <HAL_ADC_Init+0x2ac>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	2110      	movs	r1, #16
 8000e50:	4249      	negs	r1, r1
 8000e52:	430a      	orrs	r2, r1
 8000e54:	629a      	str	r2, [r3, #40]	; 0x28
 8000e56:	e03a      	b.n	8000ece <HAL_ADC_Init+0x322>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	691a      	ldr	r2, [r3, #16]
 8000e5c:	2380      	movs	r3, #128	; 0x80
 8000e5e:	039b      	lsls	r3, r3, #14
 8000e60:	429a      	cmp	r2, r3
 8000e62:	d134      	bne.n	8000ece <HAL_ADC_Init+0x322>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8000e64:	2300      	movs	r3, #0
 8000e66:	613b      	str	r3, [r7, #16]
 8000e68:	e00c      	b.n	8000e84 <HAL_ADC_Init+0x2d8>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	40da      	lsrs	r2, r3
 8000e74:	0013      	movs	r3, r2
 8000e76:	220f      	movs	r2, #15
 8000e78:	4013      	ands	r3, r2
 8000e7a:	2b0f      	cmp	r3, #15
 8000e7c:	d006      	beq.n	8000e8c <HAL_ADC_Init+0x2e0>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8000e7e:	693b      	ldr	r3, [r7, #16]
 8000e80:	3301      	adds	r3, #1
 8000e82:	613b      	str	r3, [r7, #16]
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	2b07      	cmp	r3, #7
 8000e88:	d9ef      	bls.n	8000e6a <HAL_ADC_Init+0x2be>
 8000e8a:	e000      	b.n	8000e8e <HAL_ADC_Init+0x2e2>
            ADC_CHSELR_SQ1)
        {
          break;
 8000e8c:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d109      	bne.n	8000ea8 <HAL_ADC_Init+0x2fc>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	2110      	movs	r1, #16
 8000ea0:	4249      	negs	r1, r1
 8000ea2:	430a      	orrs	r2, r1
 8000ea4:	629a      	str	r2, [r3, #40]	; 0x28
 8000ea6:	e012      	b.n	8000ece <HAL_ADC_Init+0x322>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	69db      	ldr	r3, [r3, #28]
 8000eb2:	3b01      	subs	r3, #1
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	221c      	movs	r2, #28
 8000eb8:	4013      	ands	r3, r2
 8000eba:	2210      	movs	r2, #16
 8000ebc:	4252      	negs	r2, r2
 8000ebe:	409a      	lsls	r2, r3
 8000ec0:	0011      	movs	r1, r2
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	430a      	orrs	r2, r1
 8000ecc:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	4a23      	ldr	r2, [pc, #140]	; (8000f64 <HAL_ADC_Init+0x3b8>)
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	429a      	cmp	r2, r3
 8000edc:	d10b      	bne.n	8000ef6 <HAL_ADC_Init+0x34a>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ee8:	2203      	movs	r2, #3
 8000eea:	4393      	bics	r3, r2
 8000eec:	2201      	movs	r2, #1
 8000eee:	431a      	orrs	r2, r3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8000ef4:	e01c      	b.n	8000f30 <HAL_ADC_Init+0x384>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000efa:	2212      	movs	r2, #18
 8000efc:	4393      	bics	r3, r2
 8000efe:	2210      	movs	r2, #16
 8000f00:	431a      	orrs	r2, r3
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	431a      	orrs	r2, r3
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8000f12:	231f      	movs	r3, #31
 8000f14:	18fb      	adds	r3, r7, r3
 8000f16:	2201      	movs	r2, #1
 8000f18:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8000f1a:	e009      	b.n	8000f30 <HAL_ADC_Init+0x384>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f20:	2210      	movs	r2, #16
 8000f22:	431a      	orrs	r2, r3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000f28:	231f      	movs	r3, #31
 8000f2a:	18fb      	adds	r3, r7, r3
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8000f30:	231f      	movs	r3, #31
 8000f32:	18fb      	adds	r3, r7, r3
 8000f34:	781b      	ldrb	r3, [r3, #0]
}
 8000f36:	0018      	movs	r0, r3
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	b008      	add	sp, #32
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	46c0      	nop			; (mov r8, r8)
 8000f40:	20000000 	.word	0x20000000
 8000f44:	00030d40 	.word	0x00030d40
 8000f48:	fffffefd 	.word	0xfffffefd
 8000f4c:	1ffffc02 	.word	0x1ffffc02
 8000f50:	40012708 	.word	0x40012708
 8000f54:	ffc3ffff 	.word	0xffc3ffff
 8000f58:	fffe0219 	.word	0xfffe0219
 8000f5c:	dffffc02 	.word	0xdffffc02
 8000f60:	07ffff04 	.word	0x07ffff04
 8000f64:	833fffe7 	.word	0x833fffe7

08000f68 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8000f68:	b5b0      	push	{r4, r5, r7, lr}
 8000f6a:	b086      	sub	sp, #24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	0018      	movs	r0, r3
 8000f7a:	f7ff fe05 	bl	8000b88 <LL_ADC_REG_IsConversionOngoing>
 8000f7e:	1e03      	subs	r3, r0, #0
 8000f80:	d16c      	bne.n	800105c <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	2254      	movs	r2, #84	; 0x54
 8000f86:	5c9b      	ldrb	r3, [r3, r2]
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d101      	bne.n	8000f90 <HAL_ADC_Start_DMA+0x28>
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	e06c      	b.n	800106a <HAL_ADC_Start_DMA+0x102>
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	2254      	movs	r2, #84	; 0x54
 8000f94:	2101      	movs	r1, #1
 8000f96:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	68db      	ldr	r3, [r3, #12]
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	d113      	bne.n	8000fcc <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	0018      	movs	r0, r3
 8000faa:	f7ff fdb9 	bl	8000b20 <LL_ADC_IsEnabled>
 8000fae:	1e03      	subs	r3, r0, #0
 8000fb0:	d004      	beq.n	8000fbc <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	0018      	movs	r0, r3
 8000fb8:	f7ff fda0 	bl	8000afc <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	68da      	ldr	r2, [r3, #12]
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	430a      	orrs	r2, r1
 8000fca:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000fcc:	2517      	movs	r5, #23
 8000fce:	197c      	adds	r4, r7, r5
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	0018      	movs	r0, r3
 8000fd4:	f000 fa46 	bl	8001464 <ADC_Enable>
 8000fd8:	0003      	movs	r3, r0
 8000fda:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000fdc:	002c      	movs	r4, r5
 8000fde:	193b      	adds	r3, r7, r4
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d13e      	bne.n	8001064 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fea:	4a22      	ldr	r2, [pc, #136]	; (8001074 <HAL_ADC_Start_DMA+0x10c>)
 8000fec:	4013      	ands	r3, r2
 8000fee:	2280      	movs	r2, #128	; 0x80
 8000ff0:	0052      	lsls	r2, r2, #1
 8000ff2:	431a      	orrs	r2, r3
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001002:	4a1d      	ldr	r2, [pc, #116]	; (8001078 <HAL_ADC_Start_DMA+0x110>)
 8001004:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800100a:	4a1c      	ldr	r2, [pc, #112]	; (800107c <HAL_ADC_Start_DMA+0x114>)
 800100c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001012:	4a1b      	ldr	r2, [pc, #108]	; (8001080 <HAL_ADC_Start_DMA+0x118>)
 8001014:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	221c      	movs	r2, #28
 800101c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	2254      	movs	r2, #84	; 0x54
 8001022:	2100      	movs	r1, #0
 8001024:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	685a      	ldr	r2, [r3, #4]
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2110      	movs	r1, #16
 8001032:	430a      	orrs	r2, r1
 8001034:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	3340      	adds	r3, #64	; 0x40
 8001040:	0019      	movs	r1, r3
 8001042:	68ba      	ldr	r2, [r7, #8]
 8001044:	193c      	adds	r4, r7, r4
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f000 fdae 	bl	8001ba8 <HAL_DMA_Start_IT>
 800104c:	0003      	movs	r3, r0
 800104e:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	0018      	movs	r0, r3
 8001056:	f7ff fd85 	bl	8000b64 <LL_ADC_REG_StartConversion>
 800105a:	e003      	b.n	8001064 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800105c:	2317      	movs	r3, #23
 800105e:	18fb      	adds	r3, r7, r3
 8001060:	2202      	movs	r2, #2
 8001062:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001064:	2317      	movs	r3, #23
 8001066:	18fb      	adds	r3, r7, r3
 8001068:	781b      	ldrb	r3, [r3, #0]
}
 800106a:	0018      	movs	r0, r3
 800106c:	46bd      	mov	sp, r7
 800106e:	b006      	add	sp, #24
 8001070:	bdb0      	pop	{r4, r5, r7, pc}
 8001072:	46c0      	nop			; (mov r8, r8)
 8001074:	fffff0fe 	.word	0xfffff0fe
 8001078:	0800162d 	.word	0x0800162d
 800107c:	080016f5 	.word	0x080016f5
 8001080:	08001713 	.word	0x08001713

08001084 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800108c:	46c0      	nop			; (mov r8, r8)
 800108e:	46bd      	mov	sp, r7
 8001090:	b002      	add	sp, #8
 8001092:	bd80      	pop	{r7, pc}

08001094 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800109c:	46c0      	nop			; (mov r8, r8)
 800109e:	46bd      	mov	sp, r7
 80010a0:	b002      	add	sp, #8
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80010ac:	46c0      	nop			; (mov r8, r8)
 80010ae:	46bd      	mov	sp, r7
 80010b0:	b002      	add	sp, #8
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010be:	2317      	movs	r3, #23
 80010c0:	18fb      	adds	r3, r7, r3
 80010c2:	2200      	movs	r2, #0
 80010c4:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2254      	movs	r2, #84	; 0x54
 80010ce:	5c9b      	ldrb	r3, [r3, r2]
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d101      	bne.n	80010d8 <HAL_ADC_ConfigChannel+0x24>
 80010d4:	2302      	movs	r3, #2
 80010d6:	e1c0      	b.n	800145a <HAL_ADC_ConfigChannel+0x3a6>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2254      	movs	r2, #84	; 0x54
 80010dc:	2101      	movs	r1, #1
 80010de:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	0018      	movs	r0, r3
 80010e6:	f7ff fd4f 	bl	8000b88 <LL_ADC_REG_IsConversionOngoing>
 80010ea:	1e03      	subs	r3, r0, #0
 80010ec:	d000      	beq.n	80010f0 <HAL_ADC_ConfigChannel+0x3c>
 80010ee:	e1a3      	b.n	8001438 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	2b02      	cmp	r3, #2
 80010f6:	d100      	bne.n	80010fa <HAL_ADC_ConfigChannel+0x46>
 80010f8:	e143      	b.n	8001382 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	691a      	ldr	r2, [r3, #16]
 80010fe:	2380      	movs	r3, #128	; 0x80
 8001100:	061b      	lsls	r3, r3, #24
 8001102:	429a      	cmp	r2, r3
 8001104:	d004      	beq.n	8001110 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800110a:	4ac1      	ldr	r2, [pc, #772]	; (8001410 <HAL_ADC_ConfigChannel+0x35c>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d108      	bne.n	8001122 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	0019      	movs	r1, r3
 800111a:	0010      	movs	r0, r2
 800111c:	f7ff fc75 	bl	8000a0a <LL_ADC_REG_SetSequencerChAdd>
 8001120:	e0c9      	b.n	80012b6 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	211f      	movs	r1, #31
 800112c:	400b      	ands	r3, r1
 800112e:	210f      	movs	r1, #15
 8001130:	4099      	lsls	r1, r3
 8001132:	000b      	movs	r3, r1
 8001134:	43db      	mvns	r3, r3
 8001136:	4013      	ands	r3, r2
 8001138:	0019      	movs	r1, r3
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	035b      	lsls	r3, r3, #13
 8001140:	0b5b      	lsrs	r3, r3, #13
 8001142:	d105      	bne.n	8001150 <HAL_ADC_ConfigChannel+0x9c>
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	0e9b      	lsrs	r3, r3, #26
 800114a:	221f      	movs	r2, #31
 800114c:	4013      	ands	r3, r2
 800114e:	e098      	b.n	8001282 <HAL_ADC_ConfigChannel+0x1ce>
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2201      	movs	r2, #1
 8001156:	4013      	ands	r3, r2
 8001158:	d000      	beq.n	800115c <HAL_ADC_ConfigChannel+0xa8>
 800115a:	e091      	b.n	8001280 <HAL_ADC_ConfigChannel+0x1cc>
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2202      	movs	r2, #2
 8001162:	4013      	ands	r3, r2
 8001164:	d000      	beq.n	8001168 <HAL_ADC_ConfigChannel+0xb4>
 8001166:	e089      	b.n	800127c <HAL_ADC_ConfigChannel+0x1c8>
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2204      	movs	r2, #4
 800116e:	4013      	ands	r3, r2
 8001170:	d000      	beq.n	8001174 <HAL_ADC_ConfigChannel+0xc0>
 8001172:	e081      	b.n	8001278 <HAL_ADC_ConfigChannel+0x1c4>
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2208      	movs	r2, #8
 800117a:	4013      	ands	r3, r2
 800117c:	d000      	beq.n	8001180 <HAL_ADC_ConfigChannel+0xcc>
 800117e:	e079      	b.n	8001274 <HAL_ADC_ConfigChannel+0x1c0>
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2210      	movs	r2, #16
 8001186:	4013      	ands	r3, r2
 8001188:	d000      	beq.n	800118c <HAL_ADC_ConfigChannel+0xd8>
 800118a:	e071      	b.n	8001270 <HAL_ADC_ConfigChannel+0x1bc>
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2220      	movs	r2, #32
 8001192:	4013      	ands	r3, r2
 8001194:	d000      	beq.n	8001198 <HAL_ADC_ConfigChannel+0xe4>
 8001196:	e069      	b.n	800126c <HAL_ADC_ConfigChannel+0x1b8>
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2240      	movs	r2, #64	; 0x40
 800119e:	4013      	ands	r3, r2
 80011a0:	d000      	beq.n	80011a4 <HAL_ADC_ConfigChannel+0xf0>
 80011a2:	e061      	b.n	8001268 <HAL_ADC_ConfigChannel+0x1b4>
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2280      	movs	r2, #128	; 0x80
 80011aa:	4013      	ands	r3, r2
 80011ac:	d000      	beq.n	80011b0 <HAL_ADC_ConfigChannel+0xfc>
 80011ae:	e059      	b.n	8001264 <HAL_ADC_ConfigChannel+0x1b0>
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	2380      	movs	r3, #128	; 0x80
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	4013      	ands	r3, r2
 80011ba:	d151      	bne.n	8001260 <HAL_ADC_ConfigChannel+0x1ac>
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	2380      	movs	r3, #128	; 0x80
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	4013      	ands	r3, r2
 80011c6:	d149      	bne.n	800125c <HAL_ADC_ConfigChannel+0x1a8>
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	2380      	movs	r3, #128	; 0x80
 80011ce:	00db      	lsls	r3, r3, #3
 80011d0:	4013      	ands	r3, r2
 80011d2:	d141      	bne.n	8001258 <HAL_ADC_ConfigChannel+0x1a4>
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	2380      	movs	r3, #128	; 0x80
 80011da:	011b      	lsls	r3, r3, #4
 80011dc:	4013      	ands	r3, r2
 80011de:	d139      	bne.n	8001254 <HAL_ADC_ConfigChannel+0x1a0>
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	2380      	movs	r3, #128	; 0x80
 80011e6:	015b      	lsls	r3, r3, #5
 80011e8:	4013      	ands	r3, r2
 80011ea:	d131      	bne.n	8001250 <HAL_ADC_ConfigChannel+0x19c>
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	2380      	movs	r3, #128	; 0x80
 80011f2:	019b      	lsls	r3, r3, #6
 80011f4:	4013      	ands	r3, r2
 80011f6:	d129      	bne.n	800124c <HAL_ADC_ConfigChannel+0x198>
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	2380      	movs	r3, #128	; 0x80
 80011fe:	01db      	lsls	r3, r3, #7
 8001200:	4013      	ands	r3, r2
 8001202:	d121      	bne.n	8001248 <HAL_ADC_ConfigChannel+0x194>
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	2380      	movs	r3, #128	; 0x80
 800120a:	021b      	lsls	r3, r3, #8
 800120c:	4013      	ands	r3, r2
 800120e:	d119      	bne.n	8001244 <HAL_ADC_ConfigChannel+0x190>
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	2380      	movs	r3, #128	; 0x80
 8001216:	025b      	lsls	r3, r3, #9
 8001218:	4013      	ands	r3, r2
 800121a:	d111      	bne.n	8001240 <HAL_ADC_ConfigChannel+0x18c>
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	2380      	movs	r3, #128	; 0x80
 8001222:	029b      	lsls	r3, r3, #10
 8001224:	4013      	ands	r3, r2
 8001226:	d109      	bne.n	800123c <HAL_ADC_ConfigChannel+0x188>
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	2380      	movs	r3, #128	; 0x80
 800122e:	02db      	lsls	r3, r3, #11
 8001230:	4013      	ands	r3, r2
 8001232:	d001      	beq.n	8001238 <HAL_ADC_ConfigChannel+0x184>
 8001234:	2312      	movs	r3, #18
 8001236:	e024      	b.n	8001282 <HAL_ADC_ConfigChannel+0x1ce>
 8001238:	2300      	movs	r3, #0
 800123a:	e022      	b.n	8001282 <HAL_ADC_ConfigChannel+0x1ce>
 800123c:	2311      	movs	r3, #17
 800123e:	e020      	b.n	8001282 <HAL_ADC_ConfigChannel+0x1ce>
 8001240:	2310      	movs	r3, #16
 8001242:	e01e      	b.n	8001282 <HAL_ADC_ConfigChannel+0x1ce>
 8001244:	230f      	movs	r3, #15
 8001246:	e01c      	b.n	8001282 <HAL_ADC_ConfigChannel+0x1ce>
 8001248:	230e      	movs	r3, #14
 800124a:	e01a      	b.n	8001282 <HAL_ADC_ConfigChannel+0x1ce>
 800124c:	230d      	movs	r3, #13
 800124e:	e018      	b.n	8001282 <HAL_ADC_ConfigChannel+0x1ce>
 8001250:	230c      	movs	r3, #12
 8001252:	e016      	b.n	8001282 <HAL_ADC_ConfigChannel+0x1ce>
 8001254:	230b      	movs	r3, #11
 8001256:	e014      	b.n	8001282 <HAL_ADC_ConfigChannel+0x1ce>
 8001258:	230a      	movs	r3, #10
 800125a:	e012      	b.n	8001282 <HAL_ADC_ConfigChannel+0x1ce>
 800125c:	2309      	movs	r3, #9
 800125e:	e010      	b.n	8001282 <HAL_ADC_ConfigChannel+0x1ce>
 8001260:	2308      	movs	r3, #8
 8001262:	e00e      	b.n	8001282 <HAL_ADC_ConfigChannel+0x1ce>
 8001264:	2307      	movs	r3, #7
 8001266:	e00c      	b.n	8001282 <HAL_ADC_ConfigChannel+0x1ce>
 8001268:	2306      	movs	r3, #6
 800126a:	e00a      	b.n	8001282 <HAL_ADC_ConfigChannel+0x1ce>
 800126c:	2305      	movs	r3, #5
 800126e:	e008      	b.n	8001282 <HAL_ADC_ConfigChannel+0x1ce>
 8001270:	2304      	movs	r3, #4
 8001272:	e006      	b.n	8001282 <HAL_ADC_ConfigChannel+0x1ce>
 8001274:	2303      	movs	r3, #3
 8001276:	e004      	b.n	8001282 <HAL_ADC_ConfigChannel+0x1ce>
 8001278:	2302      	movs	r3, #2
 800127a:	e002      	b.n	8001282 <HAL_ADC_ConfigChannel+0x1ce>
 800127c:	2301      	movs	r3, #1
 800127e:	e000      	b.n	8001282 <HAL_ADC_ConfigChannel+0x1ce>
 8001280:	2300      	movs	r3, #0
 8001282:	683a      	ldr	r2, [r7, #0]
 8001284:	6852      	ldr	r2, [r2, #4]
 8001286:	201f      	movs	r0, #31
 8001288:	4002      	ands	r2, r0
 800128a:	4093      	lsls	r3, r2
 800128c:	000a      	movs	r2, r1
 800128e:	431a      	orrs	r2, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	089b      	lsrs	r3, r3, #2
 800129a:	1c5a      	adds	r2, r3, #1
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	69db      	ldr	r3, [r3, #28]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d808      	bhi.n	80012b6 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6818      	ldr	r0, [r3, #0]
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	6859      	ldr	r1, [r3, #4]
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	001a      	movs	r2, r3
 80012b2:	f7ff fb8a 	bl	80009ca <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6818      	ldr	r0, [r3, #0]
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	6819      	ldr	r1, [r3, #0]
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	001a      	movs	r2, r3
 80012c4:	f7ff fbc4 	bl	8000a50 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	db00      	blt.n	80012d2 <HAL_ADC_ConfigChannel+0x21e>
 80012d0:	e0bc      	b.n	800144c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80012d2:	4b50      	ldr	r3, [pc, #320]	; (8001414 <HAL_ADC_ConfigChannel+0x360>)
 80012d4:	0018      	movs	r0, r3
 80012d6:	f7ff fb3d 	bl	8000954 <LL_ADC_GetCommonPathInternalCh>
 80012da:	0003      	movs	r3, r0
 80012dc:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a4d      	ldr	r2, [pc, #308]	; (8001418 <HAL_ADC_ConfigChannel+0x364>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d122      	bne.n	800132e <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	2380      	movs	r3, #128	; 0x80
 80012ec:	041b      	lsls	r3, r3, #16
 80012ee:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80012f0:	d11d      	bne.n	800132e <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	2280      	movs	r2, #128	; 0x80
 80012f6:	0412      	lsls	r2, r2, #16
 80012f8:	4313      	orrs	r3, r2
 80012fa:	4a46      	ldr	r2, [pc, #280]	; (8001414 <HAL_ADC_ConfigChannel+0x360>)
 80012fc:	0019      	movs	r1, r3
 80012fe:	0010      	movs	r0, r2
 8001300:	f7ff fb14 	bl	800092c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001304:	4b45      	ldr	r3, [pc, #276]	; (800141c <HAL_ADC_ConfigChannel+0x368>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4945      	ldr	r1, [pc, #276]	; (8001420 <HAL_ADC_ConfigChannel+0x36c>)
 800130a:	0018      	movs	r0, r3
 800130c:	f7fe fefa 	bl	8000104 <__udivsi3>
 8001310:	0003      	movs	r3, r0
 8001312:	1c5a      	adds	r2, r3, #1
 8001314:	0013      	movs	r3, r2
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	189b      	adds	r3, r3, r2
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800131e:	e002      	b.n	8001326 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	3b01      	subs	r3, #1
 8001324:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d1f9      	bne.n	8001320 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800132c:	e08e      	b.n	800144c <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a3c      	ldr	r2, [pc, #240]	; (8001424 <HAL_ADC_ConfigChannel+0x370>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d10e      	bne.n	8001356 <HAL_ADC_ConfigChannel+0x2a2>
 8001338:	693a      	ldr	r2, [r7, #16]
 800133a:	2380      	movs	r3, #128	; 0x80
 800133c:	045b      	lsls	r3, r3, #17
 800133e:	4013      	ands	r3, r2
 8001340:	d109      	bne.n	8001356 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	2280      	movs	r2, #128	; 0x80
 8001346:	0452      	lsls	r2, r2, #17
 8001348:	4313      	orrs	r3, r2
 800134a:	4a32      	ldr	r2, [pc, #200]	; (8001414 <HAL_ADC_ConfigChannel+0x360>)
 800134c:	0019      	movs	r1, r3
 800134e:	0010      	movs	r0, r2
 8001350:	f7ff faec 	bl	800092c <LL_ADC_SetCommonPathInternalCh>
 8001354:	e07a      	b.n	800144c <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a33      	ldr	r2, [pc, #204]	; (8001428 <HAL_ADC_ConfigChannel+0x374>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d000      	beq.n	8001362 <HAL_ADC_ConfigChannel+0x2ae>
 8001360:	e074      	b.n	800144c <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	2380      	movs	r3, #128	; 0x80
 8001366:	03db      	lsls	r3, r3, #15
 8001368:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800136a:	d000      	beq.n	800136e <HAL_ADC_ConfigChannel+0x2ba>
 800136c:	e06e      	b.n	800144c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	2280      	movs	r2, #128	; 0x80
 8001372:	03d2      	lsls	r2, r2, #15
 8001374:	4313      	orrs	r3, r2
 8001376:	4a27      	ldr	r2, [pc, #156]	; (8001414 <HAL_ADC_ConfigChannel+0x360>)
 8001378:	0019      	movs	r1, r3
 800137a:	0010      	movs	r0, r2
 800137c:	f7ff fad6 	bl	800092c <LL_ADC_SetCommonPathInternalCh>
 8001380:	e064      	b.n	800144c <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	691a      	ldr	r2, [r3, #16]
 8001386:	2380      	movs	r3, #128	; 0x80
 8001388:	061b      	lsls	r3, r3, #24
 800138a:	429a      	cmp	r2, r3
 800138c:	d004      	beq.n	8001398 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001392:	4a1f      	ldr	r2, [pc, #124]	; (8001410 <HAL_ADC_ConfigChannel+0x35c>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d107      	bne.n	80013a8 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	0019      	movs	r1, r3
 80013a2:	0010      	movs	r0, r2
 80013a4:	f7ff fb42 	bl	8000a2c <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	da4d      	bge.n	800144c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80013b0:	4b18      	ldr	r3, [pc, #96]	; (8001414 <HAL_ADC_ConfigChannel+0x360>)
 80013b2:	0018      	movs	r0, r3
 80013b4:	f7ff face 	bl	8000954 <LL_ADC_GetCommonPathInternalCh>
 80013b8:	0003      	movs	r3, r0
 80013ba:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a15      	ldr	r2, [pc, #84]	; (8001418 <HAL_ADC_ConfigChannel+0x364>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d108      	bne.n	80013d8 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	4a18      	ldr	r2, [pc, #96]	; (800142c <HAL_ADC_ConfigChannel+0x378>)
 80013ca:	4013      	ands	r3, r2
 80013cc:	4a11      	ldr	r2, [pc, #68]	; (8001414 <HAL_ADC_ConfigChannel+0x360>)
 80013ce:	0019      	movs	r1, r3
 80013d0:	0010      	movs	r0, r2
 80013d2:	f7ff faab 	bl	800092c <LL_ADC_SetCommonPathInternalCh>
 80013d6:	e039      	b.n	800144c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a11      	ldr	r2, [pc, #68]	; (8001424 <HAL_ADC_ConfigChannel+0x370>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d108      	bne.n	80013f4 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	4a12      	ldr	r2, [pc, #72]	; (8001430 <HAL_ADC_ConfigChannel+0x37c>)
 80013e6:	4013      	ands	r3, r2
 80013e8:	4a0a      	ldr	r2, [pc, #40]	; (8001414 <HAL_ADC_ConfigChannel+0x360>)
 80013ea:	0019      	movs	r1, r3
 80013ec:	0010      	movs	r0, r2
 80013ee:	f7ff fa9d 	bl	800092c <LL_ADC_SetCommonPathInternalCh>
 80013f2:	e02b      	b.n	800144c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a0b      	ldr	r2, [pc, #44]	; (8001428 <HAL_ADC_ConfigChannel+0x374>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d126      	bne.n	800144c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	4a0c      	ldr	r2, [pc, #48]	; (8001434 <HAL_ADC_ConfigChannel+0x380>)
 8001402:	4013      	ands	r3, r2
 8001404:	4a03      	ldr	r2, [pc, #12]	; (8001414 <HAL_ADC_ConfigChannel+0x360>)
 8001406:	0019      	movs	r1, r3
 8001408:	0010      	movs	r0, r2
 800140a:	f7ff fa8f 	bl	800092c <LL_ADC_SetCommonPathInternalCh>
 800140e:	e01d      	b.n	800144c <HAL_ADC_ConfigChannel+0x398>
 8001410:	80000004 	.word	0x80000004
 8001414:	40012708 	.word	0x40012708
 8001418:	b0001000 	.word	0xb0001000
 800141c:	20000000 	.word	0x20000000
 8001420:	00030d40 	.word	0x00030d40
 8001424:	b8004000 	.word	0xb8004000
 8001428:	b4002000 	.word	0xb4002000
 800142c:	ff7fffff 	.word	0xff7fffff
 8001430:	feffffff 	.word	0xfeffffff
 8001434:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800143c:	2220      	movs	r2, #32
 800143e:	431a      	orrs	r2, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001444:	2317      	movs	r3, #23
 8001446:	18fb      	adds	r3, r7, r3
 8001448:	2201      	movs	r2, #1
 800144a:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2254      	movs	r2, #84	; 0x54
 8001450:	2100      	movs	r1, #0
 8001452:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001454:	2317      	movs	r3, #23
 8001456:	18fb      	adds	r3, r7, r3
 8001458:	781b      	ldrb	r3, [r3, #0]
}
 800145a:	0018      	movs	r0, r3
 800145c:	46bd      	mov	sp, r7
 800145e:	b006      	add	sp, #24
 8001460:	bd80      	pop	{r7, pc}
 8001462:	46c0      	nop			; (mov r8, r8)

08001464 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800146c:	2300      	movs	r3, #0
 800146e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	0018      	movs	r0, r3
 8001476:	f7ff fb53 	bl	8000b20 <LL_ADC_IsEnabled>
 800147a:	1e03      	subs	r3, r0, #0
 800147c:	d000      	beq.n	8001480 <ADC_Enable+0x1c>
 800147e:	e069      	b.n	8001554 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	4a36      	ldr	r2, [pc, #216]	; (8001560 <ADC_Enable+0xfc>)
 8001488:	4013      	ands	r3, r2
 800148a:	d00d      	beq.n	80014a8 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001490:	2210      	movs	r2, #16
 8001492:	431a      	orrs	r2, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800149c:	2201      	movs	r2, #1
 800149e:	431a      	orrs	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80014a4:	2301      	movs	r3, #1
 80014a6:	e056      	b.n	8001556 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	0018      	movs	r0, r3
 80014ae:	f7ff fb13 	bl	8000ad8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80014b2:	4b2c      	ldr	r3, [pc, #176]	; (8001564 <ADC_Enable+0x100>)
 80014b4:	0018      	movs	r0, r3
 80014b6:	f7ff fa4d 	bl	8000954 <LL_ADC_GetCommonPathInternalCh>
 80014ba:	0002      	movs	r2, r0
 80014bc:	2380      	movs	r3, #128	; 0x80
 80014be:	041b      	lsls	r3, r3, #16
 80014c0:	4013      	ands	r3, r2
 80014c2:	d00f      	beq.n	80014e4 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80014c4:	4b28      	ldr	r3, [pc, #160]	; (8001568 <ADC_Enable+0x104>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4928      	ldr	r1, [pc, #160]	; (800156c <ADC_Enable+0x108>)
 80014ca:	0018      	movs	r0, r3
 80014cc:	f7fe fe1a 	bl	8000104 <__udivsi3>
 80014d0:	0003      	movs	r3, r0
 80014d2:	3301      	adds	r3, #1
 80014d4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80014d6:	e002      	b.n	80014de <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	3b01      	subs	r3, #1
 80014dc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d1f9      	bne.n	80014d8 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	7e5b      	ldrb	r3, [r3, #25]
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d033      	beq.n	8001554 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80014ec:	f7ff f9fe 	bl	80008ec <HAL_GetTick>
 80014f0:	0003      	movs	r3, r0
 80014f2:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80014f4:	e027      	b.n	8001546 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	0018      	movs	r0, r3
 80014fc:	f7ff fb10 	bl	8000b20 <LL_ADC_IsEnabled>
 8001500:	1e03      	subs	r3, r0, #0
 8001502:	d104      	bne.n	800150e <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	0018      	movs	r0, r3
 800150a:	f7ff fae5 	bl	8000ad8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800150e:	f7ff f9ed 	bl	80008ec <HAL_GetTick>
 8001512:	0002      	movs	r2, r0
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	2b02      	cmp	r3, #2
 800151a:	d914      	bls.n	8001546 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2201      	movs	r2, #1
 8001524:	4013      	ands	r3, r2
 8001526:	2b01      	cmp	r3, #1
 8001528:	d00d      	beq.n	8001546 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800152e:	2210      	movs	r2, #16
 8001530:	431a      	orrs	r2, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800153a:	2201      	movs	r2, #1
 800153c:	431a      	orrs	r2, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e007      	b.n	8001556 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2201      	movs	r2, #1
 800154e:	4013      	ands	r3, r2
 8001550:	2b01      	cmp	r3, #1
 8001552:	d1d0      	bne.n	80014f6 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001554:	2300      	movs	r3, #0
}
 8001556:	0018      	movs	r0, r3
 8001558:	46bd      	mov	sp, r7
 800155a:	b004      	add	sp, #16
 800155c:	bd80      	pop	{r7, pc}
 800155e:	46c0      	nop			; (mov r8, r8)
 8001560:	80000017 	.word	0x80000017
 8001564:	40012708 	.word	0x40012708
 8001568:	20000000 	.word	0x20000000
 800156c:	00030d40 	.word	0x00030d40

08001570 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	0018      	movs	r0, r3
 800157e:	f7ff fae0 	bl	8000b42 <LL_ADC_IsDisableOngoing>
 8001582:	0003      	movs	r3, r0
 8001584:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	0018      	movs	r0, r3
 800158c:	f7ff fac8 	bl	8000b20 <LL_ADC_IsEnabled>
 8001590:	1e03      	subs	r3, r0, #0
 8001592:	d046      	beq.n	8001622 <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d143      	bne.n	8001622 <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	2205      	movs	r2, #5
 80015a2:	4013      	ands	r3, r2
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d10d      	bne.n	80015c4 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	0018      	movs	r0, r3
 80015ae:	f7ff faa5 	bl	8000afc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2203      	movs	r2, #3
 80015b8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80015ba:	f7ff f997 	bl	80008ec <HAL_GetTick>
 80015be:	0003      	movs	r3, r0
 80015c0:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80015c2:	e028      	b.n	8001616 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c8:	2210      	movs	r2, #16
 80015ca:	431a      	orrs	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015d4:	2201      	movs	r2, #1
 80015d6:	431a      	orrs	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e021      	b.n	8001624 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80015e0:	f7ff f984 	bl	80008ec <HAL_GetTick>
 80015e4:	0002      	movs	r2, r0
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d913      	bls.n	8001616 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	2201      	movs	r2, #1
 80015f6:	4013      	ands	r3, r2
 80015f8:	d00d      	beq.n	8001616 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015fe:	2210      	movs	r2, #16
 8001600:	431a      	orrs	r2, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800160a:	2201      	movs	r2, #1
 800160c:	431a      	orrs	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e006      	b.n	8001624 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	2201      	movs	r2, #1
 800161e:	4013      	ands	r3, r2
 8001620:	d1de      	bne.n	80015e0 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001622:	2300      	movs	r3, #0
}
 8001624:	0018      	movs	r0, r3
 8001626:	46bd      	mov	sp, r7
 8001628:	b004      	add	sp, #16
 800162a:	bd80      	pop	{r7, pc}

0800162c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001638:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800163e:	2250      	movs	r2, #80	; 0x50
 8001640:	4013      	ands	r3, r2
 8001642:	d141      	bne.n	80016c8 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001648:	2280      	movs	r2, #128	; 0x80
 800164a:	0092      	lsls	r2, r2, #2
 800164c:	431a      	orrs	r2, r3
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	0018      	movs	r0, r3
 8001658:	f7ff f9a6 	bl	80009a8 <LL_ADC_REG_IsTriggerSourceSWStart>
 800165c:	1e03      	subs	r3, r0, #0
 800165e:	d02e      	beq.n	80016be <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	7e9b      	ldrb	r3, [r3, #26]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d12a      	bne.n	80016be <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2208      	movs	r2, #8
 8001670:	4013      	ands	r3, r2
 8001672:	2b08      	cmp	r3, #8
 8001674:	d123      	bne.n	80016be <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	0018      	movs	r0, r3
 800167c:	f7ff fa84 	bl	8000b88 <LL_ADC_REG_IsConversionOngoing>
 8001680:	1e03      	subs	r3, r0, #0
 8001682:	d110      	bne.n	80016a6 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	685a      	ldr	r2, [r3, #4]
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	210c      	movs	r1, #12
 8001690:	438a      	bics	r2, r1
 8001692:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001698:	4a15      	ldr	r2, [pc, #84]	; (80016f0 <ADC_DMAConvCplt+0xc4>)
 800169a:	4013      	ands	r3, r2
 800169c:	2201      	movs	r2, #1
 800169e:	431a      	orrs	r2, r3
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	659a      	str	r2, [r3, #88]	; 0x58
 80016a4:	e00b      	b.n	80016be <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016aa:	2220      	movs	r2, #32
 80016ac:	431a      	orrs	r2, r3
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016b6:	2201      	movs	r2, #1
 80016b8:	431a      	orrs	r2, r3
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	0018      	movs	r0, r3
 80016c2:	f7ff fcdf 	bl	8001084 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80016c6:	e00f      	b.n	80016e8 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016cc:	2210      	movs	r2, #16
 80016ce:	4013      	ands	r3, r2
 80016d0:	d004      	beq.n	80016dc <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	0018      	movs	r0, r3
 80016d6:	f7ff fce5 	bl	80010a4 <HAL_ADC_ErrorCallback>
}
 80016da:	e005      	b.n	80016e8 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	0010      	movs	r0, r2
 80016e6:	4798      	blx	r3
}
 80016e8:	46c0      	nop			; (mov r8, r8)
 80016ea:	46bd      	mov	sp, r7
 80016ec:	b004      	add	sp, #16
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	fffffefe 	.word	0xfffffefe

080016f4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001700:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	0018      	movs	r0, r3
 8001706:	f7ff fcc5 	bl	8001094 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800170a:	46c0      	nop			; (mov r8, r8)
 800170c:	46bd      	mov	sp, r7
 800170e:	b004      	add	sp, #16
 8001710:	bd80      	pop	{r7, pc}

08001712 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	b084      	sub	sp, #16
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800171e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001724:	2240      	movs	r2, #64	; 0x40
 8001726:	431a      	orrs	r2, r3
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001730:	2204      	movs	r2, #4
 8001732:	431a      	orrs	r2, r3
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	0018      	movs	r0, r3
 800173c:	f7ff fcb2 	bl	80010a4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001740:	46c0      	nop			; (mov r8, r8)
 8001742:	46bd      	mov	sp, r7
 8001744:	b004      	add	sp, #16
 8001746:	bd80      	pop	{r7, pc}

08001748 <LL_ADC_IsEnabled>:
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	2201      	movs	r2, #1
 8001756:	4013      	ands	r3, r2
 8001758:	2b01      	cmp	r3, #1
 800175a:	d101      	bne.n	8001760 <LL_ADC_IsEnabled+0x18>
 800175c:	2301      	movs	r3, #1
 800175e:	e000      	b.n	8001762 <LL_ADC_IsEnabled+0x1a>
 8001760:	2300      	movs	r3, #0
}
 8001762:	0018      	movs	r0, r3
 8001764:	46bd      	mov	sp, r7
 8001766:	b002      	add	sp, #8
 8001768:	bd80      	pop	{r7, pc}

0800176a <LL_ADC_IsCalibrationOnGoing>:
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b082      	sub	sp, #8
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	0fdb      	lsrs	r3, r3, #31
 8001778:	07da      	lsls	r2, r3, #31
 800177a:	2380      	movs	r3, #128	; 0x80
 800177c:	061b      	lsls	r3, r3, #24
 800177e:	429a      	cmp	r2, r3
 8001780:	d101      	bne.n	8001786 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8001782:	2301      	movs	r3, #1
 8001784:	e000      	b.n	8001788 <LL_ADC_IsCalibrationOnGoing+0x1e>
 8001786:	2300      	movs	r3, #0
}
 8001788:	0018      	movs	r0, r3
 800178a:	46bd      	mov	sp, r7
 800178c:	b002      	add	sp, #8
 800178e:	bd80      	pop	{r7, pc}

08001790 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8001790:	b590      	push	{r4, r7, lr}
 8001792:	b087      	sub	sp, #28
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8001798:	2300      	movs	r3, #0
 800179a:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_adc_dma_transfer; /* Note: Variable not declared as volatile because register read is already declared as volatile */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2254      	movs	r2, #84	; 0x54
 80017a0:	5c9b      	ldrb	r3, [r3, r2]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d101      	bne.n	80017aa <HAL_ADCEx_Calibration_Start+0x1a>
 80017a6:	2302      	movs	r3, #2
 80017a8:	e06c      	b.n	8001884 <HAL_ADCEx_Calibration_Start+0xf4>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2254      	movs	r2, #84	; 0x54
 80017ae:	2101      	movs	r1, #1
 80017b0:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80017b2:	2317      	movs	r3, #23
 80017b4:	18fc      	adds	r4, r7, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	0018      	movs	r0, r3
 80017ba:	f7ff fed9 	bl	8001570 <ADC_Disable>
 80017be:	0003      	movs	r3, r0
 80017c0:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	0018      	movs	r0, r3
 80017c8:	f7ff ffbe 	bl	8001748 <LL_ADC_IsEnabled>
 80017cc:	1e03      	subs	r3, r0, #0
 80017ce:	d14c      	bne.n	800186a <HAL_ADCEx_Calibration_Start+0xda>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d4:	4a2d      	ldr	r2, [pc, #180]	; (800188c <HAL_ADCEx_Calibration_Start+0xfc>)
 80017d6:	4013      	ands	r3, r2
 80017d8:	2202      	movs	r2, #2
 80017da:	431a      	orrs	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	68db      	ldr	r3, [r3, #12]
 80017e6:	2203      	movs	r2, #3
 80017e8:	4013      	ands	r3, r2
 80017ea:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	68da      	ldr	r2, [r3, #12]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2103      	movs	r1, #3
 80017f8:	438a      	bics	r2, r1
 80017fa:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    SET_BIT(hadc->Instance->CR, ADC_CR_ADCAL);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	689a      	ldr	r2, [r3, #8]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2180      	movs	r1, #128	; 0x80
 8001808:	0609      	lsls	r1, r1, #24
 800180a:	430a      	orrs	r2, r1
 800180c:	609a      	str	r2, [r3, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800180e:	e014      	b.n	800183a <HAL_ADCEx_Calibration_Start+0xaa>
    {
      wait_loop_index++;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	3301      	adds	r3, #1
 8001814:	60fb      	str	r3, [r7, #12]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	4a1d      	ldr	r2, [pc, #116]	; (8001890 <HAL_ADCEx_Calibration_Start+0x100>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d90d      	bls.n	800183a <HAL_ADCEx_Calibration_Start+0xaa>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001822:	2212      	movs	r2, #18
 8001824:	4393      	bics	r3, r2
 8001826:	2210      	movs	r2, #16
 8001828:	431a      	orrs	r2, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        __HAL_UNLOCK(hadc);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2254      	movs	r2, #84	; 0x54
 8001832:	2100      	movs	r1, #0
 8001834:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e024      	b.n	8001884 <HAL_ADCEx_Calibration_Start+0xf4>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	0018      	movs	r0, r3
 8001840:	f7ff ff93 	bl	800176a <LL_ADC_IsCalibrationOnGoing>
 8001844:	1e03      	subs	r3, r0, #0
 8001846:	d1e3      	bne.n	8001810 <HAL_ADCEx_Calibration_Start+0x80>
      }
    }

    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	68d9      	ldr	r1, [r3, #12]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	430a      	orrs	r2, r1
 8001856:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800185c:	2203      	movs	r2, #3
 800185e:	4393      	bics	r3, r2
 8001860:	2201      	movs	r2, #1
 8001862:	431a      	orrs	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	659a      	str	r2, [r3, #88]	; 0x58
 8001868:	e005      	b.n	8001876 <HAL_ADCEx_Calibration_Start+0xe6>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800186e:	2210      	movs	r2, #16
 8001870:	431a      	orrs	r2, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2254      	movs	r2, #84	; 0x54
 800187a:	2100      	movs	r1, #0
 800187c:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 800187e:	2317      	movs	r3, #23
 8001880:	18fb      	adds	r3, r7, r3
 8001882:	781b      	ldrb	r3, [r3, #0]
}
 8001884:	0018      	movs	r0, r3
 8001886:	46bd      	mov	sp, r7
 8001888:	b007      	add	sp, #28
 800188a:	bd90      	pop	{r4, r7, pc}
 800188c:	fffffefd 	.word	0xfffffefd
 8001890:	0002f1ff 	.word	0x0002f1ff

08001894 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	0002      	movs	r2, r0
 800189c:	1dfb      	adds	r3, r7, #7
 800189e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80018a0:	1dfb      	adds	r3, r7, #7
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	2b7f      	cmp	r3, #127	; 0x7f
 80018a6:	d809      	bhi.n	80018bc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018a8:	1dfb      	adds	r3, r7, #7
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	001a      	movs	r2, r3
 80018ae:	231f      	movs	r3, #31
 80018b0:	401a      	ands	r2, r3
 80018b2:	4b04      	ldr	r3, [pc, #16]	; (80018c4 <__NVIC_EnableIRQ+0x30>)
 80018b4:	2101      	movs	r1, #1
 80018b6:	4091      	lsls	r1, r2
 80018b8:	000a      	movs	r2, r1
 80018ba:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80018bc:	46c0      	nop			; (mov r8, r8)
 80018be:	46bd      	mov	sp, r7
 80018c0:	b002      	add	sp, #8
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	e000e100 	.word	0xe000e100

080018c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018c8:	b590      	push	{r4, r7, lr}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	0002      	movs	r2, r0
 80018d0:	6039      	str	r1, [r7, #0]
 80018d2:	1dfb      	adds	r3, r7, #7
 80018d4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80018d6:	1dfb      	adds	r3, r7, #7
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	2b7f      	cmp	r3, #127	; 0x7f
 80018dc:	d828      	bhi.n	8001930 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018de:	4a2f      	ldr	r2, [pc, #188]	; (800199c <__NVIC_SetPriority+0xd4>)
 80018e0:	1dfb      	adds	r3, r7, #7
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	b25b      	sxtb	r3, r3
 80018e6:	089b      	lsrs	r3, r3, #2
 80018e8:	33c0      	adds	r3, #192	; 0xc0
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	589b      	ldr	r3, [r3, r2]
 80018ee:	1dfa      	adds	r2, r7, #7
 80018f0:	7812      	ldrb	r2, [r2, #0]
 80018f2:	0011      	movs	r1, r2
 80018f4:	2203      	movs	r2, #3
 80018f6:	400a      	ands	r2, r1
 80018f8:	00d2      	lsls	r2, r2, #3
 80018fa:	21ff      	movs	r1, #255	; 0xff
 80018fc:	4091      	lsls	r1, r2
 80018fe:	000a      	movs	r2, r1
 8001900:	43d2      	mvns	r2, r2
 8001902:	401a      	ands	r2, r3
 8001904:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	019b      	lsls	r3, r3, #6
 800190a:	22ff      	movs	r2, #255	; 0xff
 800190c:	401a      	ands	r2, r3
 800190e:	1dfb      	adds	r3, r7, #7
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	0018      	movs	r0, r3
 8001914:	2303      	movs	r3, #3
 8001916:	4003      	ands	r3, r0
 8001918:	00db      	lsls	r3, r3, #3
 800191a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800191c:	481f      	ldr	r0, [pc, #124]	; (800199c <__NVIC_SetPriority+0xd4>)
 800191e:	1dfb      	adds	r3, r7, #7
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	b25b      	sxtb	r3, r3
 8001924:	089b      	lsrs	r3, r3, #2
 8001926:	430a      	orrs	r2, r1
 8001928:	33c0      	adds	r3, #192	; 0xc0
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800192e:	e031      	b.n	8001994 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001930:	4a1b      	ldr	r2, [pc, #108]	; (80019a0 <__NVIC_SetPriority+0xd8>)
 8001932:	1dfb      	adds	r3, r7, #7
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	0019      	movs	r1, r3
 8001938:	230f      	movs	r3, #15
 800193a:	400b      	ands	r3, r1
 800193c:	3b08      	subs	r3, #8
 800193e:	089b      	lsrs	r3, r3, #2
 8001940:	3306      	adds	r3, #6
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	18d3      	adds	r3, r2, r3
 8001946:	3304      	adds	r3, #4
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	1dfa      	adds	r2, r7, #7
 800194c:	7812      	ldrb	r2, [r2, #0]
 800194e:	0011      	movs	r1, r2
 8001950:	2203      	movs	r2, #3
 8001952:	400a      	ands	r2, r1
 8001954:	00d2      	lsls	r2, r2, #3
 8001956:	21ff      	movs	r1, #255	; 0xff
 8001958:	4091      	lsls	r1, r2
 800195a:	000a      	movs	r2, r1
 800195c:	43d2      	mvns	r2, r2
 800195e:	401a      	ands	r2, r3
 8001960:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	019b      	lsls	r3, r3, #6
 8001966:	22ff      	movs	r2, #255	; 0xff
 8001968:	401a      	ands	r2, r3
 800196a:	1dfb      	adds	r3, r7, #7
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	0018      	movs	r0, r3
 8001970:	2303      	movs	r3, #3
 8001972:	4003      	ands	r3, r0
 8001974:	00db      	lsls	r3, r3, #3
 8001976:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001978:	4809      	ldr	r0, [pc, #36]	; (80019a0 <__NVIC_SetPriority+0xd8>)
 800197a:	1dfb      	adds	r3, r7, #7
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	001c      	movs	r4, r3
 8001980:	230f      	movs	r3, #15
 8001982:	4023      	ands	r3, r4
 8001984:	3b08      	subs	r3, #8
 8001986:	089b      	lsrs	r3, r3, #2
 8001988:	430a      	orrs	r2, r1
 800198a:	3306      	adds	r3, #6
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	18c3      	adds	r3, r0, r3
 8001990:	3304      	adds	r3, #4
 8001992:	601a      	str	r2, [r3, #0]
}
 8001994:	46c0      	nop			; (mov r8, r8)
 8001996:	46bd      	mov	sp, r7
 8001998:	b003      	add	sp, #12
 800199a:	bd90      	pop	{r4, r7, pc}
 800199c:	e000e100 	.word	0xe000e100
 80019a0:	e000ed00 	.word	0xe000ed00

080019a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	1e5a      	subs	r2, r3, #1
 80019b0:	2380      	movs	r3, #128	; 0x80
 80019b2:	045b      	lsls	r3, r3, #17
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d301      	bcc.n	80019bc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019b8:	2301      	movs	r3, #1
 80019ba:	e010      	b.n	80019de <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019bc:	4b0a      	ldr	r3, [pc, #40]	; (80019e8 <SysTick_Config+0x44>)
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	3a01      	subs	r2, #1
 80019c2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019c4:	2301      	movs	r3, #1
 80019c6:	425b      	negs	r3, r3
 80019c8:	2103      	movs	r1, #3
 80019ca:	0018      	movs	r0, r3
 80019cc:	f7ff ff7c 	bl	80018c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019d0:	4b05      	ldr	r3, [pc, #20]	; (80019e8 <SysTick_Config+0x44>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019d6:	4b04      	ldr	r3, [pc, #16]	; (80019e8 <SysTick_Config+0x44>)
 80019d8:	2207      	movs	r2, #7
 80019da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019dc:	2300      	movs	r3, #0
}
 80019de:	0018      	movs	r0, r3
 80019e0:	46bd      	mov	sp, r7
 80019e2:	b002      	add	sp, #8
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	46c0      	nop			; (mov r8, r8)
 80019e8:	e000e010 	.word	0xe000e010

080019ec <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60b9      	str	r1, [r7, #8]
 80019f4:	607a      	str	r2, [r7, #4]
 80019f6:	210f      	movs	r1, #15
 80019f8:	187b      	adds	r3, r7, r1
 80019fa:	1c02      	adds	r2, r0, #0
 80019fc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80019fe:	68ba      	ldr	r2, [r7, #8]
 8001a00:	187b      	adds	r3, r7, r1
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	b25b      	sxtb	r3, r3
 8001a06:	0011      	movs	r1, r2
 8001a08:	0018      	movs	r0, r3
 8001a0a:	f7ff ff5d 	bl	80018c8 <__NVIC_SetPriority>
}
 8001a0e:	46c0      	nop			; (mov r8, r8)
 8001a10:	46bd      	mov	sp, r7
 8001a12:	b004      	add	sp, #16
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b082      	sub	sp, #8
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	0002      	movs	r2, r0
 8001a1e:	1dfb      	adds	r3, r7, #7
 8001a20:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a22:	1dfb      	adds	r3, r7, #7
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	b25b      	sxtb	r3, r3
 8001a28:	0018      	movs	r0, r3
 8001a2a:	f7ff ff33 	bl	8001894 <__NVIC_EnableIRQ>
}
 8001a2e:	46c0      	nop			; (mov r8, r8)
 8001a30:	46bd      	mov	sp, r7
 8001a32:	b002      	add	sp, #8
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b082      	sub	sp, #8
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	0018      	movs	r0, r3
 8001a42:	f7ff ffaf 	bl	80019a4 <SysTick_Config>
 8001a46:	0003      	movs	r3, r0
}
 8001a48:	0018      	movs	r0, r3
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	b002      	add	sp, #8
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d101      	bne.n	8001a62 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e091      	b.n	8001b86 <HAL_DMA_Init+0x136>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
#if defined(DMA2)
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	001a      	movs	r2, r3
 8001a68:	4b49      	ldr	r3, [pc, #292]	; (8001b90 <HAL_DMA_Init+0x140>)
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d810      	bhi.n	8001a90 <HAL_DMA_Init+0x40>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a48      	ldr	r2, [pc, #288]	; (8001b94 <HAL_DMA_Init+0x144>)
 8001a74:	4694      	mov	ip, r2
 8001a76:	4463      	add	r3, ip
 8001a78:	2114      	movs	r1, #20
 8001a7a:	0018      	movs	r0, r3
 8001a7c:	f7fe fb42 	bl	8000104 <__udivsi3>
 8001a80:	0003      	movs	r3, r0
 8001a82:	009a      	lsls	r2, r3, #2
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	4a43      	ldr	r2, [pc, #268]	; (8001b98 <HAL_DMA_Init+0x148>)
 8001a8c:	641a      	str	r2, [r3, #64]	; 0x40
 8001a8e:	e00f      	b.n	8001ab0 <HAL_DMA_Init+0x60>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a41      	ldr	r2, [pc, #260]	; (8001b9c <HAL_DMA_Init+0x14c>)
 8001a96:	4694      	mov	ip, r2
 8001a98:	4463      	add	r3, ip
 8001a9a:	2114      	movs	r1, #20
 8001a9c:	0018      	movs	r0, r3
 8001a9e:	f7fe fb31 	bl	8000104 <__udivsi3>
 8001aa2:	0003      	movs	r3, r0
 8001aa4:	009a      	lsls	r2, r3, #2
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a3c      	ldr	r2, [pc, #240]	; (8001ba0 <HAL_DMA_Init+0x150>)
 8001aae:	641a      	str	r2, [r3, #64]	; 0x40
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2225      	movs	r2, #37	; 0x25
 8001ab4:	2102      	movs	r1, #2
 8001ab6:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4938      	ldr	r1, [pc, #224]	; (8001ba4 <HAL_DMA_Init+0x154>)
 8001ac4:	400a      	ands	r2, r1
 8001ac6:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	6819      	ldr	r1, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	689a      	ldr	r2, [r3, #8]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	431a      	orrs	r2, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	691b      	ldr	r3, [r3, #16]
 8001adc:	431a      	orrs	r2, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	695b      	ldr	r3, [r3, #20]
 8001ae2:	431a      	orrs	r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	431a      	orrs	r2, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	69db      	ldr	r3, [r3, #28]
 8001aee:	431a      	orrs	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6a1b      	ldr	r3, [r3, #32]
 8001af4:	431a      	orrs	r2, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	430a      	orrs	r2, r1
 8001afc:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	0018      	movs	r0, r3
 8001b02:	f000 f9d7 	bl	8001eb4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	689a      	ldr	r2, [r3, #8]
 8001b0a:	2380      	movs	r3, #128	; 0x80
 8001b0c:	01db      	lsls	r3, r3, #7
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d102      	bne.n	8001b18 <HAL_DMA_Init+0xc8>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685a      	ldr	r2, [r3, #4]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b20:	217f      	movs	r1, #127	; 0x7f
 8001b22:	400a      	ands	r2, r1
 8001b24:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001b2e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d011      	beq.n	8001b5c <HAL_DMA_Init+0x10c>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	2b04      	cmp	r3, #4
 8001b3e:	d80d      	bhi.n	8001b5c <HAL_DMA_Init+0x10c>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	0018      	movs	r0, r3
 8001b44:	f000 fa00 	bl	8001f48 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001b58:	605a      	str	r2, [r3, #4]
 8001b5a:	e008      	b.n	8001b6e <HAL_DMA_Init+0x11e>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2225      	movs	r2, #37	; 0x25
 8001b78:	2101      	movs	r1, #1
 8001b7a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2224      	movs	r2, #36	; 0x24
 8001b80:	2100      	movs	r1, #0
 8001b82:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	0018      	movs	r0, r3
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	b002      	add	sp, #8
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	46c0      	nop			; (mov r8, r8)
 8001b90:	40020407 	.word	0x40020407
 8001b94:	bffdfff8 	.word	0xbffdfff8
 8001b98:	40020000 	.word	0x40020000
 8001b9c:	bffdfbf8 	.word	0xbffdfbf8
 8001ba0:	40020400 	.word	0x40020400
 8001ba4:	ffff800f 	.word	0xffff800f

08001ba8 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	607a      	str	r2, [r7, #4]
 8001bb4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bb6:	2317      	movs	r3, #23
 8001bb8:	18fb      	adds	r3, r7, r3
 8001bba:	2200      	movs	r2, #0
 8001bbc:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2224      	movs	r2, #36	; 0x24
 8001bc2:	5c9b      	ldrb	r3, [r3, r2]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d101      	bne.n	8001bcc <HAL_DMA_Start_IT+0x24>
 8001bc8:	2302      	movs	r3, #2
 8001bca:	e06f      	b.n	8001cac <HAL_DMA_Start_IT+0x104>
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2224      	movs	r2, #36	; 0x24
 8001bd0:	2101      	movs	r1, #1
 8001bd2:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2225      	movs	r2, #37	; 0x25
 8001bd8:	5c9b      	ldrb	r3, [r3, r2]
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d157      	bne.n	8001c90 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2225      	movs	r2, #37	; 0x25
 8001be4:	2102      	movs	r1, #2
 8001be6:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2200      	movs	r2, #0
 8001bec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2101      	movs	r1, #1
 8001bfa:	438a      	bics	r2, r1
 8001bfc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	68b9      	ldr	r1, [r7, #8]
 8001c04:	68f8      	ldr	r0, [r7, #12]
 8001c06:	f000 f919 	bl	8001e3c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d008      	beq.n	8001c24 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	210e      	movs	r1, #14
 8001c1e:	430a      	orrs	r2, r1
 8001c20:	601a      	str	r2, [r3, #0]
 8001c22:	e00f      	b.n	8001c44 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2104      	movs	r1, #4
 8001c30:	438a      	bics	r2, r1
 8001c32:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	210a      	movs	r1, #10
 8001c40:	430a      	orrs	r2, r1
 8001c42:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	2380      	movs	r3, #128	; 0x80
 8001c4c:	025b      	lsls	r3, r3, #9
 8001c4e:	4013      	ands	r3, r2
 8001c50:	d008      	beq.n	8001c64 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c5c:	2180      	movs	r1, #128	; 0x80
 8001c5e:	0049      	lsls	r1, r1, #1
 8001c60:	430a      	orrs	r2, r1
 8001c62:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d008      	beq.n	8001c7e <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c76:	2180      	movs	r1, #128	; 0x80
 8001c78:	0049      	lsls	r1, r1, #1
 8001c7a:	430a      	orrs	r2, r1
 8001c7c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2101      	movs	r1, #1
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	e00a      	b.n	8001ca6 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2280      	movs	r2, #128	; 0x80
 8001c94:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2224      	movs	r2, #36	; 0x24
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8001c9e:	2317      	movs	r3, #23
 8001ca0:	18fb      	adds	r3, r7, r3
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8001ca6:	2317      	movs	r3, #23
 8001ca8:	18fb      	adds	r3, r7, r3
 8001caa:	781b      	ldrb	r3, [r3, #0]
}
 8001cac:	0018      	movs	r0, r3
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	b006      	add	sp, #24
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	60fb      	str	r3, [r7, #12]
#else
  uint32_t flag_it = DMA1->ISR;
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd0:	221c      	movs	r2, #28
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	2204      	movs	r2, #4
 8001cd6:	409a      	lsls	r2, r3
 8001cd8:	0013      	movs	r3, r2
 8001cda:	68fa      	ldr	r2, [r7, #12]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	d026      	beq.n	8001d2e <HAL_DMA_IRQHandler+0x7a>
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	2204      	movs	r2, #4
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	d022      	beq.n	8001d2e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2220      	movs	r2, #32
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	d107      	bne.n	8001d04 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2104      	movs	r1, #4
 8001d00:	438a      	bics	r2, r1
 8001d02:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d08:	221c      	movs	r2, #28
 8001d0a:	401a      	ands	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d10:	2104      	movs	r1, #4
 8001d12:	4091      	lsls	r1, r2
 8001d14:	000a      	movs	r2, r1
 8001d16:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d100      	bne.n	8001d22 <HAL_DMA_IRQHandler+0x6e>
 8001d20:	e080      	b.n	8001e24 <HAL_DMA_IRQHandler+0x170>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	0010      	movs	r0, r2
 8001d2a:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001d2c:	e07a      	b.n	8001e24 <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d32:	221c      	movs	r2, #28
 8001d34:	4013      	ands	r3, r2
 8001d36:	2202      	movs	r2, #2
 8001d38:	409a      	lsls	r2, r3
 8001d3a:	0013      	movs	r3, r2
 8001d3c:	68fa      	ldr	r2, [r7, #12]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	d03c      	beq.n	8001dbc <HAL_DMA_IRQHandler+0x108>
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	2202      	movs	r2, #2
 8001d46:	4013      	ands	r3, r2
 8001d48:	d038      	beq.n	8001dbc <HAL_DMA_IRQHandler+0x108>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2220      	movs	r2, #32
 8001d52:	4013      	ands	r3, r2
 8001d54:	d10b      	bne.n	8001d6e <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	210a      	movs	r1, #10
 8001d62:	438a      	bics	r2, r1
 8001d64:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2225      	movs	r2, #37	; 0x25
 8001d6a:	2101      	movs	r1, #1
 8001d6c:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	001a      	movs	r2, r3
 8001d74:	4b2e      	ldr	r3, [pc, #184]	; (8001e30 <HAL_DMA_IRQHandler+0x17c>)
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d909      	bls.n	8001d8e <HAL_DMA_IRQHandler+0xda>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7e:	221c      	movs	r2, #28
 8001d80:	401a      	ands	r2, r3
 8001d82:	4b2c      	ldr	r3, [pc, #176]	; (8001e34 <HAL_DMA_IRQHandler+0x180>)
 8001d84:	2102      	movs	r1, #2
 8001d86:	4091      	lsls	r1, r2
 8001d88:	000a      	movs	r2, r1
 8001d8a:	605a      	str	r2, [r3, #4]
 8001d8c:	e008      	b.n	8001da0 <HAL_DMA_IRQHandler+0xec>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d92:	221c      	movs	r2, #28
 8001d94:	401a      	ands	r2, r3
 8001d96:	4b28      	ldr	r3, [pc, #160]	; (8001e38 <HAL_DMA_IRQHandler+0x184>)
 8001d98:	2102      	movs	r1, #2
 8001d9a:	4091      	lsls	r1, r2
 8001d9c:	000a      	movs	r2, r1
 8001d9e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2224      	movs	r2, #36	; 0x24
 8001da4:	2100      	movs	r1, #0
 8001da6:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d039      	beq.n	8001e24 <HAL_DMA_IRQHandler+0x170>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	0010      	movs	r0, r2
 8001db8:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8001dba:	e033      	b.n	8001e24 <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc0:	221c      	movs	r2, #28
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	2208      	movs	r2, #8
 8001dc6:	409a      	lsls	r2, r3
 8001dc8:	0013      	movs	r3, r2
 8001dca:	68fa      	ldr	r2, [r7, #12]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	d02a      	beq.n	8001e26 <HAL_DMA_IRQHandler+0x172>
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	2208      	movs	r2, #8
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	d026      	beq.n	8001e26 <HAL_DMA_IRQHandler+0x172>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	210e      	movs	r1, #14
 8001de4:	438a      	bics	r2, r1
 8001de6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dec:	221c      	movs	r2, #28
 8001dee:	401a      	ands	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df4:	2101      	movs	r1, #1
 8001df6:	4091      	lsls	r1, r2
 8001df8:	000a      	movs	r2, r1
 8001dfa:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2225      	movs	r2, #37	; 0x25
 8001e06:	2101      	movs	r1, #1
 8001e08:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2224      	movs	r2, #36	; 0x24
 8001e0e:	2100      	movs	r1, #0
 8001e10:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d005      	beq.n	8001e26 <HAL_DMA_IRQHandler+0x172>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	0010      	movs	r0, r2
 8001e22:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001e24:	46c0      	nop			; (mov r8, r8)
 8001e26:	46c0      	nop			; (mov r8, r8)
}
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	b004      	add	sp, #16
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	46c0      	nop			; (mov r8, r8)
 8001e30:	40020080 	.word	0x40020080
 8001e34:	40020400 	.word	0x40020400
 8001e38:	40020000 	.word	0x40020000

08001e3c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	60f8      	str	r0, [r7, #12]
 8001e44:	60b9      	str	r1, [r7, #8]
 8001e46:	607a      	str	r2, [r7, #4]
 8001e48:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e4e:	68fa      	ldr	r2, [r7, #12]
 8001e50:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001e52:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d004      	beq.n	8001e66 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e60:	68fa      	ldr	r2, [r7, #12]
 8001e62:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001e64:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6a:	221c      	movs	r2, #28
 8001e6c:	401a      	ands	r2, r3
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e72:	2101      	movs	r1, #1
 8001e74:	4091      	lsls	r1, r2
 8001e76:	000a      	movs	r2, r1
 8001e78:	605a      	str	r2, [r3, #4]
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	683a      	ldr	r2, [r7, #0]
 8001e80:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	2b10      	cmp	r3, #16
 8001e88:	d108      	bne.n	8001e9c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	68ba      	ldr	r2, [r7, #8]
 8001e98:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001e9a:	e007      	b.n	8001eac <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	68ba      	ldr	r2, [r7, #8]
 8001ea2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	60da      	str	r2, [r3, #12]
}
 8001eac:	46c0      	nop			; (mov r8, r8)
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	b004      	add	sp, #16
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

#if defined(DMA2)
  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	001a      	movs	r2, r3
 8001ec2:	4b1d      	ldr	r3, [pc, #116]	; (8001f38 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d814      	bhi.n	8001ef2 <DMA_CalcDMAMUXChannelBaseAndMask+0x3e>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ecc:	089b      	lsrs	r3, r3, #2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	4a1a      	ldr	r2, [pc, #104]	; (8001f3c <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8001ed2:	189a      	adds	r2, r3, r2
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	649a      	str	r2, [r3, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	001a      	movs	r2, r3
 8001ede:	23ff      	movs	r3, #255	; 0xff
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	3b08      	subs	r3, #8
 8001ee4:	2114      	movs	r1, #20
 8001ee6:	0018      	movs	r0, r3
 8001ee8:	f7fe f90c 	bl	8000104 <__udivsi3>
 8001eec:	0003      	movs	r3, r0
 8001eee:	60fb      	str	r3, [r7, #12]
 8001ef0:	e014      	b.n	8001f1c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef6:	089b      	lsrs	r3, r3, #2
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	4a11      	ldr	r2, [pc, #68]	; (8001f40 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8001efc:	189a      	adds	r2, r3, r2
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	649a      	str	r2, [r3, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	001a      	movs	r2, r3
 8001f08:	23ff      	movs	r3, #255	; 0xff
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	3b08      	subs	r3, #8
 8001f0e:	2114      	movs	r1, #20
 8001f10:	0018      	movs	r0, r3
 8001f12:	f7fe f8f7 	bl	8000104 <__udivsi3>
 8001f16:	0003      	movs	r3, r0
 8001f18:	3307      	adds	r3, #7
 8001f1a:	60fb      	str	r3, [r7, #12]
  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	4a09      	ldr	r2, [pc, #36]	; (8001f44 <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 8001f20:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	221f      	movs	r2, #31
 8001f26:	4013      	ands	r3, r2
 8001f28:	2201      	movs	r2, #1
 8001f2a:	409a      	lsls	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001f30:	46c0      	nop			; (mov r8, r8)
 8001f32:	46bd      	mov	sp, r7
 8001f34:	b004      	add	sp, #16
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	40020407 	.word	0x40020407
 8001f3c:	40020800 	.word	0x40020800
 8001f40:	4002081c 	.word	0x4002081c
 8001f44:	40020880 	.word	0x40020880

08001f48 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	227f      	movs	r2, #127	; 0x7f
 8001f56:	4013      	ands	r3, r2
 8001f58:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	4a0a      	ldr	r2, [pc, #40]	; (8001f88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001f5e:	4694      	mov	ip, r2
 8001f60:	4463      	add	r3, ip
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	001a      	movs	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a07      	ldr	r2, [pc, #28]	; (8001f8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001f6e:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	3b01      	subs	r3, #1
 8001f74:	2203      	movs	r2, #3
 8001f76:	4013      	ands	r3, r2
 8001f78:	2201      	movs	r2, #1
 8001f7a:	409a      	lsls	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001f80:	46c0      	nop			; (mov r8, r8)
 8001f82:	46bd      	mov	sp, r7
 8001f84:	b004      	add	sp, #16
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	1000823f 	.word	0x1000823f
 8001f8c:	40020940 	.word	0x40020940

08001f90 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001f98:	4b19      	ldr	r3, [pc, #100]	; (8002000 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a19      	ldr	r2, [pc, #100]	; (8002004 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	0019      	movs	r1, r3
 8001fa2:	4b17      	ldr	r3, [pc, #92]	; (8002000 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	2380      	movs	r3, #128	; 0x80
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d11f      	bne.n	8001ff4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001fb4:	4b14      	ldr	r3, [pc, #80]	; (8002008 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	0013      	movs	r3, r2
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	189b      	adds	r3, r3, r2
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	4912      	ldr	r1, [pc, #72]	; (800200c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001fc2:	0018      	movs	r0, r3
 8001fc4:	f7fe f89e 	bl	8000104 <__udivsi3>
 8001fc8:	0003      	movs	r3, r0
 8001fca:	3301      	adds	r3, #1
 8001fcc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fce:	e008      	b.n	8001fe2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d003      	beq.n	8001fde <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	3b01      	subs	r3, #1
 8001fda:	60fb      	str	r3, [r7, #12]
 8001fdc:	e001      	b.n	8001fe2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e009      	b.n	8001ff6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fe2:	4b07      	ldr	r3, [pc, #28]	; (8002000 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001fe4:	695a      	ldr	r2, [r3, #20]
 8001fe6:	2380      	movs	r3, #128	; 0x80
 8001fe8:	00db      	lsls	r3, r3, #3
 8001fea:	401a      	ands	r2, r3
 8001fec:	2380      	movs	r3, #128	; 0x80
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d0ed      	beq.n	8001fd0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	0018      	movs	r0, r3
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	b004      	add	sp, #16
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	46c0      	nop			; (mov r8, r8)
 8002000:	40007000 	.word	0x40007000
 8002004:	fffff9ff 	.word	0xfffff9ff
 8002008:	20000000 	.word	0x20000000
 800200c:	000f4240 	.word	0x000f4240

08002010 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b088      	sub	sp, #32
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d102      	bne.n	8002024 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	f000 fb56 	bl	80026d0 <HAL_RCC_OscConfig+0x6c0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2201      	movs	r2, #1
 800202a:	4013      	ands	r3, r2
 800202c:	d100      	bne.n	8002030 <HAL_RCC_OscConfig+0x20>
 800202e:	e07d      	b.n	800212c <HAL_RCC_OscConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002030:	4bc3      	ldr	r3, [pc, #780]	; (8002340 <HAL_RCC_OscConfig+0x330>)
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	2238      	movs	r2, #56	; 0x38
 8002036:	4013      	ands	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800203a:	4bc1      	ldr	r3, [pc, #772]	; (8002340 <HAL_RCC_OscConfig+0x330>)
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	2203      	movs	r2, #3
 8002040:	4013      	ands	r3, r2
 8002042:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	2b10      	cmp	r3, #16
 8002048:	d102      	bne.n	8002050 <HAL_RCC_OscConfig+0x40>
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	2b03      	cmp	r3, #3
 800204e:	d002      	beq.n	8002056 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002050:	69bb      	ldr	r3, [r7, #24]
 8002052:	2b08      	cmp	r3, #8
 8002054:	d10c      	bne.n	8002070 <HAL_RCC_OscConfig+0x60>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002056:	4bba      	ldr	r3, [pc, #744]	; (8002340 <HAL_RCC_OscConfig+0x330>)
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	2380      	movs	r3, #128	; 0x80
 800205c:	029b      	lsls	r3, r3, #10
 800205e:	4013      	ands	r3, r2
 8002060:	d063      	beq.n	800212a <HAL_RCC_OscConfig+0x11a>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d15f      	bne.n	800212a <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	f000 fb30 	bl	80026d0 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685a      	ldr	r2, [r3, #4]
 8002074:	2380      	movs	r3, #128	; 0x80
 8002076:	025b      	lsls	r3, r3, #9
 8002078:	429a      	cmp	r2, r3
 800207a:	d107      	bne.n	800208c <HAL_RCC_OscConfig+0x7c>
 800207c:	4bb0      	ldr	r3, [pc, #704]	; (8002340 <HAL_RCC_OscConfig+0x330>)
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	4baf      	ldr	r3, [pc, #700]	; (8002340 <HAL_RCC_OscConfig+0x330>)
 8002082:	2180      	movs	r1, #128	; 0x80
 8002084:	0249      	lsls	r1, r1, #9
 8002086:	430a      	orrs	r2, r1
 8002088:	601a      	str	r2, [r3, #0]
 800208a:	e020      	b.n	80020ce <HAL_RCC_OscConfig+0xbe>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685a      	ldr	r2, [r3, #4]
 8002090:	23a0      	movs	r3, #160	; 0xa0
 8002092:	02db      	lsls	r3, r3, #11
 8002094:	429a      	cmp	r2, r3
 8002096:	d10e      	bne.n	80020b6 <HAL_RCC_OscConfig+0xa6>
 8002098:	4ba9      	ldr	r3, [pc, #676]	; (8002340 <HAL_RCC_OscConfig+0x330>)
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	4ba8      	ldr	r3, [pc, #672]	; (8002340 <HAL_RCC_OscConfig+0x330>)
 800209e:	2180      	movs	r1, #128	; 0x80
 80020a0:	02c9      	lsls	r1, r1, #11
 80020a2:	430a      	orrs	r2, r1
 80020a4:	601a      	str	r2, [r3, #0]
 80020a6:	4ba6      	ldr	r3, [pc, #664]	; (8002340 <HAL_RCC_OscConfig+0x330>)
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	4ba5      	ldr	r3, [pc, #660]	; (8002340 <HAL_RCC_OscConfig+0x330>)
 80020ac:	2180      	movs	r1, #128	; 0x80
 80020ae:	0249      	lsls	r1, r1, #9
 80020b0:	430a      	orrs	r2, r1
 80020b2:	601a      	str	r2, [r3, #0]
 80020b4:	e00b      	b.n	80020ce <HAL_RCC_OscConfig+0xbe>
 80020b6:	4ba2      	ldr	r3, [pc, #648]	; (8002340 <HAL_RCC_OscConfig+0x330>)
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	4ba1      	ldr	r3, [pc, #644]	; (8002340 <HAL_RCC_OscConfig+0x330>)
 80020bc:	49a1      	ldr	r1, [pc, #644]	; (8002344 <HAL_RCC_OscConfig+0x334>)
 80020be:	400a      	ands	r2, r1
 80020c0:	601a      	str	r2, [r3, #0]
 80020c2:	4b9f      	ldr	r3, [pc, #636]	; (8002340 <HAL_RCC_OscConfig+0x330>)
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	4b9e      	ldr	r3, [pc, #632]	; (8002340 <HAL_RCC_OscConfig+0x330>)
 80020c8:	499f      	ldr	r1, [pc, #636]	; (8002348 <HAL_RCC_OscConfig+0x338>)
 80020ca:	400a      	ands	r2, r1
 80020cc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d014      	beq.n	8002100 <HAL_RCC_OscConfig+0xf0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d6:	f7fe fc09 	bl	80008ec <HAL_GetTick>
 80020da:	0003      	movs	r3, r0
 80020dc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020de:	e008      	b.n	80020f2 <HAL_RCC_OscConfig+0xe2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020e0:	f7fe fc04 	bl	80008ec <HAL_GetTick>
 80020e4:	0002      	movs	r2, r0
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b64      	cmp	r3, #100	; 0x64
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0xe2>
          {
            return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e2ee      	b.n	80026d0 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020f2:	4b93      	ldr	r3, [pc, #588]	; (8002340 <HAL_RCC_OscConfig+0x330>)
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	2380      	movs	r3, #128	; 0x80
 80020f8:	029b      	lsls	r3, r3, #10
 80020fa:	4013      	ands	r3, r2
 80020fc:	d0f0      	beq.n	80020e0 <HAL_RCC_OscConfig+0xd0>
 80020fe:	e015      	b.n	800212c <HAL_RCC_OscConfig+0x11c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002100:	f7fe fbf4 	bl	80008ec <HAL_GetTick>
 8002104:	0003      	movs	r3, r0
 8002106:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002108:	e008      	b.n	800211c <HAL_RCC_OscConfig+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800210a:	f7fe fbef 	bl	80008ec <HAL_GetTick>
 800210e:	0002      	movs	r2, r0
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b64      	cmp	r3, #100	; 0x64
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0x10c>
          {
            return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e2d9      	b.n	80026d0 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800211c:	4b88      	ldr	r3, [pc, #544]	; (8002340 <HAL_RCC_OscConfig+0x330>)
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	2380      	movs	r3, #128	; 0x80
 8002122:	029b      	lsls	r3, r3, #10
 8002124:	4013      	ands	r3, r2
 8002126:	d1f0      	bne.n	800210a <HAL_RCC_OscConfig+0xfa>
 8002128:	e000      	b.n	800212c <HAL_RCC_OscConfig+0x11c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800212a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2202      	movs	r2, #2
 8002132:	4013      	ands	r3, r2
 8002134:	d100      	bne.n	8002138 <HAL_RCC_OscConfig+0x128>
 8002136:	e099      	b.n	800226c <HAL_RCC_OscConfig+0x25c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002138:	4b81      	ldr	r3, [pc, #516]	; (8002340 <HAL_RCC_OscConfig+0x330>)
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	2238      	movs	r2, #56	; 0x38
 800213e:	4013      	ands	r3, r2
 8002140:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002142:	4b7f      	ldr	r3, [pc, #508]	; (8002340 <HAL_RCC_OscConfig+0x330>)
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	2203      	movs	r2, #3
 8002148:	4013      	ands	r3, r2
 800214a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	2b10      	cmp	r3, #16
 8002150:	d102      	bne.n	8002158 <HAL_RCC_OscConfig+0x148>
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	2b02      	cmp	r3, #2
 8002156:	d002      	beq.n	800215e <HAL_RCC_OscConfig+0x14e>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d135      	bne.n	80021ca <HAL_RCC_OscConfig+0x1ba>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800215e:	4b78      	ldr	r3, [pc, #480]	; (8002340 <HAL_RCC_OscConfig+0x330>)
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	2380      	movs	r3, #128	; 0x80
 8002164:	00db      	lsls	r3, r3, #3
 8002166:	4013      	ands	r3, r2
 8002168:	d005      	beq.n	8002176 <HAL_RCC_OscConfig+0x166>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d101      	bne.n	8002176 <HAL_RCC_OscConfig+0x166>
      {
        return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e2ac      	b.n	80026d0 <HAL_RCC_OscConfig+0x6c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002176:	4b72      	ldr	r3, [pc, #456]	; (8002340 <HAL_RCC_OscConfig+0x330>)
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	4a74      	ldr	r2, [pc, #464]	; (800234c <HAL_RCC_OscConfig+0x33c>)
 800217c:	4013      	ands	r3, r2
 800217e:	0019      	movs	r1, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	695b      	ldr	r3, [r3, #20]
 8002184:	021a      	lsls	r2, r3, #8
 8002186:	4b6e      	ldr	r3, [pc, #440]	; (8002340 <HAL_RCC_OscConfig+0x330>)
 8002188:	430a      	orrs	r2, r1
 800218a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d112      	bne.n	80021b8 <HAL_RCC_OscConfig+0x1a8>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002192:	4b6b      	ldr	r3, [pc, #428]	; (8002340 <HAL_RCC_OscConfig+0x330>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a6e      	ldr	r2, [pc, #440]	; (8002350 <HAL_RCC_OscConfig+0x340>)
 8002198:	4013      	ands	r3, r2
 800219a:	0019      	movs	r1, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	691a      	ldr	r2, [r3, #16]
 80021a0:	4b67      	ldr	r3, [pc, #412]	; (8002340 <HAL_RCC_OscConfig+0x330>)
 80021a2:	430a      	orrs	r2, r1
 80021a4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80021a6:	4b66      	ldr	r3, [pc, #408]	; (8002340 <HAL_RCC_OscConfig+0x330>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	0adb      	lsrs	r3, r3, #11
 80021ac:	2207      	movs	r2, #7
 80021ae:	4013      	ands	r3, r2
 80021b0:	4a68      	ldr	r2, [pc, #416]	; (8002354 <HAL_RCC_OscConfig+0x344>)
 80021b2:	40da      	lsrs	r2, r3
 80021b4:	4b68      	ldr	r3, [pc, #416]	; (8002358 <HAL_RCC_OscConfig+0x348>)
 80021b6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80021b8:	4b68      	ldr	r3, [pc, #416]	; (800235c <HAL_RCC_OscConfig+0x34c>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	0018      	movs	r0, r3
 80021be:	f7fe fb39 	bl	8000834 <HAL_InitTick>
 80021c2:	1e03      	subs	r3, r0, #0
 80021c4:	d051      	beq.n	800226a <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e282      	b.n	80026d0 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d030      	beq.n	8002234 <HAL_RCC_OscConfig+0x224>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80021d2:	4b5b      	ldr	r3, [pc, #364]	; (8002340 <HAL_RCC_OscConfig+0x330>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a5e      	ldr	r2, [pc, #376]	; (8002350 <HAL_RCC_OscConfig+0x340>)
 80021d8:	4013      	ands	r3, r2
 80021da:	0019      	movs	r1, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	691a      	ldr	r2, [r3, #16]
 80021e0:	4b57      	ldr	r3, [pc, #348]	; (8002340 <HAL_RCC_OscConfig+0x330>)
 80021e2:	430a      	orrs	r2, r1
 80021e4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80021e6:	4b56      	ldr	r3, [pc, #344]	; (8002340 <HAL_RCC_OscConfig+0x330>)
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	4b55      	ldr	r3, [pc, #340]	; (8002340 <HAL_RCC_OscConfig+0x330>)
 80021ec:	2180      	movs	r1, #128	; 0x80
 80021ee:	0049      	lsls	r1, r1, #1
 80021f0:	430a      	orrs	r2, r1
 80021f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f4:	f7fe fb7a 	bl	80008ec <HAL_GetTick>
 80021f8:	0003      	movs	r3, r0
 80021fa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021fc:	e008      	b.n	8002210 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021fe:	f7fe fb75 	bl	80008ec <HAL_GetTick>
 8002202:	0002      	movs	r2, r0
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	2b02      	cmp	r3, #2
 800220a:	d901      	bls.n	8002210 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e25f      	b.n	80026d0 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002210:	4b4b      	ldr	r3, [pc, #300]	; (8002340 <HAL_RCC_OscConfig+0x330>)
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	2380      	movs	r3, #128	; 0x80
 8002216:	00db      	lsls	r3, r3, #3
 8002218:	4013      	ands	r3, r2
 800221a:	d0f0      	beq.n	80021fe <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800221c:	4b48      	ldr	r3, [pc, #288]	; (8002340 <HAL_RCC_OscConfig+0x330>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	4a4a      	ldr	r2, [pc, #296]	; (800234c <HAL_RCC_OscConfig+0x33c>)
 8002222:	4013      	ands	r3, r2
 8002224:	0019      	movs	r1, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	021a      	lsls	r2, r3, #8
 800222c:	4b44      	ldr	r3, [pc, #272]	; (8002340 <HAL_RCC_OscConfig+0x330>)
 800222e:	430a      	orrs	r2, r1
 8002230:	605a      	str	r2, [r3, #4]
 8002232:	e01b      	b.n	800226c <HAL_RCC_OscConfig+0x25c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002234:	4b42      	ldr	r3, [pc, #264]	; (8002340 <HAL_RCC_OscConfig+0x330>)
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	4b41      	ldr	r3, [pc, #260]	; (8002340 <HAL_RCC_OscConfig+0x330>)
 800223a:	4949      	ldr	r1, [pc, #292]	; (8002360 <HAL_RCC_OscConfig+0x350>)
 800223c:	400a      	ands	r2, r1
 800223e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002240:	f7fe fb54 	bl	80008ec <HAL_GetTick>
 8002244:	0003      	movs	r3, r0
 8002246:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002248:	e008      	b.n	800225c <HAL_RCC_OscConfig+0x24c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800224a:	f7fe fb4f 	bl	80008ec <HAL_GetTick>
 800224e:	0002      	movs	r2, r0
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	2b02      	cmp	r3, #2
 8002256:	d901      	bls.n	800225c <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e239      	b.n	80026d0 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800225c:	4b38      	ldr	r3, [pc, #224]	; (8002340 <HAL_RCC_OscConfig+0x330>)
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	2380      	movs	r3, #128	; 0x80
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	4013      	ands	r3, r2
 8002266:	d1f0      	bne.n	800224a <HAL_RCC_OscConfig+0x23a>
 8002268:	e000      	b.n	800226c <HAL_RCC_OscConfig+0x25c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800226a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2208      	movs	r2, #8
 8002272:	4013      	ands	r3, r2
 8002274:	d047      	beq.n	8002306 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002276:	4b32      	ldr	r3, [pc, #200]	; (8002340 <HAL_RCC_OscConfig+0x330>)
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	2238      	movs	r2, #56	; 0x38
 800227c:	4013      	ands	r3, r2
 800227e:	2b18      	cmp	r3, #24
 8002280:	d10a      	bne.n	8002298 <HAL_RCC_OscConfig+0x288>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002282:	4b2f      	ldr	r3, [pc, #188]	; (8002340 <HAL_RCC_OscConfig+0x330>)
 8002284:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002286:	2202      	movs	r2, #2
 8002288:	4013      	ands	r3, r2
 800228a:	d03c      	beq.n	8002306 <HAL_RCC_OscConfig+0x2f6>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d138      	bne.n	8002306 <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e21b      	b.n	80026d0 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	699b      	ldr	r3, [r3, #24]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d019      	beq.n	80022d4 <HAL_RCC_OscConfig+0x2c4>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80022a0:	4b27      	ldr	r3, [pc, #156]	; (8002340 <HAL_RCC_OscConfig+0x330>)
 80022a2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80022a4:	4b26      	ldr	r3, [pc, #152]	; (8002340 <HAL_RCC_OscConfig+0x330>)
 80022a6:	2101      	movs	r1, #1
 80022a8:	430a      	orrs	r2, r1
 80022aa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ac:	f7fe fb1e 	bl	80008ec <HAL_GetTick>
 80022b0:	0003      	movs	r3, r0
 80022b2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022b4:	e008      	b.n	80022c8 <HAL_RCC_OscConfig+0x2b8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022b6:	f7fe fb19 	bl	80008ec <HAL_GetTick>
 80022ba:	0002      	movs	r2, r0
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d901      	bls.n	80022c8 <HAL_RCC_OscConfig+0x2b8>
          {
            return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e203      	b.n	80026d0 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022c8:	4b1d      	ldr	r3, [pc, #116]	; (8002340 <HAL_RCC_OscConfig+0x330>)
 80022ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022cc:	2202      	movs	r2, #2
 80022ce:	4013      	ands	r3, r2
 80022d0:	d0f1      	beq.n	80022b6 <HAL_RCC_OscConfig+0x2a6>
 80022d2:	e018      	b.n	8002306 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80022d4:	4b1a      	ldr	r3, [pc, #104]	; (8002340 <HAL_RCC_OscConfig+0x330>)
 80022d6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80022d8:	4b19      	ldr	r3, [pc, #100]	; (8002340 <HAL_RCC_OscConfig+0x330>)
 80022da:	2101      	movs	r1, #1
 80022dc:	438a      	bics	r2, r1
 80022de:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e0:	f7fe fb04 	bl	80008ec <HAL_GetTick>
 80022e4:	0003      	movs	r3, r0
 80022e6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022e8:	e008      	b.n	80022fc <HAL_RCC_OscConfig+0x2ec>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022ea:	f7fe faff 	bl	80008ec <HAL_GetTick>
 80022ee:	0002      	movs	r2, r0
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d901      	bls.n	80022fc <HAL_RCC_OscConfig+0x2ec>
          {
            return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e1e9      	b.n	80026d0 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022fc:	4b10      	ldr	r3, [pc, #64]	; (8002340 <HAL_RCC_OscConfig+0x330>)
 80022fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002300:	2202      	movs	r2, #2
 8002302:	4013      	ands	r3, r2
 8002304:	d1f1      	bne.n	80022ea <HAL_RCC_OscConfig+0x2da>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2204      	movs	r2, #4
 800230c:	4013      	ands	r3, r2
 800230e:	d100      	bne.n	8002312 <HAL_RCC_OscConfig+0x302>
 8002310:	e0c6      	b.n	80024a0 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002312:	231f      	movs	r3, #31
 8002314:	18fb      	adds	r3, r7, r3
 8002316:	2200      	movs	r2, #0
 8002318:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800231a:	4b09      	ldr	r3, [pc, #36]	; (8002340 <HAL_RCC_OscConfig+0x330>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	2238      	movs	r2, #56	; 0x38
 8002320:	4013      	ands	r3, r2
 8002322:	2b20      	cmp	r3, #32
 8002324:	d11e      	bne.n	8002364 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002326:	4b06      	ldr	r3, [pc, #24]	; (8002340 <HAL_RCC_OscConfig+0x330>)
 8002328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800232a:	2202      	movs	r2, #2
 800232c:	4013      	ands	r3, r2
 800232e:	d100      	bne.n	8002332 <HAL_RCC_OscConfig+0x322>
 8002330:	e0b6      	b.n	80024a0 <HAL_RCC_OscConfig+0x490>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d000      	beq.n	800233c <HAL_RCC_OscConfig+0x32c>
 800233a:	e0b1      	b.n	80024a0 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e1c7      	b.n	80026d0 <HAL_RCC_OscConfig+0x6c0>
 8002340:	40021000 	.word	0x40021000
 8002344:	fffeffff 	.word	0xfffeffff
 8002348:	fffbffff 	.word	0xfffbffff
 800234c:	ffff80ff 	.word	0xffff80ff
 8002350:	ffffc7ff 	.word	0xffffc7ff
 8002354:	00f42400 	.word	0x00f42400
 8002358:	20000000 	.word	0x20000000
 800235c:	20000004 	.word	0x20000004
 8002360:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002364:	4bb8      	ldr	r3, [pc, #736]	; (8002648 <HAL_RCC_OscConfig+0x638>)
 8002366:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002368:	2380      	movs	r3, #128	; 0x80
 800236a:	055b      	lsls	r3, r3, #21
 800236c:	4013      	ands	r3, r2
 800236e:	d101      	bne.n	8002374 <HAL_RCC_OscConfig+0x364>
 8002370:	2301      	movs	r3, #1
 8002372:	e000      	b.n	8002376 <HAL_RCC_OscConfig+0x366>
 8002374:	2300      	movs	r3, #0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d011      	beq.n	800239e <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800237a:	4bb3      	ldr	r3, [pc, #716]	; (8002648 <HAL_RCC_OscConfig+0x638>)
 800237c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800237e:	4bb2      	ldr	r3, [pc, #712]	; (8002648 <HAL_RCC_OscConfig+0x638>)
 8002380:	2180      	movs	r1, #128	; 0x80
 8002382:	0549      	lsls	r1, r1, #21
 8002384:	430a      	orrs	r2, r1
 8002386:	63da      	str	r2, [r3, #60]	; 0x3c
 8002388:	4baf      	ldr	r3, [pc, #700]	; (8002648 <HAL_RCC_OscConfig+0x638>)
 800238a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800238c:	2380      	movs	r3, #128	; 0x80
 800238e:	055b      	lsls	r3, r3, #21
 8002390:	4013      	ands	r3, r2
 8002392:	60fb      	str	r3, [r7, #12]
 8002394:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002396:	231f      	movs	r3, #31
 8002398:	18fb      	adds	r3, r7, r3
 800239a:	2201      	movs	r2, #1
 800239c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800239e:	4bab      	ldr	r3, [pc, #684]	; (800264c <HAL_RCC_OscConfig+0x63c>)
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	2380      	movs	r3, #128	; 0x80
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	4013      	ands	r3, r2
 80023a8:	d11a      	bne.n	80023e0 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023aa:	4ba8      	ldr	r3, [pc, #672]	; (800264c <HAL_RCC_OscConfig+0x63c>)
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	4ba7      	ldr	r3, [pc, #668]	; (800264c <HAL_RCC_OscConfig+0x63c>)
 80023b0:	2180      	movs	r1, #128	; 0x80
 80023b2:	0049      	lsls	r1, r1, #1
 80023b4:	430a      	orrs	r2, r1
 80023b6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80023b8:	f7fe fa98 	bl	80008ec <HAL_GetTick>
 80023bc:	0003      	movs	r3, r0
 80023be:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023c0:	e008      	b.n	80023d4 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023c2:	f7fe fa93 	bl	80008ec <HAL_GetTick>
 80023c6:	0002      	movs	r2, r0
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d901      	bls.n	80023d4 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e17d      	b.n	80026d0 <HAL_RCC_OscConfig+0x6c0>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023d4:	4b9d      	ldr	r3, [pc, #628]	; (800264c <HAL_RCC_OscConfig+0x63c>)
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	2380      	movs	r3, #128	; 0x80
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	4013      	ands	r3, r2
 80023de:	d0f0      	beq.n	80023c2 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d106      	bne.n	80023f6 <HAL_RCC_OscConfig+0x3e6>
 80023e8:	4b97      	ldr	r3, [pc, #604]	; (8002648 <HAL_RCC_OscConfig+0x638>)
 80023ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80023ec:	4b96      	ldr	r3, [pc, #600]	; (8002648 <HAL_RCC_OscConfig+0x638>)
 80023ee:	2101      	movs	r1, #1
 80023f0:	430a      	orrs	r2, r1
 80023f2:	65da      	str	r2, [r3, #92]	; 0x5c
 80023f4:	e01c      	b.n	8002430 <HAL_RCC_OscConfig+0x420>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	2b05      	cmp	r3, #5
 80023fc:	d10c      	bne.n	8002418 <HAL_RCC_OscConfig+0x408>
 80023fe:	4b92      	ldr	r3, [pc, #584]	; (8002648 <HAL_RCC_OscConfig+0x638>)
 8002400:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002402:	4b91      	ldr	r3, [pc, #580]	; (8002648 <HAL_RCC_OscConfig+0x638>)
 8002404:	2104      	movs	r1, #4
 8002406:	430a      	orrs	r2, r1
 8002408:	65da      	str	r2, [r3, #92]	; 0x5c
 800240a:	4b8f      	ldr	r3, [pc, #572]	; (8002648 <HAL_RCC_OscConfig+0x638>)
 800240c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800240e:	4b8e      	ldr	r3, [pc, #568]	; (8002648 <HAL_RCC_OscConfig+0x638>)
 8002410:	2101      	movs	r1, #1
 8002412:	430a      	orrs	r2, r1
 8002414:	65da      	str	r2, [r3, #92]	; 0x5c
 8002416:	e00b      	b.n	8002430 <HAL_RCC_OscConfig+0x420>
 8002418:	4b8b      	ldr	r3, [pc, #556]	; (8002648 <HAL_RCC_OscConfig+0x638>)
 800241a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800241c:	4b8a      	ldr	r3, [pc, #552]	; (8002648 <HAL_RCC_OscConfig+0x638>)
 800241e:	2101      	movs	r1, #1
 8002420:	438a      	bics	r2, r1
 8002422:	65da      	str	r2, [r3, #92]	; 0x5c
 8002424:	4b88      	ldr	r3, [pc, #544]	; (8002648 <HAL_RCC_OscConfig+0x638>)
 8002426:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002428:	4b87      	ldr	r3, [pc, #540]	; (8002648 <HAL_RCC_OscConfig+0x638>)
 800242a:	2104      	movs	r1, #4
 800242c:	438a      	bics	r2, r1
 800242e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d014      	beq.n	8002462 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002438:	f7fe fa58 	bl	80008ec <HAL_GetTick>
 800243c:	0003      	movs	r3, r0
 800243e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002440:	e009      	b.n	8002456 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002442:	f7fe fa53 	bl	80008ec <HAL_GetTick>
 8002446:	0002      	movs	r2, r0
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	4a80      	ldr	r2, [pc, #512]	; (8002650 <HAL_RCC_OscConfig+0x640>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e13c      	b.n	80026d0 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002456:	4b7c      	ldr	r3, [pc, #496]	; (8002648 <HAL_RCC_OscConfig+0x638>)
 8002458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800245a:	2202      	movs	r2, #2
 800245c:	4013      	ands	r3, r2
 800245e:	d0f0      	beq.n	8002442 <HAL_RCC_OscConfig+0x432>
 8002460:	e013      	b.n	800248a <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002462:	f7fe fa43 	bl	80008ec <HAL_GetTick>
 8002466:	0003      	movs	r3, r0
 8002468:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800246a:	e009      	b.n	8002480 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800246c:	f7fe fa3e 	bl	80008ec <HAL_GetTick>
 8002470:	0002      	movs	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	4a76      	ldr	r2, [pc, #472]	; (8002650 <HAL_RCC_OscConfig+0x640>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d901      	bls.n	8002480 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e127      	b.n	80026d0 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002480:	4b71      	ldr	r3, [pc, #452]	; (8002648 <HAL_RCC_OscConfig+0x638>)
 8002482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002484:	2202      	movs	r2, #2
 8002486:	4013      	ands	r3, r2
 8002488:	d1f0      	bne.n	800246c <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800248a:	231f      	movs	r3, #31
 800248c:	18fb      	adds	r3, r7, r3
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d105      	bne.n	80024a0 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002494:	4b6c      	ldr	r3, [pc, #432]	; (8002648 <HAL_RCC_OscConfig+0x638>)
 8002496:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002498:	4b6b      	ldr	r3, [pc, #428]	; (8002648 <HAL_RCC_OscConfig+0x638>)
 800249a:	496e      	ldr	r1, [pc, #440]	; (8002654 <HAL_RCC_OscConfig+0x644>)
 800249c:	400a      	ands	r2, r1
 800249e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2220      	movs	r2, #32
 80024a6:	4013      	ands	r3, r2
 80024a8:	d039      	beq.n	800251e <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	69db      	ldr	r3, [r3, #28]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d01b      	beq.n	80024ea <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80024b2:	4b65      	ldr	r3, [pc, #404]	; (8002648 <HAL_RCC_OscConfig+0x638>)
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	4b64      	ldr	r3, [pc, #400]	; (8002648 <HAL_RCC_OscConfig+0x638>)
 80024b8:	2180      	movs	r1, #128	; 0x80
 80024ba:	03c9      	lsls	r1, r1, #15
 80024bc:	430a      	orrs	r2, r1
 80024be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c0:	f7fe fa14 	bl	80008ec <HAL_GetTick>
 80024c4:	0003      	movs	r3, r0
 80024c6:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80024c8:	e008      	b.n	80024dc <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024ca:	f7fe fa0f 	bl	80008ec <HAL_GetTick>
 80024ce:	0002      	movs	r2, r0
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d901      	bls.n	80024dc <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e0f9      	b.n	80026d0 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80024dc:	4b5a      	ldr	r3, [pc, #360]	; (8002648 <HAL_RCC_OscConfig+0x638>)
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	2380      	movs	r3, #128	; 0x80
 80024e2:	041b      	lsls	r3, r3, #16
 80024e4:	4013      	ands	r3, r2
 80024e6:	d0f0      	beq.n	80024ca <HAL_RCC_OscConfig+0x4ba>
 80024e8:	e019      	b.n	800251e <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80024ea:	4b57      	ldr	r3, [pc, #348]	; (8002648 <HAL_RCC_OscConfig+0x638>)
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	4b56      	ldr	r3, [pc, #344]	; (8002648 <HAL_RCC_OscConfig+0x638>)
 80024f0:	4959      	ldr	r1, [pc, #356]	; (8002658 <HAL_RCC_OscConfig+0x648>)
 80024f2:	400a      	ands	r2, r1
 80024f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024f6:	f7fe f9f9 	bl	80008ec <HAL_GetTick>
 80024fa:	0003      	movs	r3, r0
 80024fc:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80024fe:	e008      	b.n	8002512 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002500:	f7fe f9f4 	bl	80008ec <HAL_GetTick>
 8002504:	0002      	movs	r2, r0
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b02      	cmp	r3, #2
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e0de      	b.n	80026d0 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002512:	4b4d      	ldr	r3, [pc, #308]	; (8002648 <HAL_RCC_OscConfig+0x638>)
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	2380      	movs	r3, #128	; 0x80
 8002518:	041b      	lsls	r3, r3, #16
 800251a:	4013      	ands	r3, r2
 800251c:	d1f0      	bne.n	8002500 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a1b      	ldr	r3, [r3, #32]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d100      	bne.n	8002528 <HAL_RCC_OscConfig+0x518>
 8002526:	e0d2      	b.n	80026ce <HAL_RCC_OscConfig+0x6be>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002528:	4b47      	ldr	r3, [pc, #284]	; (8002648 <HAL_RCC_OscConfig+0x638>)
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	2238      	movs	r2, #56	; 0x38
 800252e:	4013      	ands	r3, r2
 8002530:	2b10      	cmp	r3, #16
 8002532:	d100      	bne.n	8002536 <HAL_RCC_OscConfig+0x526>
 8002534:	e081      	b.n	800263a <HAL_RCC_OscConfig+0x62a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6a1b      	ldr	r3, [r3, #32]
 800253a:	2b02      	cmp	r3, #2
 800253c:	d156      	bne.n	80025ec <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800253e:	4b42      	ldr	r3, [pc, #264]	; (8002648 <HAL_RCC_OscConfig+0x638>)
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	4b41      	ldr	r3, [pc, #260]	; (8002648 <HAL_RCC_OscConfig+0x638>)
 8002544:	4945      	ldr	r1, [pc, #276]	; (800265c <HAL_RCC_OscConfig+0x64c>)
 8002546:	400a      	ands	r2, r1
 8002548:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800254a:	f7fe f9cf 	bl	80008ec <HAL_GetTick>
 800254e:	0003      	movs	r3, r0
 8002550:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002552:	e008      	b.n	8002566 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002554:	f7fe f9ca 	bl	80008ec <HAL_GetTick>
 8002558:	0002      	movs	r2, r0
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	2b02      	cmp	r3, #2
 8002560:	d901      	bls.n	8002566 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e0b4      	b.n	80026d0 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002566:	4b38      	ldr	r3, [pc, #224]	; (8002648 <HAL_RCC_OscConfig+0x638>)
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	2380      	movs	r3, #128	; 0x80
 800256c:	049b      	lsls	r3, r3, #18
 800256e:	4013      	ands	r3, r2
 8002570:	d1f0      	bne.n	8002554 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002572:	4b35      	ldr	r3, [pc, #212]	; (8002648 <HAL_RCC_OscConfig+0x638>)
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	4a3a      	ldr	r2, [pc, #232]	; (8002660 <HAL_RCC_OscConfig+0x650>)
 8002578:	4013      	ands	r3, r2
 800257a:	0019      	movs	r1, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002584:	431a      	orrs	r2, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800258a:	021b      	lsls	r3, r3, #8
 800258c:	431a      	orrs	r2, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002592:	431a      	orrs	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002598:	431a      	orrs	r2, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800259e:	431a      	orrs	r2, r3
 80025a0:	4b29      	ldr	r3, [pc, #164]	; (8002648 <HAL_RCC_OscConfig+0x638>)
 80025a2:	430a      	orrs	r2, r1
 80025a4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025a6:	4b28      	ldr	r3, [pc, #160]	; (8002648 <HAL_RCC_OscConfig+0x638>)
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	4b27      	ldr	r3, [pc, #156]	; (8002648 <HAL_RCC_OscConfig+0x638>)
 80025ac:	2180      	movs	r1, #128	; 0x80
 80025ae:	0449      	lsls	r1, r1, #17
 80025b0:	430a      	orrs	r2, r1
 80025b2:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80025b4:	4b24      	ldr	r3, [pc, #144]	; (8002648 <HAL_RCC_OscConfig+0x638>)
 80025b6:	68da      	ldr	r2, [r3, #12]
 80025b8:	4b23      	ldr	r3, [pc, #140]	; (8002648 <HAL_RCC_OscConfig+0x638>)
 80025ba:	2180      	movs	r1, #128	; 0x80
 80025bc:	0549      	lsls	r1, r1, #21
 80025be:	430a      	orrs	r2, r1
 80025c0:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c2:	f7fe f993 	bl	80008ec <HAL_GetTick>
 80025c6:	0003      	movs	r3, r0
 80025c8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025ca:	e008      	b.n	80025de <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025cc:	f7fe f98e 	bl	80008ec <HAL_GetTick>
 80025d0:	0002      	movs	r2, r0
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d901      	bls.n	80025de <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e078      	b.n	80026d0 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025de:	4b1a      	ldr	r3, [pc, #104]	; (8002648 <HAL_RCC_OscConfig+0x638>)
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	2380      	movs	r3, #128	; 0x80
 80025e4:	049b      	lsls	r3, r3, #18
 80025e6:	4013      	ands	r3, r2
 80025e8:	d0f0      	beq.n	80025cc <HAL_RCC_OscConfig+0x5bc>
 80025ea:	e070      	b.n	80026ce <HAL_RCC_OscConfig+0x6be>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ec:	4b16      	ldr	r3, [pc, #88]	; (8002648 <HAL_RCC_OscConfig+0x638>)
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	4b15      	ldr	r3, [pc, #84]	; (8002648 <HAL_RCC_OscConfig+0x638>)
 80025f2:	491a      	ldr	r1, [pc, #104]	; (800265c <HAL_RCC_OscConfig+0x64c>)
 80025f4:	400a      	ands	r2, r1
 80025f6:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80025f8:	4b13      	ldr	r3, [pc, #76]	; (8002648 <HAL_RCC_OscConfig+0x638>)
 80025fa:	68da      	ldr	r2, [r3, #12]
 80025fc:	4b12      	ldr	r3, [pc, #72]	; (8002648 <HAL_RCC_OscConfig+0x638>)
 80025fe:	2103      	movs	r1, #3
 8002600:	438a      	bics	r2, r1
 8002602:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002604:	4b10      	ldr	r3, [pc, #64]	; (8002648 <HAL_RCC_OscConfig+0x638>)
 8002606:	68da      	ldr	r2, [r3, #12]
 8002608:	4b0f      	ldr	r3, [pc, #60]	; (8002648 <HAL_RCC_OscConfig+0x638>)
 800260a:	4916      	ldr	r1, [pc, #88]	; (8002664 <HAL_RCC_OscConfig+0x654>)
 800260c:	400a      	ands	r2, r1
 800260e:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002610:	f7fe f96c 	bl	80008ec <HAL_GetTick>
 8002614:	0003      	movs	r3, r0
 8002616:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002618:	e008      	b.n	800262c <HAL_RCC_OscConfig+0x61c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800261a:	f7fe f967 	bl	80008ec <HAL_GetTick>
 800261e:	0002      	movs	r2, r0
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	2b02      	cmp	r3, #2
 8002626:	d901      	bls.n	800262c <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e051      	b.n	80026d0 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800262c:	4b06      	ldr	r3, [pc, #24]	; (8002648 <HAL_RCC_OscConfig+0x638>)
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	2380      	movs	r3, #128	; 0x80
 8002632:	049b      	lsls	r3, r3, #18
 8002634:	4013      	ands	r3, r2
 8002636:	d1f0      	bne.n	800261a <HAL_RCC_OscConfig+0x60a>
 8002638:	e049      	b.n	80026ce <HAL_RCC_OscConfig+0x6be>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a1b      	ldr	r3, [r3, #32]
 800263e:	2b01      	cmp	r3, #1
 8002640:	d112      	bne.n	8002668 <HAL_RCC_OscConfig+0x658>
      {
        return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e044      	b.n	80026d0 <HAL_RCC_OscConfig+0x6c0>
 8002646:	46c0      	nop			; (mov r8, r8)
 8002648:	40021000 	.word	0x40021000
 800264c:	40007000 	.word	0x40007000
 8002650:	00001388 	.word	0x00001388
 8002654:	efffffff 	.word	0xefffffff
 8002658:	ffbfffff 	.word	0xffbfffff
 800265c:	feffffff 	.word	0xfeffffff
 8002660:	11c1808c 	.word	0x11c1808c
 8002664:	eefeffff 	.word	0xeefeffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002668:	4b1b      	ldr	r3, [pc, #108]	; (80026d8 <HAL_RCC_OscConfig+0x6c8>)
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	2203      	movs	r2, #3
 8002672:	401a      	ands	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002678:	429a      	cmp	r2, r3
 800267a:	d126      	bne.n	80026ca <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	2270      	movs	r2, #112	; 0x70
 8002680:	401a      	ands	r2, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002686:	429a      	cmp	r2, r3
 8002688:	d11f      	bne.n	80026ca <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800268a:	697a      	ldr	r2, [r7, #20]
 800268c:	23fe      	movs	r3, #254	; 0xfe
 800268e:	01db      	lsls	r3, r3, #7
 8002690:	401a      	ands	r2, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002696:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002698:	429a      	cmp	r2, r3
 800269a:	d116      	bne.n	80026ca <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800269c:	697a      	ldr	r2, [r7, #20]
 800269e:	23f8      	movs	r3, #248	; 0xf8
 80026a0:	039b      	lsls	r3, r3, #14
 80026a2:	401a      	ands	r2, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d10e      	bne.n	80026ca <HAL_RCC_OscConfig+0x6ba>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80026ac:	697a      	ldr	r2, [r7, #20]
 80026ae:	23e0      	movs	r3, #224	; 0xe0
 80026b0:	051b      	lsls	r3, r3, #20
 80026b2:	401a      	ands	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d106      	bne.n	80026ca <HAL_RCC_OscConfig+0x6ba>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	0f5b      	lsrs	r3, r3, #29
 80026c0:	075a      	lsls	r2, r3, #29
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d001      	beq.n	80026ce <HAL_RCC_OscConfig+0x6be>
        {
          return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e000      	b.n	80026d0 <HAL_RCC_OscConfig+0x6c0>
        }
      }
    }
  }
  return HAL_OK;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	0018      	movs	r0, r3
 80026d2:	46bd      	mov	sp, r7
 80026d4:	b008      	add	sp, #32
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	40021000 	.word	0x40021000

080026dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d101      	bne.n	80026f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e0e9      	b.n	80028c4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026f0:	4b76      	ldr	r3, [pc, #472]	; (80028cc <HAL_RCC_ClockConfig+0x1f0>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2207      	movs	r2, #7
 80026f6:	4013      	ands	r3, r2
 80026f8:	683a      	ldr	r2, [r7, #0]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d91e      	bls.n	800273c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026fe:	4b73      	ldr	r3, [pc, #460]	; (80028cc <HAL_RCC_ClockConfig+0x1f0>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2207      	movs	r2, #7
 8002704:	4393      	bics	r3, r2
 8002706:	0019      	movs	r1, r3
 8002708:	4b70      	ldr	r3, [pc, #448]	; (80028cc <HAL_RCC_ClockConfig+0x1f0>)
 800270a:	683a      	ldr	r2, [r7, #0]
 800270c:	430a      	orrs	r2, r1
 800270e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002710:	f7fe f8ec 	bl	80008ec <HAL_GetTick>
 8002714:	0003      	movs	r3, r0
 8002716:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002718:	e009      	b.n	800272e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800271a:	f7fe f8e7 	bl	80008ec <HAL_GetTick>
 800271e:	0002      	movs	r2, r0
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	4a6a      	ldr	r2, [pc, #424]	; (80028d0 <HAL_RCC_ClockConfig+0x1f4>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d901      	bls.n	800272e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e0ca      	b.n	80028c4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800272e:	4b67      	ldr	r3, [pc, #412]	; (80028cc <HAL_RCC_ClockConfig+0x1f0>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2207      	movs	r2, #7
 8002734:	4013      	ands	r3, r2
 8002736:	683a      	ldr	r2, [r7, #0]
 8002738:	429a      	cmp	r2, r3
 800273a:	d1ee      	bne.n	800271a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2202      	movs	r2, #2
 8002742:	4013      	ands	r3, r2
 8002744:	d015      	beq.n	8002772 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2204      	movs	r2, #4
 800274c:	4013      	ands	r3, r2
 800274e:	d006      	beq.n	800275e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002750:	4b60      	ldr	r3, [pc, #384]	; (80028d4 <HAL_RCC_ClockConfig+0x1f8>)
 8002752:	689a      	ldr	r2, [r3, #8]
 8002754:	4b5f      	ldr	r3, [pc, #380]	; (80028d4 <HAL_RCC_ClockConfig+0x1f8>)
 8002756:	21e0      	movs	r1, #224	; 0xe0
 8002758:	01c9      	lsls	r1, r1, #7
 800275a:	430a      	orrs	r2, r1
 800275c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800275e:	4b5d      	ldr	r3, [pc, #372]	; (80028d4 <HAL_RCC_ClockConfig+0x1f8>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	4a5d      	ldr	r2, [pc, #372]	; (80028d8 <HAL_RCC_ClockConfig+0x1fc>)
 8002764:	4013      	ands	r3, r2
 8002766:	0019      	movs	r1, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689a      	ldr	r2, [r3, #8]
 800276c:	4b59      	ldr	r3, [pc, #356]	; (80028d4 <HAL_RCC_ClockConfig+0x1f8>)
 800276e:	430a      	orrs	r2, r1
 8002770:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2201      	movs	r2, #1
 8002778:	4013      	ands	r3, r2
 800277a:	d057      	beq.n	800282c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	2b01      	cmp	r3, #1
 8002782:	d107      	bne.n	8002794 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002784:	4b53      	ldr	r3, [pc, #332]	; (80028d4 <HAL_RCC_ClockConfig+0x1f8>)
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	2380      	movs	r3, #128	; 0x80
 800278a:	029b      	lsls	r3, r3, #10
 800278c:	4013      	ands	r3, r2
 800278e:	d12b      	bne.n	80027e8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e097      	b.n	80028c4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	2b02      	cmp	r3, #2
 800279a:	d107      	bne.n	80027ac <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800279c:	4b4d      	ldr	r3, [pc, #308]	; (80028d4 <HAL_RCC_ClockConfig+0x1f8>)
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	2380      	movs	r3, #128	; 0x80
 80027a2:	049b      	lsls	r3, r3, #18
 80027a4:	4013      	ands	r3, r2
 80027a6:	d11f      	bne.n	80027e8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e08b      	b.n	80028c4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d107      	bne.n	80027c4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027b4:	4b47      	ldr	r3, [pc, #284]	; (80028d4 <HAL_RCC_ClockConfig+0x1f8>)
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	2380      	movs	r3, #128	; 0x80
 80027ba:	00db      	lsls	r3, r3, #3
 80027bc:	4013      	ands	r3, r2
 80027be:	d113      	bne.n	80027e8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e07f      	b.n	80028c4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	2b03      	cmp	r3, #3
 80027ca:	d106      	bne.n	80027da <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027cc:	4b41      	ldr	r3, [pc, #260]	; (80028d4 <HAL_RCC_ClockConfig+0x1f8>)
 80027ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027d0:	2202      	movs	r2, #2
 80027d2:	4013      	ands	r3, r2
 80027d4:	d108      	bne.n	80027e8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e074      	b.n	80028c4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027da:	4b3e      	ldr	r3, [pc, #248]	; (80028d4 <HAL_RCC_ClockConfig+0x1f8>)
 80027dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027de:	2202      	movs	r2, #2
 80027e0:	4013      	ands	r3, r2
 80027e2:	d101      	bne.n	80027e8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e06d      	b.n	80028c4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80027e8:	4b3a      	ldr	r3, [pc, #232]	; (80028d4 <HAL_RCC_ClockConfig+0x1f8>)
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	2207      	movs	r2, #7
 80027ee:	4393      	bics	r3, r2
 80027f0:	0019      	movs	r1, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685a      	ldr	r2, [r3, #4]
 80027f6:	4b37      	ldr	r3, [pc, #220]	; (80028d4 <HAL_RCC_ClockConfig+0x1f8>)
 80027f8:	430a      	orrs	r2, r1
 80027fa:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027fc:	f7fe f876 	bl	80008ec <HAL_GetTick>
 8002800:	0003      	movs	r3, r0
 8002802:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002804:	e009      	b.n	800281a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002806:	f7fe f871 	bl	80008ec <HAL_GetTick>
 800280a:	0002      	movs	r2, r0
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	4a2f      	ldr	r2, [pc, #188]	; (80028d0 <HAL_RCC_ClockConfig+0x1f4>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d901      	bls.n	800281a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e054      	b.n	80028c4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800281a:	4b2e      	ldr	r3, [pc, #184]	; (80028d4 <HAL_RCC_ClockConfig+0x1f8>)
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	2238      	movs	r2, #56	; 0x38
 8002820:	401a      	ands	r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	00db      	lsls	r3, r3, #3
 8002828:	429a      	cmp	r2, r3
 800282a:	d1ec      	bne.n	8002806 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800282c:	4b27      	ldr	r3, [pc, #156]	; (80028cc <HAL_RCC_ClockConfig+0x1f0>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2207      	movs	r2, #7
 8002832:	4013      	ands	r3, r2
 8002834:	683a      	ldr	r2, [r7, #0]
 8002836:	429a      	cmp	r2, r3
 8002838:	d21e      	bcs.n	8002878 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800283a:	4b24      	ldr	r3, [pc, #144]	; (80028cc <HAL_RCC_ClockConfig+0x1f0>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2207      	movs	r2, #7
 8002840:	4393      	bics	r3, r2
 8002842:	0019      	movs	r1, r3
 8002844:	4b21      	ldr	r3, [pc, #132]	; (80028cc <HAL_RCC_ClockConfig+0x1f0>)
 8002846:	683a      	ldr	r2, [r7, #0]
 8002848:	430a      	orrs	r2, r1
 800284a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800284c:	f7fe f84e 	bl	80008ec <HAL_GetTick>
 8002850:	0003      	movs	r3, r0
 8002852:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002854:	e009      	b.n	800286a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002856:	f7fe f849 	bl	80008ec <HAL_GetTick>
 800285a:	0002      	movs	r2, r0
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	4a1b      	ldr	r2, [pc, #108]	; (80028d0 <HAL_RCC_ClockConfig+0x1f4>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d901      	bls.n	800286a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e02c      	b.n	80028c4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800286a:	4b18      	ldr	r3, [pc, #96]	; (80028cc <HAL_RCC_ClockConfig+0x1f0>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	2207      	movs	r2, #7
 8002870:	4013      	ands	r3, r2
 8002872:	683a      	ldr	r2, [r7, #0]
 8002874:	429a      	cmp	r2, r3
 8002876:	d1ee      	bne.n	8002856 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2204      	movs	r2, #4
 800287e:	4013      	ands	r3, r2
 8002880:	d009      	beq.n	8002896 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002882:	4b14      	ldr	r3, [pc, #80]	; (80028d4 <HAL_RCC_ClockConfig+0x1f8>)
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	4a15      	ldr	r2, [pc, #84]	; (80028dc <HAL_RCC_ClockConfig+0x200>)
 8002888:	4013      	ands	r3, r2
 800288a:	0019      	movs	r1, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	68da      	ldr	r2, [r3, #12]
 8002890:	4b10      	ldr	r3, [pc, #64]	; (80028d4 <HAL_RCC_ClockConfig+0x1f8>)
 8002892:	430a      	orrs	r2, r1
 8002894:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002896:	f000 f829 	bl	80028ec <HAL_RCC_GetSysClockFreq>
 800289a:	0001      	movs	r1, r0
 800289c:	4b0d      	ldr	r3, [pc, #52]	; (80028d4 <HAL_RCC_ClockConfig+0x1f8>)
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	0a1b      	lsrs	r3, r3, #8
 80028a2:	220f      	movs	r2, #15
 80028a4:	401a      	ands	r2, r3
 80028a6:	4b0e      	ldr	r3, [pc, #56]	; (80028e0 <HAL_RCC_ClockConfig+0x204>)
 80028a8:	0092      	lsls	r2, r2, #2
 80028aa:	58d3      	ldr	r3, [r2, r3]
 80028ac:	221f      	movs	r2, #31
 80028ae:	4013      	ands	r3, r2
 80028b0:	000a      	movs	r2, r1
 80028b2:	40da      	lsrs	r2, r3
 80028b4:	4b0b      	ldr	r3, [pc, #44]	; (80028e4 <HAL_RCC_ClockConfig+0x208>)
 80028b6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80028b8:	4b0b      	ldr	r3, [pc, #44]	; (80028e8 <HAL_RCC_ClockConfig+0x20c>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	0018      	movs	r0, r3
 80028be:	f7fd ffb9 	bl	8000834 <HAL_InitTick>
 80028c2:	0003      	movs	r3, r0
}
 80028c4:	0018      	movs	r0, r3
 80028c6:	46bd      	mov	sp, r7
 80028c8:	b004      	add	sp, #16
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	40022000 	.word	0x40022000
 80028d0:	00001388 	.word	0x00001388
 80028d4:	40021000 	.word	0x40021000
 80028d8:	fffff0ff 	.word	0xfffff0ff
 80028dc:	ffff8fff 	.word	0xffff8fff
 80028e0:	08002ed8 	.word	0x08002ed8
 80028e4:	20000000 	.word	0x20000000
 80028e8:	20000004 	.word	0x20000004

080028ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028f2:	4b3c      	ldr	r3, [pc, #240]	; (80029e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	2238      	movs	r2, #56	; 0x38
 80028f8:	4013      	ands	r3, r2
 80028fa:	d10f      	bne.n	800291c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80028fc:	4b39      	ldr	r3, [pc, #228]	; (80029e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	0adb      	lsrs	r3, r3, #11
 8002902:	2207      	movs	r2, #7
 8002904:	4013      	ands	r3, r2
 8002906:	2201      	movs	r2, #1
 8002908:	409a      	lsls	r2, r3
 800290a:	0013      	movs	r3, r2
 800290c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800290e:	6839      	ldr	r1, [r7, #0]
 8002910:	4835      	ldr	r0, [pc, #212]	; (80029e8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002912:	f7fd fbf7 	bl	8000104 <__udivsi3>
 8002916:	0003      	movs	r3, r0
 8002918:	613b      	str	r3, [r7, #16]
 800291a:	e05d      	b.n	80029d8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800291c:	4b31      	ldr	r3, [pc, #196]	; (80029e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	2238      	movs	r2, #56	; 0x38
 8002922:	4013      	ands	r3, r2
 8002924:	2b08      	cmp	r3, #8
 8002926:	d102      	bne.n	800292e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002928:	4b30      	ldr	r3, [pc, #192]	; (80029ec <HAL_RCC_GetSysClockFreq+0x100>)
 800292a:	613b      	str	r3, [r7, #16]
 800292c:	e054      	b.n	80029d8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800292e:	4b2d      	ldr	r3, [pc, #180]	; (80029e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	2238      	movs	r2, #56	; 0x38
 8002934:	4013      	ands	r3, r2
 8002936:	2b10      	cmp	r3, #16
 8002938:	d138      	bne.n	80029ac <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800293a:	4b2a      	ldr	r3, [pc, #168]	; (80029e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	2203      	movs	r2, #3
 8002940:	4013      	ands	r3, r2
 8002942:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002944:	4b27      	ldr	r3, [pc, #156]	; (80029e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	091b      	lsrs	r3, r3, #4
 800294a:	2207      	movs	r2, #7
 800294c:	4013      	ands	r3, r2
 800294e:	3301      	adds	r3, #1
 8002950:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2b03      	cmp	r3, #3
 8002956:	d10d      	bne.n	8002974 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002958:	68b9      	ldr	r1, [r7, #8]
 800295a:	4824      	ldr	r0, [pc, #144]	; (80029ec <HAL_RCC_GetSysClockFreq+0x100>)
 800295c:	f7fd fbd2 	bl	8000104 <__udivsi3>
 8002960:	0003      	movs	r3, r0
 8002962:	0019      	movs	r1, r3
 8002964:	4b1f      	ldr	r3, [pc, #124]	; (80029e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	0a1b      	lsrs	r3, r3, #8
 800296a:	227f      	movs	r2, #127	; 0x7f
 800296c:	4013      	ands	r3, r2
 800296e:	434b      	muls	r3, r1
 8002970:	617b      	str	r3, [r7, #20]
        break;
 8002972:	e00d      	b.n	8002990 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002974:	68b9      	ldr	r1, [r7, #8]
 8002976:	481c      	ldr	r0, [pc, #112]	; (80029e8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002978:	f7fd fbc4 	bl	8000104 <__udivsi3>
 800297c:	0003      	movs	r3, r0
 800297e:	0019      	movs	r1, r3
 8002980:	4b18      	ldr	r3, [pc, #96]	; (80029e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	0a1b      	lsrs	r3, r3, #8
 8002986:	227f      	movs	r2, #127	; 0x7f
 8002988:	4013      	ands	r3, r2
 800298a:	434b      	muls	r3, r1
 800298c:	617b      	str	r3, [r7, #20]
        break;
 800298e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002990:	4b14      	ldr	r3, [pc, #80]	; (80029e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	0f5b      	lsrs	r3, r3, #29
 8002996:	2207      	movs	r2, #7
 8002998:	4013      	ands	r3, r2
 800299a:	3301      	adds	r3, #1
 800299c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800299e:	6879      	ldr	r1, [r7, #4]
 80029a0:	6978      	ldr	r0, [r7, #20]
 80029a2:	f7fd fbaf 	bl	8000104 <__udivsi3>
 80029a6:	0003      	movs	r3, r0
 80029a8:	613b      	str	r3, [r7, #16]
 80029aa:	e015      	b.n	80029d8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80029ac:	4b0d      	ldr	r3, [pc, #52]	; (80029e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	2238      	movs	r2, #56	; 0x38
 80029b2:	4013      	ands	r3, r2
 80029b4:	2b20      	cmp	r3, #32
 80029b6:	d103      	bne.n	80029c0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80029b8:	2380      	movs	r3, #128	; 0x80
 80029ba:	021b      	lsls	r3, r3, #8
 80029bc:	613b      	str	r3, [r7, #16]
 80029be:	e00b      	b.n	80029d8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80029c0:	4b08      	ldr	r3, [pc, #32]	; (80029e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	2238      	movs	r2, #56	; 0x38
 80029c6:	4013      	ands	r3, r2
 80029c8:	2b18      	cmp	r3, #24
 80029ca:	d103      	bne.n	80029d4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80029cc:	23fa      	movs	r3, #250	; 0xfa
 80029ce:	01db      	lsls	r3, r3, #7
 80029d0:	613b      	str	r3, [r7, #16]
 80029d2:	e001      	b.n	80029d8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80029d4:	2300      	movs	r3, #0
 80029d6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80029d8:	693b      	ldr	r3, [r7, #16]
}
 80029da:	0018      	movs	r0, r3
 80029dc:	46bd      	mov	sp, r7
 80029de:	b006      	add	sp, #24
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	46c0      	nop			; (mov r8, r8)
 80029e4:	40021000 	.word	0x40021000
 80029e8:	00f42400 	.word	0x00f42400
 80029ec:	007a1200 	.word	0x007a1200

080029f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b086      	sub	sp, #24
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80029f8:	2313      	movs	r3, #19
 80029fa:	18fb      	adds	r3, r7, r3
 80029fc:	2200      	movs	r2, #0
 80029fe:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a00:	2312      	movs	r3, #18
 8002a02:	18fb      	adds	r3, r7, r3
 8002a04:	2200      	movs	r2, #0
 8002a06:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	2380      	movs	r3, #128	; 0x80
 8002a0e:	029b      	lsls	r3, r3, #10
 8002a10:	4013      	ands	r3, r2
 8002a12:	d100      	bne.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002a14:	e0ad      	b.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a16:	2011      	movs	r0, #17
 8002a18:	183b      	adds	r3, r7, r0
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a1e:	4b47      	ldr	r3, [pc, #284]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002a20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a22:	2380      	movs	r3, #128	; 0x80
 8002a24:	055b      	lsls	r3, r3, #21
 8002a26:	4013      	ands	r3, r2
 8002a28:	d110      	bne.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a2a:	4b44      	ldr	r3, [pc, #272]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002a2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a2e:	4b43      	ldr	r3, [pc, #268]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002a30:	2180      	movs	r1, #128	; 0x80
 8002a32:	0549      	lsls	r1, r1, #21
 8002a34:	430a      	orrs	r2, r1
 8002a36:	63da      	str	r2, [r3, #60]	; 0x3c
 8002a38:	4b40      	ldr	r3, [pc, #256]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002a3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a3c:	2380      	movs	r3, #128	; 0x80
 8002a3e:	055b      	lsls	r3, r3, #21
 8002a40:	4013      	ands	r3, r2
 8002a42:	60bb      	str	r3, [r7, #8]
 8002a44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a46:	183b      	adds	r3, r7, r0
 8002a48:	2201      	movs	r2, #1
 8002a4a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a4c:	4b3c      	ldr	r3, [pc, #240]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	4b3b      	ldr	r3, [pc, #236]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002a52:	2180      	movs	r1, #128	; 0x80
 8002a54:	0049      	lsls	r1, r1, #1
 8002a56:	430a      	orrs	r2, r1
 8002a58:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a5a:	f7fd ff47 	bl	80008ec <HAL_GetTick>
 8002a5e:	0003      	movs	r3, r0
 8002a60:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a62:	e00b      	b.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a64:	f7fd ff42 	bl	80008ec <HAL_GetTick>
 8002a68:	0002      	movs	r2, r0
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d904      	bls.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002a72:	2313      	movs	r3, #19
 8002a74:	18fb      	adds	r3, r7, r3
 8002a76:	2203      	movs	r2, #3
 8002a78:	701a      	strb	r2, [r3, #0]
        break;
 8002a7a:	e005      	b.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a7c:	4b30      	ldr	r3, [pc, #192]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	2380      	movs	r3, #128	; 0x80
 8002a82:	005b      	lsls	r3, r3, #1
 8002a84:	4013      	ands	r3, r2
 8002a86:	d0ed      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002a88:	2313      	movs	r3, #19
 8002a8a:	18fb      	adds	r3, r7, r3
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d15e      	bne.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a92:	4b2a      	ldr	r3, [pc, #168]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002a94:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a96:	23c0      	movs	r3, #192	; 0xc0
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d019      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa8:	697a      	ldr	r2, [r7, #20]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d014      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002aae:	4b23      	ldr	r3, [pc, #140]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002ab0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ab2:	4a24      	ldr	r2, [pc, #144]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ab8:	4b20      	ldr	r3, [pc, #128]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002aba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002abc:	4b1f      	ldr	r3, [pc, #124]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002abe:	2180      	movs	r1, #128	; 0x80
 8002ac0:	0249      	lsls	r1, r1, #9
 8002ac2:	430a      	orrs	r2, r1
 8002ac4:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ac6:	4b1d      	ldr	r3, [pc, #116]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002ac8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002aca:	4b1c      	ldr	r3, [pc, #112]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002acc:	491e      	ldr	r1, [pc, #120]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8002ace:	400a      	ands	r2, r1
 8002ad0:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ad2:	4b1a      	ldr	r3, [pc, #104]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002ad4:	697a      	ldr	r2, [r7, #20]
 8002ad6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	2201      	movs	r2, #1
 8002adc:	4013      	ands	r3, r2
 8002ade:	d016      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae0:	f7fd ff04 	bl	80008ec <HAL_GetTick>
 8002ae4:	0003      	movs	r3, r0
 8002ae6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ae8:	e00c      	b.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aea:	f7fd feff 	bl	80008ec <HAL_GetTick>
 8002aee:	0002      	movs	r2, r0
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	4a15      	ldr	r2, [pc, #84]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d904      	bls.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002afa:	2313      	movs	r3, #19
 8002afc:	18fb      	adds	r3, r7, r3
 8002afe:	2203      	movs	r2, #3
 8002b00:	701a      	strb	r2, [r3, #0]
            break;
 8002b02:	e004      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b04:	4b0d      	ldr	r3, [pc, #52]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002b06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b08:	2202      	movs	r2, #2
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	d0ed      	beq.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002b0e:	2313      	movs	r3, #19
 8002b10:	18fb      	adds	r3, r7, r3
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d10a      	bne.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b18:	4b08      	ldr	r3, [pc, #32]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002b1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b1c:	4a09      	ldr	r2, [pc, #36]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002b1e:	4013      	ands	r3, r2
 8002b20:	0019      	movs	r1, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b26:	4b05      	ldr	r3, [pc, #20]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	65da      	str	r2, [r3, #92]	; 0x5c
 8002b2c:	e016      	b.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b2e:	2312      	movs	r3, #18
 8002b30:	18fb      	adds	r3, r7, r3
 8002b32:	2213      	movs	r2, #19
 8002b34:	18ba      	adds	r2, r7, r2
 8002b36:	7812      	ldrb	r2, [r2, #0]
 8002b38:	701a      	strb	r2, [r3, #0]
 8002b3a:	e00f      	b.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002b3c:	40021000 	.word	0x40021000
 8002b40:	40007000 	.word	0x40007000
 8002b44:	fffffcff 	.word	0xfffffcff
 8002b48:	fffeffff 	.word	0xfffeffff
 8002b4c:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b50:	2312      	movs	r3, #18
 8002b52:	18fb      	adds	r3, r7, r3
 8002b54:	2213      	movs	r2, #19
 8002b56:	18ba      	adds	r2, r7, r2
 8002b58:	7812      	ldrb	r2, [r2, #0]
 8002b5a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b5c:	2311      	movs	r3, #17
 8002b5e:	18fb      	adds	r3, r7, r3
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d105      	bne.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b66:	4bb6      	ldr	r3, [pc, #728]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b6a:	4bb5      	ldr	r3, [pc, #724]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b6c:	49b5      	ldr	r1, [pc, #724]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002b6e:	400a      	ands	r2, r1
 8002b70:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2201      	movs	r2, #1
 8002b78:	4013      	ands	r3, r2
 8002b7a:	d009      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b7c:	4bb0      	ldr	r3, [pc, #704]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b80:	2203      	movs	r2, #3
 8002b82:	4393      	bics	r3, r2
 8002b84:	0019      	movs	r1, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685a      	ldr	r2, [r3, #4]
 8002b8a:	4bad      	ldr	r3, [pc, #692]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2202      	movs	r2, #2
 8002b96:	4013      	ands	r3, r2
 8002b98:	d009      	beq.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b9a:	4ba9      	ldr	r3, [pc, #676]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b9e:	220c      	movs	r2, #12
 8002ba0:	4393      	bics	r3, r2
 8002ba2:	0019      	movs	r1, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689a      	ldr	r2, [r3, #8]
 8002ba8:	4ba5      	ldr	r3, [pc, #660]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002baa:	430a      	orrs	r2, r1
 8002bac:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2204      	movs	r2, #4
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	d009      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002bb8:	4ba1      	ldr	r3, [pc, #644]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bbc:	2230      	movs	r2, #48	; 0x30
 8002bbe:	4393      	bics	r3, r2
 8002bc0:	0019      	movs	r1, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	68da      	ldr	r2, [r3, #12]
 8002bc6:	4b9e      	ldr	r3, [pc, #632]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002bc8:	430a      	orrs	r2, r1
 8002bca:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2210      	movs	r2, #16
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	d009      	beq.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002bd6:	4b9a      	ldr	r3, [pc, #616]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bda:	4a9b      	ldr	r2, [pc, #620]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002bdc:	4013      	ands	r3, r2
 8002bde:	0019      	movs	r1, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	691a      	ldr	r2, [r3, #16]
 8002be4:	4b96      	ldr	r3, [pc, #600]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002be6:	430a      	orrs	r2, r1
 8002be8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	2380      	movs	r3, #128	; 0x80
 8002bf0:	015b      	lsls	r3, r3, #5
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	d009      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8002bf6:	4b92      	ldr	r3, [pc, #584]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bfa:	4a94      	ldr	r2, [pc, #592]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	0019      	movs	r1, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	695a      	ldr	r2, [r3, #20]
 8002c04:	4b8e      	ldr	r3, [pc, #568]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002c06:	430a      	orrs	r2, r1
 8002c08:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	2380      	movs	r3, #128	; 0x80
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	4013      	ands	r3, r2
 8002c14:	d009      	beq.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c16:	4b8a      	ldr	r3, [pc, #552]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c1a:	4a8d      	ldr	r2, [pc, #564]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	0019      	movs	r1, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c24:	4b86      	ldr	r3, [pc, #536]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002c26:	430a      	orrs	r2, r1
 8002c28:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	2380      	movs	r3, #128	; 0x80
 8002c30:	00db      	lsls	r3, r3, #3
 8002c32:	4013      	ands	r3, r2
 8002c34:	d009      	beq.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002c36:	4b82      	ldr	r3, [pc, #520]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c3a:	4a86      	ldr	r2, [pc, #536]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	0019      	movs	r1, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c44:	4b7e      	ldr	r3, [pc, #504]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002c46:	430a      	orrs	r2, r1
 8002c48:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2220      	movs	r2, #32
 8002c50:	4013      	ands	r3, r2
 8002c52:	d009      	beq.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c54:	4b7a      	ldr	r3, [pc, #488]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c58:	4a7f      	ldr	r2, [pc, #508]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	0019      	movs	r1, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	699a      	ldr	r2, [r3, #24]
 8002c62:	4b77      	ldr	r3, [pc, #476]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002c64:	430a      	orrs	r2, r1
 8002c66:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2240      	movs	r2, #64	; 0x40
 8002c6e:	4013      	ands	r3, r2
 8002c70:	d009      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c72:	4b73      	ldr	r3, [pc, #460]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c76:	4a79      	ldr	r2, [pc, #484]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8002c78:	4013      	ands	r3, r2
 8002c7a:	0019      	movs	r1, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	69da      	ldr	r2, [r3, #28]
 8002c80:	4b6f      	ldr	r3, [pc, #444]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002c82:	430a      	orrs	r2, r1
 8002c84:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	2380      	movs	r3, #128	; 0x80
 8002c8c:	01db      	lsls	r3, r3, #7
 8002c8e:	4013      	ands	r3, r2
 8002c90:	d015      	beq.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c92:	4b6b      	ldr	r3, [pc, #428]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	0899      	lsrs	r1, r3, #2
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c9e:	4b68      	ldr	r3, [pc, #416]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ca0:	430a      	orrs	r2, r1
 8002ca2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ca8:	2380      	movs	r3, #128	; 0x80
 8002caa:	05db      	lsls	r3, r3, #23
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d106      	bne.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002cb0:	4b63      	ldr	r3, [pc, #396]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002cb2:	68da      	ldr	r2, [r3, #12]
 8002cb4:	4b62      	ldr	r3, [pc, #392]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002cb6:	2180      	movs	r1, #128	; 0x80
 8002cb8:	0249      	lsls	r1, r1, #9
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	2380      	movs	r3, #128	; 0x80
 8002cc4:	031b      	lsls	r3, r3, #12
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	d009      	beq.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002cca:	4b5d      	ldr	r3, [pc, #372]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cce:	2240      	movs	r2, #64	; 0x40
 8002cd0:	4393      	bics	r3, r2
 8002cd2:	0019      	movs	r1, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cd8:	4b59      	ldr	r3, [pc, #356]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	2380      	movs	r3, #128	; 0x80
 8002ce4:	039b      	lsls	r3, r3, #14
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	d016      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002cea:	4b55      	ldr	r3, [pc, #340]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cee:	4a5c      	ldr	r2, [pc, #368]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	0019      	movs	r1, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cf8:	4b51      	ldr	r3, [pc, #324]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d02:	2380      	movs	r3, #128	; 0x80
 8002d04:	03db      	lsls	r3, r3, #15
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d106      	bne.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002d0a:	4b4d      	ldr	r3, [pc, #308]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d0c:	68da      	ldr	r2, [r3, #12]
 8002d0e:	4b4c      	ldr	r3, [pc, #304]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d10:	2180      	movs	r1, #128	; 0x80
 8002d12:	0449      	lsls	r1, r1, #17
 8002d14:	430a      	orrs	r2, r1
 8002d16:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	2380      	movs	r3, #128	; 0x80
 8002d1e:	03db      	lsls	r3, r3, #15
 8002d20:	4013      	ands	r3, r2
 8002d22:	d016      	beq.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002d24:	4b46      	ldr	r3, [pc, #280]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d28:	4a4e      	ldr	r2, [pc, #312]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	0019      	movs	r1, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d32:	4b43      	ldr	r3, [pc, #268]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d34:	430a      	orrs	r2, r1
 8002d36:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d3c:	2380      	movs	r3, #128	; 0x80
 8002d3e:	045b      	lsls	r3, r3, #17
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d106      	bne.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002d44:	4b3e      	ldr	r3, [pc, #248]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d46:	68da      	ldr	r2, [r3, #12]
 8002d48:	4b3d      	ldr	r3, [pc, #244]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d4a:	2180      	movs	r1, #128	; 0x80
 8002d4c:	0449      	lsls	r1, r1, #17
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	2380      	movs	r3, #128	; 0x80
 8002d58:	011b      	lsls	r3, r3, #4
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	d014      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002d5e:	4b38      	ldr	r3, [pc, #224]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d62:	2203      	movs	r2, #3
 8002d64:	4393      	bics	r3, r2
 8002d66:	0019      	movs	r1, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a1a      	ldr	r2, [r3, #32]
 8002d6c:	4b34      	ldr	r3, [pc, #208]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a1b      	ldr	r3, [r3, #32]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d106      	bne.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002d7a:	4b31      	ldr	r3, [pc, #196]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d7c:	68da      	ldr	r2, [r3, #12]
 8002d7e:	4b30      	ldr	r3, [pc, #192]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d80:	2180      	movs	r1, #128	; 0x80
 8002d82:	0249      	lsls	r1, r1, #9
 8002d84:	430a      	orrs	r2, r1
 8002d86:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	2380      	movs	r3, #128	; 0x80
 8002d8e:	019b      	lsls	r3, r3, #6
 8002d90:	4013      	ands	r3, r2
 8002d92:	d014      	beq.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002d94:	4b2a      	ldr	r3, [pc, #168]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d98:	220c      	movs	r2, #12
 8002d9a:	4393      	bics	r3, r2
 8002d9c:	0019      	movs	r1, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002da2:	4b27      	ldr	r3, [pc, #156]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002da4:	430a      	orrs	r2, r1
 8002da6:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dac:	2b04      	cmp	r3, #4
 8002dae:	d106      	bne.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002db0:	4b23      	ldr	r3, [pc, #140]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002db2:	68da      	ldr	r2, [r3, #12]
 8002db4:	4b22      	ldr	r3, [pc, #136]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002db6:	2180      	movs	r1, #128	; 0x80
 8002db8:	0249      	lsls	r1, r1, #9
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	2380      	movs	r3, #128	; 0x80
 8002dc4:	045b      	lsls	r3, r3, #17
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	d016      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002dca:	4b1d      	ldr	r3, [pc, #116]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dce:	4a22      	ldr	r2, [pc, #136]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	0019      	movs	r1, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002dd8:	4b19      	ldr	r3, [pc, #100]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002de2:	2380      	movs	r3, #128	; 0x80
 8002de4:	019b      	lsls	r3, r3, #6
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d106      	bne.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002dea:	4b15      	ldr	r3, [pc, #84]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002dec:	68da      	ldr	r2, [r3, #12]
 8002dee:	4b14      	ldr	r3, [pc, #80]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002df0:	2180      	movs	r1, #128	; 0x80
 8002df2:	0449      	lsls	r1, r1, #17
 8002df4:	430a      	orrs	r2, r1
 8002df6:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	2380      	movs	r3, #128	; 0x80
 8002dfe:	049b      	lsls	r3, r3, #18
 8002e00:	4013      	ands	r3, r2
 8002e02:	d016      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002e04:	4b0e      	ldr	r3, [pc, #56]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e08:	4a10      	ldr	r2, [pc, #64]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	0019      	movs	r1, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002e12:	4b0b      	ldr	r3, [pc, #44]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e14:	430a      	orrs	r2, r1
 8002e16:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002e1c:	2380      	movs	r3, #128	; 0x80
 8002e1e:	005b      	lsls	r3, r3, #1
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d106      	bne.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002e24:	4b06      	ldr	r3, [pc, #24]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e26:	68da      	ldr	r2, [r3, #12]
 8002e28:	4b05      	ldr	r3, [pc, #20]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e2a:	2180      	movs	r1, #128	; 0x80
 8002e2c:	0449      	lsls	r1, r1, #17
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002e32:	2312      	movs	r3, #18
 8002e34:	18fb      	adds	r3, r7, r3
 8002e36:	781b      	ldrb	r3, [r3, #0]
}
 8002e38:	0018      	movs	r0, r3
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	b006      	add	sp, #24
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	40021000 	.word	0x40021000
 8002e44:	efffffff 	.word	0xefffffff
 8002e48:	fffff3ff 	.word	0xfffff3ff
 8002e4c:	fffffcff 	.word	0xfffffcff
 8002e50:	fff3ffff 	.word	0xfff3ffff
 8002e54:	ffcfffff 	.word	0xffcfffff
 8002e58:	ffffcfff 	.word	0xffffcfff
 8002e5c:	ffff3fff 	.word	0xffff3fff
 8002e60:	ffbfffff 	.word	0xffbfffff
 8002e64:	feffffff 	.word	0xfeffffff

08002e68 <__libc_init_array>:
 8002e68:	b570      	push	{r4, r5, r6, lr}
 8002e6a:	2600      	movs	r6, #0
 8002e6c:	4d0c      	ldr	r5, [pc, #48]	; (8002ea0 <__libc_init_array+0x38>)
 8002e6e:	4c0d      	ldr	r4, [pc, #52]	; (8002ea4 <__libc_init_array+0x3c>)
 8002e70:	1b64      	subs	r4, r4, r5
 8002e72:	10a4      	asrs	r4, r4, #2
 8002e74:	42a6      	cmp	r6, r4
 8002e76:	d109      	bne.n	8002e8c <__libc_init_array+0x24>
 8002e78:	2600      	movs	r6, #0
 8002e7a:	f000 f821 	bl	8002ec0 <_init>
 8002e7e:	4d0a      	ldr	r5, [pc, #40]	; (8002ea8 <__libc_init_array+0x40>)
 8002e80:	4c0a      	ldr	r4, [pc, #40]	; (8002eac <__libc_init_array+0x44>)
 8002e82:	1b64      	subs	r4, r4, r5
 8002e84:	10a4      	asrs	r4, r4, #2
 8002e86:	42a6      	cmp	r6, r4
 8002e88:	d105      	bne.n	8002e96 <__libc_init_array+0x2e>
 8002e8a:	bd70      	pop	{r4, r5, r6, pc}
 8002e8c:	00b3      	lsls	r3, r6, #2
 8002e8e:	58eb      	ldr	r3, [r5, r3]
 8002e90:	4798      	blx	r3
 8002e92:	3601      	adds	r6, #1
 8002e94:	e7ee      	b.n	8002e74 <__libc_init_array+0xc>
 8002e96:	00b3      	lsls	r3, r6, #2
 8002e98:	58eb      	ldr	r3, [r5, r3]
 8002e9a:	4798      	blx	r3
 8002e9c:	3601      	adds	r6, #1
 8002e9e:	e7f2      	b.n	8002e86 <__libc_init_array+0x1e>
 8002ea0:	08002f18 	.word	0x08002f18
 8002ea4:	08002f18 	.word	0x08002f18
 8002ea8:	08002f18 	.word	0x08002f18
 8002eac:	08002f1c 	.word	0x08002f1c

08002eb0 <memset>:
 8002eb0:	0003      	movs	r3, r0
 8002eb2:	1882      	adds	r2, r0, r2
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d100      	bne.n	8002eba <memset+0xa>
 8002eb8:	4770      	bx	lr
 8002eba:	7019      	strb	r1, [r3, #0]
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	e7f9      	b.n	8002eb4 <memset+0x4>

08002ec0 <_init>:
 8002ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ec2:	46c0      	nop			; (mov r8, r8)
 8002ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ec6:	bc08      	pop	{r3}
 8002ec8:	469e      	mov	lr, r3
 8002eca:	4770      	bx	lr

08002ecc <_fini>:
 8002ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ece:	46c0      	nop			; (mov r8, r8)
 8002ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ed2:	bc08      	pop	{r3}
 8002ed4:	469e      	mov	lr, r3
 8002ed6:	4770      	bx	lr
