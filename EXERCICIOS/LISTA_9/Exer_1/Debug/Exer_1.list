
Exer_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000287c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08002938  08002938  00012938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029cc  080029cc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080029cc  080029cc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080029cc  080029cc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029cc  080029cc  000129cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080029d0  080029d0  000129d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080029d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  2000000c  080029e0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  080029e0  0002007c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a870  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017b7  00000000  00000000  0002a8a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad0  00000000  00000000  0002c060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a18  00000000  00000000  0002cb30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a805  00000000  00000000  0002d548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b09d  00000000  00000000  00047d4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b0071  00000000  00000000  00052dea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00102e5b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026ac  00000000  00000000  00102eb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08002920 	.word	0x08002920

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08002920 	.word	0x08002920

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <PWM_Set_DC>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

	void PWM_Set_DC(TIM_HandleTypeDef * timer, uint32_t channel, uint8_t dc){
 800021c:	b580      	push	{r7, lr}
 800021e:	b086      	sub	sp, #24
 8000220:	af00      	add	r7, sp, #0
 8000222:	60f8      	str	r0, [r7, #12]
 8000224:	60b9      	str	r1, [r7, #8]
 8000226:	1dfb      	adds	r3, r7, #7
 8000228:	701a      	strb	r2, [r3, #0]
		uint32_t arr, ccrx;

		arr = __HAL_TIM_GET_AUTORELOAD(timer);
 800022a:	68fb      	ldr	r3, [r7, #12]
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000230:	617b      	str	r3, [r7, #20]
		if (dc <= 100){
 8000232:	1dfb      	adds	r3, r7, #7
 8000234:	781b      	ldrb	r3, [r3, #0]
 8000236:	2b64      	cmp	r3, #100	; 0x64
 8000238:	d835      	bhi.n	80002a6 <PWM_Set_DC+0x8a>
		ccrx = arr*dc/100;
 800023a:	1dfb      	adds	r3, r7, #7
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	697a      	ldr	r2, [r7, #20]
 8000240:	4353      	muls	r3, r2
 8000242:	2164      	movs	r1, #100	; 0x64
 8000244:	0018      	movs	r0, r3
 8000246:	f7ff ff5d 	bl	8000104 <__udivsi3>
 800024a:	0003      	movs	r3, r0
 800024c:	613b      	str	r3, [r7, #16]
		__HAL_TIM_SET_COMPARE(timer, channel, ccrx);
 800024e:	68bb      	ldr	r3, [r7, #8]
 8000250:	2b00      	cmp	r3, #0
 8000252:	d104      	bne.n	800025e <PWM_Set_DC+0x42>
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	693a      	ldr	r2, [r7, #16]
 800025a:	635a      	str	r2, [r3, #52]	; 0x34
	}

}
 800025c:	e023      	b.n	80002a6 <PWM_Set_DC+0x8a>
		__HAL_TIM_SET_COMPARE(timer, channel, ccrx);
 800025e:	68bb      	ldr	r3, [r7, #8]
 8000260:	2b04      	cmp	r3, #4
 8000262:	d104      	bne.n	800026e <PWM_Set_DC+0x52>
 8000264:	68fb      	ldr	r3, [r7, #12]
 8000266:	681a      	ldr	r2, [r3, #0]
 8000268:	693b      	ldr	r3, [r7, #16]
 800026a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800026c:	e01b      	b.n	80002a6 <PWM_Set_DC+0x8a>
		__HAL_TIM_SET_COMPARE(timer, channel, ccrx);
 800026e:	68bb      	ldr	r3, [r7, #8]
 8000270:	2b08      	cmp	r3, #8
 8000272:	d104      	bne.n	800027e <PWM_Set_DC+0x62>
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	681a      	ldr	r2, [r3, #0]
 8000278:	693b      	ldr	r3, [r7, #16]
 800027a:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800027c:	e013      	b.n	80002a6 <PWM_Set_DC+0x8a>
		__HAL_TIM_SET_COMPARE(timer, channel, ccrx);
 800027e:	68bb      	ldr	r3, [r7, #8]
 8000280:	2b0c      	cmp	r3, #12
 8000282:	d104      	bne.n	800028e <PWM_Set_DC+0x72>
 8000284:	68fb      	ldr	r3, [r7, #12]
 8000286:	681a      	ldr	r2, [r3, #0]
 8000288:	693b      	ldr	r3, [r7, #16]
 800028a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800028c:	e00b      	b.n	80002a6 <PWM_Set_DC+0x8a>
		__HAL_TIM_SET_COMPARE(timer, channel, ccrx);
 800028e:	68bb      	ldr	r3, [r7, #8]
 8000290:	2b10      	cmp	r3, #16
 8000292:	d104      	bne.n	800029e <PWM_Set_DC+0x82>
 8000294:	68fb      	ldr	r3, [r7, #12]
 8000296:	681a      	ldr	r2, [r3, #0]
 8000298:	693b      	ldr	r3, [r7, #16]
 800029a:	6593      	str	r3, [r2, #88]	; 0x58
}
 800029c:	e003      	b.n	80002a6 <PWM_Set_DC+0x8a>
		__HAL_TIM_SET_COMPARE(timer, channel, ccrx);
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	681a      	ldr	r2, [r3, #0]
 80002a2:	693b      	ldr	r3, [r7, #16]
 80002a4:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 80002a6:	46c0      	nop			; (mov r8, r8)
 80002a8:	46bd      	mov	sp, r7
 80002aa:	b006      	add	sp, #24
 80002ac:	bd80      	pop	{r7, pc}
	...

080002b0 <HAL_GPIO_EXTI_Rising_Callback>:
	uint32_t contador = 0;

	void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin){
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b082      	sub	sp, #8
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	0002      	movs	r2, r0
 80002b8:	1dbb      	adds	r3, r7, #6
 80002ba:	801a      	strh	r2, [r3, #0]


			if(contador == 0){
 80002bc:	4b28      	ldr	r3, [pc, #160]	; (8000360 <HAL_GPIO_EXTI_Rising_Callback+0xb0>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d10b      	bne.n	80002dc <HAL_GPIO_EXTI_Rising_Callback+0x2c>
		  		PWM_Set_DC(&htim2, TIM_CHANNEL_1, 10);
 80002c4:	4b27      	ldr	r3, [pc, #156]	; (8000364 <HAL_GPIO_EXTI_Rising_Callback+0xb4>)
 80002c6:	220a      	movs	r2, #10
 80002c8:	2100      	movs	r1, #0
 80002ca:	0018      	movs	r0, r3
 80002cc:	f7ff ffa6 	bl	800021c <PWM_Set_DC>
		  		contador++;
 80002d0:	4b23      	ldr	r3, [pc, #140]	; (8000360 <HAL_GPIO_EXTI_Rising_Callback+0xb0>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	1c5a      	adds	r2, r3, #1
 80002d6:	4b22      	ldr	r3, [pc, #136]	; (8000360 <HAL_GPIO_EXTI_Rising_Callback+0xb0>)
 80002d8:	601a      	str	r2, [r3, #0]
		  	}else if(contador == 4){
		  				PWM_Set_DC(&htim2, TIM_CHANNEL_1, 100);
		  				contador = 0;
		  	}

	}
 80002da:	e03c      	b.n	8000356 <HAL_GPIO_EXTI_Rising_Callback+0xa6>
		  	}else if(contador == 1){
 80002dc:	4b20      	ldr	r3, [pc, #128]	; (8000360 <HAL_GPIO_EXTI_Rising_Callback+0xb0>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	2b01      	cmp	r3, #1
 80002e2:	d10b      	bne.n	80002fc <HAL_GPIO_EXTI_Rising_Callback+0x4c>
		  			PWM_Set_DC(&htim2, TIM_CHANNEL_1, 25);
 80002e4:	4b1f      	ldr	r3, [pc, #124]	; (8000364 <HAL_GPIO_EXTI_Rising_Callback+0xb4>)
 80002e6:	2219      	movs	r2, #25
 80002e8:	2100      	movs	r1, #0
 80002ea:	0018      	movs	r0, r3
 80002ec:	f7ff ff96 	bl	800021c <PWM_Set_DC>
		  			contador++;
 80002f0:	4b1b      	ldr	r3, [pc, #108]	; (8000360 <HAL_GPIO_EXTI_Rising_Callback+0xb0>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	1c5a      	adds	r2, r3, #1
 80002f6:	4b1a      	ldr	r3, [pc, #104]	; (8000360 <HAL_GPIO_EXTI_Rising_Callback+0xb0>)
 80002f8:	601a      	str	r2, [r3, #0]
	}
 80002fa:	e02c      	b.n	8000356 <HAL_GPIO_EXTI_Rising_Callback+0xa6>
		  	}else if(contador == 2){
 80002fc:	4b18      	ldr	r3, [pc, #96]	; (8000360 <HAL_GPIO_EXTI_Rising_Callback+0xb0>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	2b02      	cmp	r3, #2
 8000302:	d10b      	bne.n	800031c <HAL_GPIO_EXTI_Rising_Callback+0x6c>
		  			PWM_Set_DC(&htim2, TIM_CHANNEL_1, 50);
 8000304:	4b17      	ldr	r3, [pc, #92]	; (8000364 <HAL_GPIO_EXTI_Rising_Callback+0xb4>)
 8000306:	2232      	movs	r2, #50	; 0x32
 8000308:	2100      	movs	r1, #0
 800030a:	0018      	movs	r0, r3
 800030c:	f7ff ff86 	bl	800021c <PWM_Set_DC>
		  			contador++;
 8000310:	4b13      	ldr	r3, [pc, #76]	; (8000360 <HAL_GPIO_EXTI_Rising_Callback+0xb0>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	1c5a      	adds	r2, r3, #1
 8000316:	4b12      	ldr	r3, [pc, #72]	; (8000360 <HAL_GPIO_EXTI_Rising_Callback+0xb0>)
 8000318:	601a      	str	r2, [r3, #0]
	}
 800031a:	e01c      	b.n	8000356 <HAL_GPIO_EXTI_Rising_Callback+0xa6>
		  	}else if(contador == 3){
 800031c:	4b10      	ldr	r3, [pc, #64]	; (8000360 <HAL_GPIO_EXTI_Rising_Callback+0xb0>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	2b03      	cmp	r3, #3
 8000322:	d10b      	bne.n	800033c <HAL_GPIO_EXTI_Rising_Callback+0x8c>
		  			PWM_Set_DC(&htim2, TIM_CHANNEL_1, 75);
 8000324:	4b0f      	ldr	r3, [pc, #60]	; (8000364 <HAL_GPIO_EXTI_Rising_Callback+0xb4>)
 8000326:	224b      	movs	r2, #75	; 0x4b
 8000328:	2100      	movs	r1, #0
 800032a:	0018      	movs	r0, r3
 800032c:	f7ff ff76 	bl	800021c <PWM_Set_DC>
		  			contador++;
 8000330:	4b0b      	ldr	r3, [pc, #44]	; (8000360 <HAL_GPIO_EXTI_Rising_Callback+0xb0>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	1c5a      	adds	r2, r3, #1
 8000336:	4b0a      	ldr	r3, [pc, #40]	; (8000360 <HAL_GPIO_EXTI_Rising_Callback+0xb0>)
 8000338:	601a      	str	r2, [r3, #0]
	}
 800033a:	e00c      	b.n	8000356 <HAL_GPIO_EXTI_Rising_Callback+0xa6>
		  	}else if(contador == 4){
 800033c:	4b08      	ldr	r3, [pc, #32]	; (8000360 <HAL_GPIO_EXTI_Rising_Callback+0xb0>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	2b04      	cmp	r3, #4
 8000342:	d108      	bne.n	8000356 <HAL_GPIO_EXTI_Rising_Callback+0xa6>
		  				PWM_Set_DC(&htim2, TIM_CHANNEL_1, 100);
 8000344:	4b07      	ldr	r3, [pc, #28]	; (8000364 <HAL_GPIO_EXTI_Rising_Callback+0xb4>)
 8000346:	2264      	movs	r2, #100	; 0x64
 8000348:	2100      	movs	r1, #0
 800034a:	0018      	movs	r0, r3
 800034c:	f7ff ff66 	bl	800021c <PWM_Set_DC>
		  				contador = 0;
 8000350:	4b03      	ldr	r3, [pc, #12]	; (8000360 <HAL_GPIO_EXTI_Rising_Callback+0xb0>)
 8000352:	2200      	movs	r2, #0
 8000354:	601a      	str	r2, [r3, #0]
	}
 8000356:	46c0      	nop			; (mov r8, r8)
 8000358:	46bd      	mov	sp, r7
 800035a:	b002      	add	sp, #8
 800035c:	bd80      	pop	{r7, pc}
 800035e:	46c0      	nop			; (mov r8, r8)
 8000360:	20000028 	.word	0x20000028
 8000364:	2000002c 	.word	0x2000002c

08000368 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800036c:	f000 fa16 	bl	800079c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000370:	f000 f805 	bl	800037e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000374:	f000 f8e2 	bl	800053c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000378:	f000 f860 	bl	800043c <MX_TIM2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800037c:	e7fe      	b.n	800037c <main+0x14>

0800037e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800037e:	b590      	push	{r4, r7, lr}
 8000380:	b095      	sub	sp, #84	; 0x54
 8000382:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000384:	2414      	movs	r4, #20
 8000386:	193b      	adds	r3, r7, r4
 8000388:	0018      	movs	r0, r3
 800038a:	233c      	movs	r3, #60	; 0x3c
 800038c:	001a      	movs	r2, r3
 800038e:	2100      	movs	r1, #0
 8000390:	f002 fabe 	bl	8002910 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000394:	1d3b      	adds	r3, r7, #4
 8000396:	0018      	movs	r0, r3
 8000398:	2310      	movs	r3, #16
 800039a:	001a      	movs	r2, r3
 800039c:	2100      	movs	r1, #0
 800039e:	f002 fab7 	bl	8002910 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80003a2:	2380      	movs	r3, #128	; 0x80
 80003a4:	009b      	lsls	r3, r3, #2
 80003a6:	0018      	movs	r0, r3
 80003a8:	f000 fd12 	bl	8000dd0 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003ac:	193b      	adds	r3, r7, r4
 80003ae:	2202      	movs	r2, #2
 80003b0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003b2:	193b      	adds	r3, r7, r4
 80003b4:	2280      	movs	r2, #128	; 0x80
 80003b6:	0052      	lsls	r2, r2, #1
 80003b8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80003ba:	0021      	movs	r1, r4
 80003bc:	187b      	adds	r3, r7, r1
 80003be:	2200      	movs	r2, #0
 80003c0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003c2:	187b      	adds	r3, r7, r1
 80003c4:	2240      	movs	r2, #64	; 0x40
 80003c6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003c8:	187b      	adds	r3, r7, r1
 80003ca:	2202      	movs	r2, #2
 80003cc:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003ce:	187b      	adds	r3, r7, r1
 80003d0:	2202      	movs	r2, #2
 80003d2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80003d4:	187b      	adds	r3, r7, r1
 80003d6:	2200      	movs	r2, #0
 80003d8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 80003da:	187b      	adds	r3, r7, r1
 80003dc:	2208      	movs	r2, #8
 80003de:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80003e0:	187b      	adds	r3, r7, r1
 80003e2:	2280      	movs	r2, #128	; 0x80
 80003e4:	0292      	lsls	r2, r2, #10
 80003e6:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80003e8:	187b      	adds	r3, r7, r1
 80003ea:	2280      	movs	r2, #128	; 0x80
 80003ec:	0492      	lsls	r2, r2, #18
 80003ee:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80003f0:	187b      	adds	r3, r7, r1
 80003f2:	2280      	movs	r2, #128	; 0x80
 80003f4:	0592      	lsls	r2, r2, #22
 80003f6:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003f8:	187b      	adds	r3, r7, r1
 80003fa:	0018      	movs	r0, r3
 80003fc:	f000 fd28 	bl	8000e50 <HAL_RCC_OscConfig>
 8000400:	1e03      	subs	r3, r0, #0
 8000402:	d001      	beq.n	8000408 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000404:	f000 f8de 	bl	80005c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000408:	1d3b      	adds	r3, r7, #4
 800040a:	2207      	movs	r2, #7
 800040c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800040e:	1d3b      	adds	r3, r7, #4
 8000410:	2202      	movs	r2, #2
 8000412:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000414:	1d3b      	adds	r3, r7, #4
 8000416:	2200      	movs	r2, #0
 8000418:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800041a:	1d3b      	adds	r3, r7, #4
 800041c:	2200      	movs	r2, #0
 800041e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000420:	1d3b      	adds	r3, r7, #4
 8000422:	2102      	movs	r1, #2
 8000424:	0018      	movs	r0, r3
 8000426:	f001 f879 	bl	800151c <HAL_RCC_ClockConfig>
 800042a:	1e03      	subs	r3, r0, #0
 800042c:	d001      	beq.n	8000432 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800042e:	f000 f8c9 	bl	80005c4 <Error_Handler>
  }
}
 8000432:	46c0      	nop			; (mov r8, r8)
 8000434:	46bd      	mov	sp, r7
 8000436:	b015      	add	sp, #84	; 0x54
 8000438:	bd90      	pop	{r4, r7, pc}
	...

0800043c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b08e      	sub	sp, #56	; 0x38
 8000440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000442:	2328      	movs	r3, #40	; 0x28
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	0018      	movs	r0, r3
 8000448:	2310      	movs	r3, #16
 800044a:	001a      	movs	r2, r3
 800044c:	2100      	movs	r1, #0
 800044e:	f002 fa5f 	bl	8002910 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000452:	231c      	movs	r3, #28
 8000454:	18fb      	adds	r3, r7, r3
 8000456:	0018      	movs	r0, r3
 8000458:	230c      	movs	r3, #12
 800045a:	001a      	movs	r2, r3
 800045c:	2100      	movs	r1, #0
 800045e:	f002 fa57 	bl	8002910 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000462:	003b      	movs	r3, r7
 8000464:	0018      	movs	r0, r3
 8000466:	231c      	movs	r3, #28
 8000468:	001a      	movs	r2, r3
 800046a:	2100      	movs	r1, #0
 800046c:	f002 fa50 	bl	8002910 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000470:	4b30      	ldr	r3, [pc, #192]	; (8000534 <MX_TIM2_Init+0xf8>)
 8000472:	2280      	movs	r2, #128	; 0x80
 8000474:	05d2      	lsls	r2, r2, #23
 8000476:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 8000478:	4b2e      	ldr	r3, [pc, #184]	; (8000534 <MX_TIM2_Init+0xf8>)
 800047a:	223f      	movs	r2, #63	; 0x3f
 800047c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800047e:	4b2d      	ldr	r3, [pc, #180]	; (8000534 <MX_TIM2_Init+0xf8>)
 8000480:	2200      	movs	r2, #0
 8000482:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000484:	4b2b      	ldr	r3, [pc, #172]	; (8000534 <MX_TIM2_Init+0xf8>)
 8000486:	4a2c      	ldr	r2, [pc, #176]	; (8000538 <MX_TIM2_Init+0xfc>)
 8000488:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800048a:	4b2a      	ldr	r3, [pc, #168]	; (8000534 <MX_TIM2_Init+0xf8>)
 800048c:	2200      	movs	r2, #0
 800048e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000490:	4b28      	ldr	r3, [pc, #160]	; (8000534 <MX_TIM2_Init+0xf8>)
 8000492:	2200      	movs	r2, #0
 8000494:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000496:	4b27      	ldr	r3, [pc, #156]	; (8000534 <MX_TIM2_Init+0xf8>)
 8000498:	0018      	movs	r0, r3
 800049a:	f001 f9c9 	bl	8001830 <HAL_TIM_Base_Init>
 800049e:	1e03      	subs	r3, r0, #0
 80004a0:	d001      	beq.n	80004a6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80004a2:	f000 f88f 	bl	80005c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004a6:	2128      	movs	r1, #40	; 0x28
 80004a8:	187b      	adds	r3, r7, r1
 80004aa:	2280      	movs	r2, #128	; 0x80
 80004ac:	0152      	lsls	r2, r2, #5
 80004ae:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80004b0:	187a      	adds	r2, r7, r1
 80004b2:	4b20      	ldr	r3, [pc, #128]	; (8000534 <MX_TIM2_Init+0xf8>)
 80004b4:	0011      	movs	r1, r2
 80004b6:	0018      	movs	r0, r3
 80004b8:	f001 fc9a 	bl	8001df0 <HAL_TIM_ConfigClockSource>
 80004bc:	1e03      	subs	r3, r0, #0
 80004be:	d001      	beq.n	80004c4 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80004c0:	f000 f880 	bl	80005c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80004c4:	4b1b      	ldr	r3, [pc, #108]	; (8000534 <MX_TIM2_Init+0xf8>)
 80004c6:	0018      	movs	r0, r3
 80004c8:	f001 fa0a 	bl	80018e0 <HAL_TIM_PWM_Init>
 80004cc:	1e03      	subs	r3, r0, #0
 80004ce:	d001      	beq.n	80004d4 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80004d0:	f000 f878 	bl	80005c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004d4:	211c      	movs	r1, #28
 80004d6:	187b      	adds	r3, r7, r1
 80004d8:	2200      	movs	r2, #0
 80004da:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004dc:	187b      	adds	r3, r7, r1
 80004de:	2200      	movs	r2, #0
 80004e0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004e2:	187a      	adds	r2, r7, r1
 80004e4:	4b13      	ldr	r3, [pc, #76]	; (8000534 <MX_TIM2_Init+0xf8>)
 80004e6:	0011      	movs	r1, r2
 80004e8:	0018      	movs	r0, r3
 80004ea:	f002 f95f 	bl	80027ac <HAL_TIMEx_MasterConfigSynchronization>
 80004ee:	1e03      	subs	r3, r0, #0
 80004f0:	d001      	beq.n	80004f6 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 80004f2:	f000 f867 	bl	80005c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004f6:	003b      	movs	r3, r7
 80004f8:	2260      	movs	r2, #96	; 0x60
 80004fa:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80004fc:	003b      	movs	r3, r7
 80004fe:	2200      	movs	r2, #0
 8000500:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000502:	003b      	movs	r3, r7
 8000504:	2200      	movs	r2, #0
 8000506:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000508:	003b      	movs	r3, r7
 800050a:	2200      	movs	r2, #0
 800050c:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800050e:	0039      	movs	r1, r7
 8000510:	4b08      	ldr	r3, [pc, #32]	; (8000534 <MX_TIM2_Init+0xf8>)
 8000512:	2200      	movs	r2, #0
 8000514:	0018      	movs	r0, r3
 8000516:	f001 fb75 	bl	8001c04 <HAL_TIM_PWM_ConfigChannel>
 800051a:	1e03      	subs	r3, r0, #0
 800051c:	d001      	beq.n	8000522 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 800051e:	f000 f851 	bl	80005c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000522:	4b04      	ldr	r3, [pc, #16]	; (8000534 <MX_TIM2_Init+0xf8>)
 8000524:	0018      	movs	r0, r3
 8000526:	f000 f89f 	bl	8000668 <HAL_TIM_MspPostInit>

}
 800052a:	46c0      	nop			; (mov r8, r8)
 800052c:	46bd      	mov	sp, r7
 800052e:	b00e      	add	sp, #56	; 0x38
 8000530:	bd80      	pop	{r7, pc}
 8000532:	46c0      	nop			; (mov r8, r8)
 8000534:	2000002c 	.word	0x2000002c
 8000538:	000003e7 	.word	0x000003e7

0800053c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800053c:	b590      	push	{r4, r7, lr}
 800053e:	b089      	sub	sp, #36	; 0x24
 8000540:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000542:	240c      	movs	r4, #12
 8000544:	193b      	adds	r3, r7, r4
 8000546:	0018      	movs	r0, r3
 8000548:	2314      	movs	r3, #20
 800054a:	001a      	movs	r2, r3
 800054c:	2100      	movs	r1, #0
 800054e:	f002 f9df 	bl	8002910 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000552:	4b1a      	ldr	r3, [pc, #104]	; (80005bc <MX_GPIO_Init+0x80>)
 8000554:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000556:	4b19      	ldr	r3, [pc, #100]	; (80005bc <MX_GPIO_Init+0x80>)
 8000558:	2104      	movs	r1, #4
 800055a:	430a      	orrs	r2, r1
 800055c:	635a      	str	r2, [r3, #52]	; 0x34
 800055e:	4b17      	ldr	r3, [pc, #92]	; (80005bc <MX_GPIO_Init+0x80>)
 8000560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000562:	2204      	movs	r2, #4
 8000564:	4013      	ands	r3, r2
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800056a:	4b14      	ldr	r3, [pc, #80]	; (80005bc <MX_GPIO_Init+0x80>)
 800056c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800056e:	4b13      	ldr	r3, [pc, #76]	; (80005bc <MX_GPIO_Init+0x80>)
 8000570:	2101      	movs	r1, #1
 8000572:	430a      	orrs	r2, r1
 8000574:	635a      	str	r2, [r3, #52]	; 0x34
 8000576:	4b11      	ldr	r3, [pc, #68]	; (80005bc <MX_GPIO_Init+0x80>)
 8000578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800057a:	2201      	movs	r2, #1
 800057c:	4013      	ands	r3, r2
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : USER_Pin */
  GPIO_InitStruct.Pin = USER_Pin;
 8000582:	193b      	adds	r3, r7, r4
 8000584:	2280      	movs	r2, #128	; 0x80
 8000586:	0192      	lsls	r2, r2, #6
 8000588:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800058a:	193b      	adds	r3, r7, r4
 800058c:	2288      	movs	r2, #136	; 0x88
 800058e:	0352      	lsls	r2, r2, #13
 8000590:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000592:	193b      	adds	r3, r7, r4
 8000594:	2200      	movs	r2, #0
 8000596:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USER_GPIO_Port, &GPIO_InitStruct);
 8000598:	193b      	adds	r3, r7, r4
 800059a:	4a09      	ldr	r2, [pc, #36]	; (80005c0 <MX_GPIO_Init+0x84>)
 800059c:	0019      	movs	r1, r3
 800059e:	0010      	movs	r0, r2
 80005a0:	f000 fa76 	bl	8000a90 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80005a4:	2200      	movs	r2, #0
 80005a6:	2100      	movs	r1, #0
 80005a8:	2007      	movs	r0, #7
 80005aa:	f000 fa3f 	bl	8000a2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80005ae:	2007      	movs	r0, #7
 80005b0:	f000 fa51 	bl	8000a56 <HAL_NVIC_EnableIRQ>

}
 80005b4:	46c0      	nop			; (mov r8, r8)
 80005b6:	46bd      	mov	sp, r7
 80005b8:	b009      	add	sp, #36	; 0x24
 80005ba:	bd90      	pop	{r4, r7, pc}
 80005bc:	40021000 	.word	0x40021000
 80005c0:	50000800 	.word	0x50000800

080005c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005c8:	b672      	cpsid	i
}
 80005ca:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005cc:	e7fe      	b.n	80005cc <Error_Handler+0x8>
	...

080005d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005d6:	4b11      	ldr	r3, [pc, #68]	; (800061c <HAL_MspInit+0x4c>)
 80005d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80005da:	4b10      	ldr	r3, [pc, #64]	; (800061c <HAL_MspInit+0x4c>)
 80005dc:	2101      	movs	r1, #1
 80005de:	430a      	orrs	r2, r1
 80005e0:	641a      	str	r2, [r3, #64]	; 0x40
 80005e2:	4b0e      	ldr	r3, [pc, #56]	; (800061c <HAL_MspInit+0x4c>)
 80005e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e6:	2201      	movs	r2, #1
 80005e8:	4013      	ands	r3, r2
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ee:	4b0b      	ldr	r3, [pc, #44]	; (800061c <HAL_MspInit+0x4c>)
 80005f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80005f2:	4b0a      	ldr	r3, [pc, #40]	; (800061c <HAL_MspInit+0x4c>)
 80005f4:	2180      	movs	r1, #128	; 0x80
 80005f6:	0549      	lsls	r1, r1, #21
 80005f8:	430a      	orrs	r2, r1
 80005fa:	63da      	str	r2, [r3, #60]	; 0x3c
 80005fc:	4b07      	ldr	r3, [pc, #28]	; (800061c <HAL_MspInit+0x4c>)
 80005fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000600:	2380      	movs	r3, #128	; 0x80
 8000602:	055b      	lsls	r3, r3, #21
 8000604:	4013      	ands	r3, r2
 8000606:	603b      	str	r3, [r7, #0]
 8000608:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800060a:	23c0      	movs	r3, #192	; 0xc0
 800060c:	00db      	lsls	r3, r3, #3
 800060e:	0018      	movs	r0, r3
 8000610:	f000 f94a 	bl	80008a8 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000614:	46c0      	nop			; (mov r8, r8)
 8000616:	46bd      	mov	sp, r7
 8000618:	b002      	add	sp, #8
 800061a:	bd80      	pop	{r7, pc}
 800061c:	40021000 	.word	0x40021000

08000620 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681a      	ldr	r2, [r3, #0]
 800062c:	2380      	movs	r3, #128	; 0x80
 800062e:	05db      	lsls	r3, r3, #23
 8000630:	429a      	cmp	r2, r3
 8000632:	d113      	bne.n	800065c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000634:	4b0b      	ldr	r3, [pc, #44]	; (8000664 <HAL_TIM_Base_MspInit+0x44>)
 8000636:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000638:	4b0a      	ldr	r3, [pc, #40]	; (8000664 <HAL_TIM_Base_MspInit+0x44>)
 800063a:	2101      	movs	r1, #1
 800063c:	430a      	orrs	r2, r1
 800063e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000640:	4b08      	ldr	r3, [pc, #32]	; (8000664 <HAL_TIM_Base_MspInit+0x44>)
 8000642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000644:	2201      	movs	r2, #1
 8000646:	4013      	ands	r3, r2
 8000648:	60fb      	str	r3, [r7, #12]
 800064a:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800064c:	2200      	movs	r2, #0
 800064e:	2100      	movs	r1, #0
 8000650:	200f      	movs	r0, #15
 8000652:	f000 f9eb 	bl	8000a2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000656:	200f      	movs	r0, #15
 8000658:	f000 f9fd 	bl	8000a56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800065c:	46c0      	nop			; (mov r8, r8)
 800065e:	46bd      	mov	sp, r7
 8000660:	b004      	add	sp, #16
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40021000 	.word	0x40021000

08000668 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000668:	b590      	push	{r4, r7, lr}
 800066a:	b089      	sub	sp, #36	; 0x24
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000670:	240c      	movs	r4, #12
 8000672:	193b      	adds	r3, r7, r4
 8000674:	0018      	movs	r0, r3
 8000676:	2314      	movs	r3, #20
 8000678:	001a      	movs	r2, r3
 800067a:	2100      	movs	r1, #0
 800067c:	f002 f948 	bl	8002910 <memset>
  if(htim->Instance==TIM2)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681a      	ldr	r2, [r3, #0]
 8000684:	2380      	movs	r3, #128	; 0x80
 8000686:	05db      	lsls	r3, r3, #23
 8000688:	429a      	cmp	r2, r3
 800068a:	d122      	bne.n	80006d2 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800068c:	4b13      	ldr	r3, [pc, #76]	; (80006dc <HAL_TIM_MspPostInit+0x74>)
 800068e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000690:	4b12      	ldr	r3, [pc, #72]	; (80006dc <HAL_TIM_MspPostInit+0x74>)
 8000692:	2101      	movs	r1, #1
 8000694:	430a      	orrs	r2, r1
 8000696:	635a      	str	r2, [r3, #52]	; 0x34
 8000698:	4b10      	ldr	r3, [pc, #64]	; (80006dc <HAL_TIM_MspPostInit+0x74>)
 800069a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800069c:	2201      	movs	r2, #1
 800069e:	4013      	ands	r3, r2
 80006a0:	60bb      	str	r3, [r7, #8]
 80006a2:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80006a4:	0021      	movs	r1, r4
 80006a6:	187b      	adds	r3, r7, r1
 80006a8:	2220      	movs	r2, #32
 80006aa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ac:	187b      	adds	r3, r7, r1
 80006ae:	2202      	movs	r2, #2
 80006b0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b2:	187b      	adds	r3, r7, r1
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b8:	187b      	adds	r3, r7, r1
 80006ba:	2200      	movs	r2, #0
 80006bc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80006be:	187b      	adds	r3, r7, r1
 80006c0:	2202      	movs	r2, #2
 80006c2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c4:	187a      	adds	r2, r7, r1
 80006c6:	23a0      	movs	r3, #160	; 0xa0
 80006c8:	05db      	lsls	r3, r3, #23
 80006ca:	0011      	movs	r1, r2
 80006cc:	0018      	movs	r0, r3
 80006ce:	f000 f9df 	bl	8000a90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80006d2:	46c0      	nop			; (mov r8, r8)
 80006d4:	46bd      	mov	sp, r7
 80006d6:	b009      	add	sp, #36	; 0x24
 80006d8:	bd90      	pop	{r4, r7, pc}
 80006da:	46c0      	nop			; (mov r8, r8)
 80006dc:	40021000 	.word	0x40021000

080006e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006e4:	e7fe      	b.n	80006e4 <NMI_Handler+0x4>

080006e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006e6:	b580      	push	{r7, lr}
 80006e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ea:	e7fe      	b.n	80006ea <HardFault_Handler+0x4>

080006ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80006f0:	46c0      	nop			; (mov r8, r8)
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}

080006f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006f6:	b580      	push	{r7, lr}
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006fa:	46c0      	nop			; (mov r8, r8)
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}

08000700 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000704:	f000 f8b4 	bl	8000870 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000708:	46c0      	nop			; (mov r8, r8)
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}

0800070e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800070e:	b580      	push	{r7, lr}
 8000710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Pin);
 8000712:	2380      	movs	r3, #128	; 0x80
 8000714:	019b      	lsls	r3, r3, #6
 8000716:	0018      	movs	r0, r3
 8000718:	f000 fb26 	bl	8000d68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800071c:	46c0      	nop			; (mov r8, r8)
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
	...

08000724 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000728:	4b03      	ldr	r3, [pc, #12]	; (8000738 <TIM2_IRQHandler+0x14>)
 800072a:	0018      	movs	r0, r3
 800072c:	f001 f938 	bl	80019a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000730:	46c0      	nop			; (mov r8, r8)
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	46c0      	nop			; (mov r8, r8)
 8000738:	2000002c 	.word	0x2000002c

0800073c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000740:	46c0      	nop			; (mov r8, r8)
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
	...

08000748 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000748:	480d      	ldr	r0, [pc, #52]	; (8000780 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800074a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800074c:	f7ff fff6 	bl	800073c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000750:	480c      	ldr	r0, [pc, #48]	; (8000784 <LoopForever+0x6>)
  ldr r1, =_edata
 8000752:	490d      	ldr	r1, [pc, #52]	; (8000788 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000754:	4a0d      	ldr	r2, [pc, #52]	; (800078c <LoopForever+0xe>)
  movs r3, #0
 8000756:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000758:	e002      	b.n	8000760 <LoopCopyDataInit>

0800075a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800075a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800075c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800075e:	3304      	adds	r3, #4

08000760 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000760:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000762:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000764:	d3f9      	bcc.n	800075a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000766:	4a0a      	ldr	r2, [pc, #40]	; (8000790 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000768:	4c0a      	ldr	r4, [pc, #40]	; (8000794 <LoopForever+0x16>)
  movs r3, #0
 800076a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800076c:	e001      	b.n	8000772 <LoopFillZerobss>

0800076e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800076e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000770:	3204      	adds	r2, #4

08000772 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000772:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000774:	d3fb      	bcc.n	800076e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000776:	f002 f8a7 	bl	80028c8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800077a:	f7ff fdf5 	bl	8000368 <main>

0800077e <LoopForever>:

LoopForever:
  b LoopForever
 800077e:	e7fe      	b.n	800077e <LoopForever>
  ldr   r0, =_estack
 8000780:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000784:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000788:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800078c:	080029d4 	.word	0x080029d4
  ldr r2, =_sbss
 8000790:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000794:	2000007c 	.word	0x2000007c

08000798 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000798:	e7fe      	b.n	8000798 <ADC1_COMP_IRQHandler>
	...

0800079c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80007a2:	1dfb      	adds	r3, r7, #7
 80007a4:	2200      	movs	r2, #0
 80007a6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007a8:	4b0b      	ldr	r3, [pc, #44]	; (80007d8 <HAL_Init+0x3c>)
 80007aa:	681a      	ldr	r2, [r3, #0]
 80007ac:	4b0a      	ldr	r3, [pc, #40]	; (80007d8 <HAL_Init+0x3c>)
 80007ae:	2180      	movs	r1, #128	; 0x80
 80007b0:	0049      	lsls	r1, r1, #1
 80007b2:	430a      	orrs	r2, r1
 80007b4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007b6:	2003      	movs	r0, #3
 80007b8:	f000 f810 	bl	80007dc <HAL_InitTick>
 80007bc:	1e03      	subs	r3, r0, #0
 80007be:	d003      	beq.n	80007c8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80007c0:	1dfb      	adds	r3, r7, #7
 80007c2:	2201      	movs	r2, #1
 80007c4:	701a      	strb	r2, [r3, #0]
 80007c6:	e001      	b.n	80007cc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80007c8:	f7ff ff02 	bl	80005d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80007cc:	1dfb      	adds	r3, r7, #7
 80007ce:	781b      	ldrb	r3, [r3, #0]
}
 80007d0:	0018      	movs	r0, r3
 80007d2:	46bd      	mov	sp, r7
 80007d4:	b002      	add	sp, #8
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40022000 	.word	0x40022000

080007dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007dc:	b590      	push	{r4, r7, lr}
 80007de:	b085      	sub	sp, #20
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80007e4:	230f      	movs	r3, #15
 80007e6:	18fb      	adds	r3, r7, r3
 80007e8:	2200      	movs	r2, #0
 80007ea:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80007ec:	4b1d      	ldr	r3, [pc, #116]	; (8000864 <HAL_InitTick+0x88>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d02b      	beq.n	800084c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80007f4:	4b1c      	ldr	r3, [pc, #112]	; (8000868 <HAL_InitTick+0x8c>)
 80007f6:	681c      	ldr	r4, [r3, #0]
 80007f8:	4b1a      	ldr	r3, [pc, #104]	; (8000864 <HAL_InitTick+0x88>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	0019      	movs	r1, r3
 80007fe:	23fa      	movs	r3, #250	; 0xfa
 8000800:	0098      	lsls	r0, r3, #2
 8000802:	f7ff fc7f 	bl	8000104 <__udivsi3>
 8000806:	0003      	movs	r3, r0
 8000808:	0019      	movs	r1, r3
 800080a:	0020      	movs	r0, r4
 800080c:	f7ff fc7a 	bl	8000104 <__udivsi3>
 8000810:	0003      	movs	r3, r0
 8000812:	0018      	movs	r0, r3
 8000814:	f000 f92f 	bl	8000a76 <HAL_SYSTICK_Config>
 8000818:	1e03      	subs	r3, r0, #0
 800081a:	d112      	bne.n	8000842 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	2b03      	cmp	r3, #3
 8000820:	d80a      	bhi.n	8000838 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000822:	6879      	ldr	r1, [r7, #4]
 8000824:	2301      	movs	r3, #1
 8000826:	425b      	negs	r3, r3
 8000828:	2200      	movs	r2, #0
 800082a:	0018      	movs	r0, r3
 800082c:	f000 f8fe 	bl	8000a2c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000830:	4b0e      	ldr	r3, [pc, #56]	; (800086c <HAL_InitTick+0x90>)
 8000832:	687a      	ldr	r2, [r7, #4]
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	e00d      	b.n	8000854 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000838:	230f      	movs	r3, #15
 800083a:	18fb      	adds	r3, r7, r3
 800083c:	2201      	movs	r2, #1
 800083e:	701a      	strb	r2, [r3, #0]
 8000840:	e008      	b.n	8000854 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000842:	230f      	movs	r3, #15
 8000844:	18fb      	adds	r3, r7, r3
 8000846:	2201      	movs	r2, #1
 8000848:	701a      	strb	r2, [r3, #0]
 800084a:	e003      	b.n	8000854 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800084c:	230f      	movs	r3, #15
 800084e:	18fb      	adds	r3, r7, r3
 8000850:	2201      	movs	r2, #1
 8000852:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000854:	230f      	movs	r3, #15
 8000856:	18fb      	adds	r3, r7, r3
 8000858:	781b      	ldrb	r3, [r3, #0]
}
 800085a:	0018      	movs	r0, r3
 800085c:	46bd      	mov	sp, r7
 800085e:	b005      	add	sp, #20
 8000860:	bd90      	pop	{r4, r7, pc}
 8000862:	46c0      	nop			; (mov r8, r8)
 8000864:	20000008 	.word	0x20000008
 8000868:	20000000 	.word	0x20000000
 800086c:	20000004 	.word	0x20000004

08000870 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000874:	4b05      	ldr	r3, [pc, #20]	; (800088c <HAL_IncTick+0x1c>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	001a      	movs	r2, r3
 800087a:	4b05      	ldr	r3, [pc, #20]	; (8000890 <HAL_IncTick+0x20>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	18d2      	adds	r2, r2, r3
 8000880:	4b03      	ldr	r3, [pc, #12]	; (8000890 <HAL_IncTick+0x20>)
 8000882:	601a      	str	r2, [r3, #0]
}
 8000884:	46c0      	nop			; (mov r8, r8)
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	46c0      	nop			; (mov r8, r8)
 800088c:	20000008 	.word	0x20000008
 8000890:	20000078 	.word	0x20000078

08000894 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  return uwTick;
 8000898:	4b02      	ldr	r3, [pc, #8]	; (80008a4 <HAL_GetTick+0x10>)
 800089a:	681b      	ldr	r3, [r3, #0]
}
 800089c:	0018      	movs	r0, r3
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	46c0      	nop			; (mov r8, r8)
 80008a4:	20000078 	.word	0x20000078

080008a8 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80008b0:	4b06      	ldr	r3, [pc, #24]	; (80008cc <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a06      	ldr	r2, [pc, #24]	; (80008d0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80008b6:	4013      	ands	r3, r2
 80008b8:	0019      	movs	r1, r3
 80008ba:	4b04      	ldr	r3, [pc, #16]	; (80008cc <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80008bc:	687a      	ldr	r2, [r7, #4]
 80008be:	430a      	orrs	r2, r1
 80008c0:	601a      	str	r2, [r3, #0]
}
 80008c2:	46c0      	nop			; (mov r8, r8)
 80008c4:	46bd      	mov	sp, r7
 80008c6:	b002      	add	sp, #8
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	46c0      	nop			; (mov r8, r8)
 80008cc:	40010000 	.word	0x40010000
 80008d0:	fffff9ff 	.word	0xfffff9ff

080008d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	0002      	movs	r2, r0
 80008dc:	1dfb      	adds	r3, r7, #7
 80008de:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80008e0:	1dfb      	adds	r3, r7, #7
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	2b7f      	cmp	r3, #127	; 0x7f
 80008e6:	d809      	bhi.n	80008fc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008e8:	1dfb      	adds	r3, r7, #7
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	001a      	movs	r2, r3
 80008ee:	231f      	movs	r3, #31
 80008f0:	401a      	ands	r2, r3
 80008f2:	4b04      	ldr	r3, [pc, #16]	; (8000904 <__NVIC_EnableIRQ+0x30>)
 80008f4:	2101      	movs	r1, #1
 80008f6:	4091      	lsls	r1, r2
 80008f8:	000a      	movs	r2, r1
 80008fa:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80008fc:	46c0      	nop			; (mov r8, r8)
 80008fe:	46bd      	mov	sp, r7
 8000900:	b002      	add	sp, #8
 8000902:	bd80      	pop	{r7, pc}
 8000904:	e000e100 	.word	0xe000e100

08000908 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000908:	b590      	push	{r4, r7, lr}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	0002      	movs	r2, r0
 8000910:	6039      	str	r1, [r7, #0]
 8000912:	1dfb      	adds	r3, r7, #7
 8000914:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000916:	1dfb      	adds	r3, r7, #7
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	2b7f      	cmp	r3, #127	; 0x7f
 800091c:	d828      	bhi.n	8000970 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800091e:	4a2f      	ldr	r2, [pc, #188]	; (80009dc <__NVIC_SetPriority+0xd4>)
 8000920:	1dfb      	adds	r3, r7, #7
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	b25b      	sxtb	r3, r3
 8000926:	089b      	lsrs	r3, r3, #2
 8000928:	33c0      	adds	r3, #192	; 0xc0
 800092a:	009b      	lsls	r3, r3, #2
 800092c:	589b      	ldr	r3, [r3, r2]
 800092e:	1dfa      	adds	r2, r7, #7
 8000930:	7812      	ldrb	r2, [r2, #0]
 8000932:	0011      	movs	r1, r2
 8000934:	2203      	movs	r2, #3
 8000936:	400a      	ands	r2, r1
 8000938:	00d2      	lsls	r2, r2, #3
 800093a:	21ff      	movs	r1, #255	; 0xff
 800093c:	4091      	lsls	r1, r2
 800093e:	000a      	movs	r2, r1
 8000940:	43d2      	mvns	r2, r2
 8000942:	401a      	ands	r2, r3
 8000944:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	019b      	lsls	r3, r3, #6
 800094a:	22ff      	movs	r2, #255	; 0xff
 800094c:	401a      	ands	r2, r3
 800094e:	1dfb      	adds	r3, r7, #7
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	0018      	movs	r0, r3
 8000954:	2303      	movs	r3, #3
 8000956:	4003      	ands	r3, r0
 8000958:	00db      	lsls	r3, r3, #3
 800095a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800095c:	481f      	ldr	r0, [pc, #124]	; (80009dc <__NVIC_SetPriority+0xd4>)
 800095e:	1dfb      	adds	r3, r7, #7
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	b25b      	sxtb	r3, r3
 8000964:	089b      	lsrs	r3, r3, #2
 8000966:	430a      	orrs	r2, r1
 8000968:	33c0      	adds	r3, #192	; 0xc0
 800096a:	009b      	lsls	r3, r3, #2
 800096c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800096e:	e031      	b.n	80009d4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000970:	4a1b      	ldr	r2, [pc, #108]	; (80009e0 <__NVIC_SetPriority+0xd8>)
 8000972:	1dfb      	adds	r3, r7, #7
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	0019      	movs	r1, r3
 8000978:	230f      	movs	r3, #15
 800097a:	400b      	ands	r3, r1
 800097c:	3b08      	subs	r3, #8
 800097e:	089b      	lsrs	r3, r3, #2
 8000980:	3306      	adds	r3, #6
 8000982:	009b      	lsls	r3, r3, #2
 8000984:	18d3      	adds	r3, r2, r3
 8000986:	3304      	adds	r3, #4
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	1dfa      	adds	r2, r7, #7
 800098c:	7812      	ldrb	r2, [r2, #0]
 800098e:	0011      	movs	r1, r2
 8000990:	2203      	movs	r2, #3
 8000992:	400a      	ands	r2, r1
 8000994:	00d2      	lsls	r2, r2, #3
 8000996:	21ff      	movs	r1, #255	; 0xff
 8000998:	4091      	lsls	r1, r2
 800099a:	000a      	movs	r2, r1
 800099c:	43d2      	mvns	r2, r2
 800099e:	401a      	ands	r2, r3
 80009a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	019b      	lsls	r3, r3, #6
 80009a6:	22ff      	movs	r2, #255	; 0xff
 80009a8:	401a      	ands	r2, r3
 80009aa:	1dfb      	adds	r3, r7, #7
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	0018      	movs	r0, r3
 80009b0:	2303      	movs	r3, #3
 80009b2:	4003      	ands	r3, r0
 80009b4:	00db      	lsls	r3, r3, #3
 80009b6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009b8:	4809      	ldr	r0, [pc, #36]	; (80009e0 <__NVIC_SetPriority+0xd8>)
 80009ba:	1dfb      	adds	r3, r7, #7
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	001c      	movs	r4, r3
 80009c0:	230f      	movs	r3, #15
 80009c2:	4023      	ands	r3, r4
 80009c4:	3b08      	subs	r3, #8
 80009c6:	089b      	lsrs	r3, r3, #2
 80009c8:	430a      	orrs	r2, r1
 80009ca:	3306      	adds	r3, #6
 80009cc:	009b      	lsls	r3, r3, #2
 80009ce:	18c3      	adds	r3, r0, r3
 80009d0:	3304      	adds	r3, #4
 80009d2:	601a      	str	r2, [r3, #0]
}
 80009d4:	46c0      	nop			; (mov r8, r8)
 80009d6:	46bd      	mov	sp, r7
 80009d8:	b003      	add	sp, #12
 80009da:	bd90      	pop	{r4, r7, pc}
 80009dc:	e000e100 	.word	0xe000e100
 80009e0:	e000ed00 	.word	0xe000ed00

080009e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	1e5a      	subs	r2, r3, #1
 80009f0:	2380      	movs	r3, #128	; 0x80
 80009f2:	045b      	lsls	r3, r3, #17
 80009f4:	429a      	cmp	r2, r3
 80009f6:	d301      	bcc.n	80009fc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009f8:	2301      	movs	r3, #1
 80009fa:	e010      	b.n	8000a1e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009fc:	4b0a      	ldr	r3, [pc, #40]	; (8000a28 <SysTick_Config+0x44>)
 80009fe:	687a      	ldr	r2, [r7, #4]
 8000a00:	3a01      	subs	r2, #1
 8000a02:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a04:	2301      	movs	r3, #1
 8000a06:	425b      	negs	r3, r3
 8000a08:	2103      	movs	r1, #3
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	f7ff ff7c 	bl	8000908 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a10:	4b05      	ldr	r3, [pc, #20]	; (8000a28 <SysTick_Config+0x44>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a16:	4b04      	ldr	r3, [pc, #16]	; (8000a28 <SysTick_Config+0x44>)
 8000a18:	2207      	movs	r2, #7
 8000a1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a1c:	2300      	movs	r3, #0
}
 8000a1e:	0018      	movs	r0, r3
 8000a20:	46bd      	mov	sp, r7
 8000a22:	b002      	add	sp, #8
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	46c0      	nop			; (mov r8, r8)
 8000a28:	e000e010 	.word	0xe000e010

08000a2c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	60b9      	str	r1, [r7, #8]
 8000a34:	607a      	str	r2, [r7, #4]
 8000a36:	210f      	movs	r1, #15
 8000a38:	187b      	adds	r3, r7, r1
 8000a3a:	1c02      	adds	r2, r0, #0
 8000a3c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000a3e:	68ba      	ldr	r2, [r7, #8]
 8000a40:	187b      	adds	r3, r7, r1
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	b25b      	sxtb	r3, r3
 8000a46:	0011      	movs	r1, r2
 8000a48:	0018      	movs	r0, r3
 8000a4a:	f7ff ff5d 	bl	8000908 <__NVIC_SetPriority>
}
 8000a4e:	46c0      	nop			; (mov r8, r8)
 8000a50:	46bd      	mov	sp, r7
 8000a52:	b004      	add	sp, #16
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b082      	sub	sp, #8
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	0002      	movs	r2, r0
 8000a5e:	1dfb      	adds	r3, r7, #7
 8000a60:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a62:	1dfb      	adds	r3, r7, #7
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	b25b      	sxtb	r3, r3
 8000a68:	0018      	movs	r0, r3
 8000a6a:	f7ff ff33 	bl	80008d4 <__NVIC_EnableIRQ>
}
 8000a6e:	46c0      	nop			; (mov r8, r8)
 8000a70:	46bd      	mov	sp, r7
 8000a72:	b002      	add	sp, #8
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	b082      	sub	sp, #8
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	0018      	movs	r0, r3
 8000a82:	f7ff ffaf 	bl	80009e4 <SysTick_Config>
 8000a86:	0003      	movs	r3, r0
}
 8000a88:	0018      	movs	r0, r3
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	b002      	add	sp, #8
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b086      	sub	sp, #24
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a9e:	e14d      	b.n	8000d3c <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	2101      	movs	r1, #1
 8000aa6:	697a      	ldr	r2, [r7, #20]
 8000aa8:	4091      	lsls	r1, r2
 8000aaa:	000a      	movs	r2, r1
 8000aac:	4013      	ands	r3, r2
 8000aae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d100      	bne.n	8000ab8 <HAL_GPIO_Init+0x28>
 8000ab6:	e13e      	b.n	8000d36 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	2203      	movs	r2, #3
 8000abe:	4013      	ands	r3, r2
 8000ac0:	2b01      	cmp	r3, #1
 8000ac2:	d005      	beq.n	8000ad0 <HAL_GPIO_Init+0x40>
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	2203      	movs	r2, #3
 8000aca:	4013      	ands	r3, r2
 8000acc:	2b02      	cmp	r3, #2
 8000ace:	d130      	bne.n	8000b32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	689b      	ldr	r3, [r3, #8]
 8000ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	005b      	lsls	r3, r3, #1
 8000ada:	2203      	movs	r2, #3
 8000adc:	409a      	lsls	r2, r3
 8000ade:	0013      	movs	r3, r2
 8000ae0:	43da      	mvns	r2, r3
 8000ae2:	693b      	ldr	r3, [r7, #16]
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	68da      	ldr	r2, [r3, #12]
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	005b      	lsls	r3, r3, #1
 8000af0:	409a      	lsls	r2, r3
 8000af2:	0013      	movs	r3, r2
 8000af4:	693a      	ldr	r2, [r7, #16]
 8000af6:	4313      	orrs	r3, r2
 8000af8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	693a      	ldr	r2, [r7, #16]
 8000afe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b06:	2201      	movs	r2, #1
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	409a      	lsls	r2, r3
 8000b0c:	0013      	movs	r3, r2
 8000b0e:	43da      	mvns	r2, r3
 8000b10:	693b      	ldr	r3, [r7, #16]
 8000b12:	4013      	ands	r3, r2
 8000b14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	091b      	lsrs	r3, r3, #4
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	401a      	ands	r2, r3
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	409a      	lsls	r2, r3
 8000b24:	0013      	movs	r3, r2
 8000b26:	693a      	ldr	r2, [r7, #16]
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	693a      	ldr	r2, [r7, #16]
 8000b30:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	2203      	movs	r2, #3
 8000b38:	4013      	ands	r3, r2
 8000b3a:	2b03      	cmp	r3, #3
 8000b3c:	d017      	beq.n	8000b6e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	68db      	ldr	r3, [r3, #12]
 8000b42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	005b      	lsls	r3, r3, #1
 8000b48:	2203      	movs	r2, #3
 8000b4a:	409a      	lsls	r2, r3
 8000b4c:	0013      	movs	r3, r2
 8000b4e:	43da      	mvns	r2, r3
 8000b50:	693b      	ldr	r3, [r7, #16]
 8000b52:	4013      	ands	r3, r2
 8000b54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	689a      	ldr	r2, [r3, #8]
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	005b      	lsls	r3, r3, #1
 8000b5e:	409a      	lsls	r2, r3
 8000b60:	0013      	movs	r3, r2
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	4313      	orrs	r3, r2
 8000b66:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	693a      	ldr	r2, [r7, #16]
 8000b6c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	2203      	movs	r2, #3
 8000b74:	4013      	ands	r3, r2
 8000b76:	2b02      	cmp	r3, #2
 8000b78:	d123      	bne.n	8000bc2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	08da      	lsrs	r2, r3, #3
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	3208      	adds	r2, #8
 8000b82:	0092      	lsls	r2, r2, #2
 8000b84:	58d3      	ldr	r3, [r2, r3]
 8000b86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	2207      	movs	r2, #7
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	009b      	lsls	r3, r3, #2
 8000b90:	220f      	movs	r2, #15
 8000b92:	409a      	lsls	r2, r3
 8000b94:	0013      	movs	r3, r2
 8000b96:	43da      	mvns	r2, r3
 8000b98:	693b      	ldr	r3, [r7, #16]
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	691a      	ldr	r2, [r3, #16]
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	2107      	movs	r1, #7
 8000ba6:	400b      	ands	r3, r1
 8000ba8:	009b      	lsls	r3, r3, #2
 8000baa:	409a      	lsls	r2, r3
 8000bac:	0013      	movs	r3, r2
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	4313      	orrs	r3, r2
 8000bb2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	08da      	lsrs	r2, r3, #3
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	3208      	adds	r2, #8
 8000bbc:	0092      	lsls	r2, r2, #2
 8000bbe:	6939      	ldr	r1, [r7, #16]
 8000bc0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	005b      	lsls	r3, r3, #1
 8000bcc:	2203      	movs	r2, #3
 8000bce:	409a      	lsls	r2, r3
 8000bd0:	0013      	movs	r3, r2
 8000bd2:	43da      	mvns	r2, r3
 8000bd4:	693b      	ldr	r3, [r7, #16]
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	2203      	movs	r2, #3
 8000be0:	401a      	ands	r2, r3
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	005b      	lsls	r3, r3, #1
 8000be6:	409a      	lsls	r2, r3
 8000be8:	0013      	movs	r3, r2
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	4313      	orrs	r3, r2
 8000bee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	685a      	ldr	r2, [r3, #4]
 8000bfa:	23c0      	movs	r3, #192	; 0xc0
 8000bfc:	029b      	lsls	r3, r3, #10
 8000bfe:	4013      	ands	r3, r2
 8000c00:	d100      	bne.n	8000c04 <HAL_GPIO_Init+0x174>
 8000c02:	e098      	b.n	8000d36 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000c04:	4a53      	ldr	r2, [pc, #332]	; (8000d54 <HAL_GPIO_Init+0x2c4>)
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	089b      	lsrs	r3, r3, #2
 8000c0a:	3318      	adds	r3, #24
 8000c0c:	009b      	lsls	r3, r3, #2
 8000c0e:	589b      	ldr	r3, [r3, r2]
 8000c10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	2203      	movs	r2, #3
 8000c16:	4013      	ands	r3, r2
 8000c18:	00db      	lsls	r3, r3, #3
 8000c1a:	220f      	movs	r2, #15
 8000c1c:	409a      	lsls	r2, r3
 8000c1e:	0013      	movs	r3, r2
 8000c20:	43da      	mvns	r2, r3
 8000c22:	693b      	ldr	r3, [r7, #16]
 8000c24:	4013      	ands	r3, r2
 8000c26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000c28:	687a      	ldr	r2, [r7, #4]
 8000c2a:	23a0      	movs	r3, #160	; 0xa0
 8000c2c:	05db      	lsls	r3, r3, #23
 8000c2e:	429a      	cmp	r2, r3
 8000c30:	d019      	beq.n	8000c66 <HAL_GPIO_Init+0x1d6>
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4a48      	ldr	r2, [pc, #288]	; (8000d58 <HAL_GPIO_Init+0x2c8>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d013      	beq.n	8000c62 <HAL_GPIO_Init+0x1d2>
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4a47      	ldr	r2, [pc, #284]	; (8000d5c <HAL_GPIO_Init+0x2cc>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d00d      	beq.n	8000c5e <HAL_GPIO_Init+0x1ce>
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4a46      	ldr	r2, [pc, #280]	; (8000d60 <HAL_GPIO_Init+0x2d0>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d007      	beq.n	8000c5a <HAL_GPIO_Init+0x1ca>
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4a45      	ldr	r2, [pc, #276]	; (8000d64 <HAL_GPIO_Init+0x2d4>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d101      	bne.n	8000c56 <HAL_GPIO_Init+0x1c6>
 8000c52:	2304      	movs	r3, #4
 8000c54:	e008      	b.n	8000c68 <HAL_GPIO_Init+0x1d8>
 8000c56:	2305      	movs	r3, #5
 8000c58:	e006      	b.n	8000c68 <HAL_GPIO_Init+0x1d8>
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	e004      	b.n	8000c68 <HAL_GPIO_Init+0x1d8>
 8000c5e:	2302      	movs	r3, #2
 8000c60:	e002      	b.n	8000c68 <HAL_GPIO_Init+0x1d8>
 8000c62:	2301      	movs	r3, #1
 8000c64:	e000      	b.n	8000c68 <HAL_GPIO_Init+0x1d8>
 8000c66:	2300      	movs	r3, #0
 8000c68:	697a      	ldr	r2, [r7, #20]
 8000c6a:	2103      	movs	r1, #3
 8000c6c:	400a      	ands	r2, r1
 8000c6e:	00d2      	lsls	r2, r2, #3
 8000c70:	4093      	lsls	r3, r2
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	4313      	orrs	r3, r2
 8000c76:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000c78:	4936      	ldr	r1, [pc, #216]	; (8000d54 <HAL_GPIO_Init+0x2c4>)
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	089b      	lsrs	r3, r3, #2
 8000c7e:	3318      	adds	r3, #24
 8000c80:	009b      	lsls	r3, r3, #2
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000c86:	4a33      	ldr	r2, [pc, #204]	; (8000d54 <HAL_GPIO_Init+0x2c4>)
 8000c88:	2380      	movs	r3, #128	; 0x80
 8000c8a:	58d3      	ldr	r3, [r2, r3]
 8000c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	43da      	mvns	r2, r3
 8000c92:	693b      	ldr	r3, [r7, #16]
 8000c94:	4013      	ands	r3, r2
 8000c96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	685a      	ldr	r2, [r3, #4]
 8000c9c:	2380      	movs	r3, #128	; 0x80
 8000c9e:	025b      	lsls	r3, r3, #9
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	d003      	beq.n	8000cac <HAL_GPIO_Init+0x21c>
        {
          temp |= iocurrent;
 8000ca4:	693a      	ldr	r2, [r7, #16]
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000cac:	4929      	ldr	r1, [pc, #164]	; (8000d54 <HAL_GPIO_Init+0x2c4>)
 8000cae:	2280      	movs	r2, #128	; 0x80
 8000cb0:	693b      	ldr	r3, [r7, #16]
 8000cb2:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8000cb4:	4a27      	ldr	r2, [pc, #156]	; (8000d54 <HAL_GPIO_Init+0x2c4>)
 8000cb6:	2384      	movs	r3, #132	; 0x84
 8000cb8:	58d3      	ldr	r3, [r2, r3]
 8000cba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	43da      	mvns	r2, r3
 8000cc0:	693b      	ldr	r3, [r7, #16]
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	685a      	ldr	r2, [r3, #4]
 8000cca:	2380      	movs	r3, #128	; 0x80
 8000ccc:	029b      	lsls	r3, r3, #10
 8000cce:	4013      	ands	r3, r2
 8000cd0:	d003      	beq.n	8000cda <HAL_GPIO_Init+0x24a>
        {
          temp |= iocurrent;
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000cda:	491e      	ldr	r1, [pc, #120]	; (8000d54 <HAL_GPIO_Init+0x2c4>)
 8000cdc:	2284      	movs	r2, #132	; 0x84
 8000cde:	693b      	ldr	r3, [r7, #16]
 8000ce0:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ce2:	4b1c      	ldr	r3, [pc, #112]	; (8000d54 <HAL_GPIO_Init+0x2c4>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	43da      	mvns	r2, r3
 8000cec:	693b      	ldr	r3, [r7, #16]
 8000cee:	4013      	ands	r3, r2
 8000cf0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	685a      	ldr	r2, [r3, #4]
 8000cf6:	2380      	movs	r3, #128	; 0x80
 8000cf8:	035b      	lsls	r3, r3, #13
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	d003      	beq.n	8000d06 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	4313      	orrs	r3, r2
 8000d04:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000d06:	4b13      	ldr	r3, [pc, #76]	; (8000d54 <HAL_GPIO_Init+0x2c4>)
 8000d08:	693a      	ldr	r2, [r7, #16]
 8000d0a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000d0c:	4b11      	ldr	r3, [pc, #68]	; (8000d54 <HAL_GPIO_Init+0x2c4>)
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	43da      	mvns	r2, r3
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	4013      	ands	r3, r2
 8000d1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	685a      	ldr	r2, [r3, #4]
 8000d20:	2380      	movs	r3, #128	; 0x80
 8000d22:	039b      	lsls	r3, r3, #14
 8000d24:	4013      	ands	r3, r2
 8000d26:	d003      	beq.n	8000d30 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8000d28:	693a      	ldr	r2, [r7, #16]
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000d30:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <HAL_GPIO_Init+0x2c4>)
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	3301      	adds	r3, #1
 8000d3a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	40da      	lsrs	r2, r3
 8000d44:	1e13      	subs	r3, r2, #0
 8000d46:	d000      	beq.n	8000d4a <HAL_GPIO_Init+0x2ba>
 8000d48:	e6aa      	b.n	8000aa0 <HAL_GPIO_Init+0x10>
  }
}
 8000d4a:	46c0      	nop			; (mov r8, r8)
 8000d4c:	46c0      	nop			; (mov r8, r8)
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	b006      	add	sp, #24
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	40021800 	.word	0x40021800
 8000d58:	50000400 	.word	0x50000400
 8000d5c:	50000800 	.word	0x50000800
 8000d60:	50000c00 	.word	0x50000c00
 8000d64:	50001000 	.word	0x50001000

08000d68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	0002      	movs	r2, r0
 8000d70:	1dbb      	adds	r3, r7, #6
 8000d72:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8000d74:	4b10      	ldr	r3, [pc, #64]	; (8000db8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	1dba      	adds	r2, r7, #6
 8000d7a:	8812      	ldrh	r2, [r2, #0]
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	d008      	beq.n	8000d92 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8000d80:	4b0d      	ldr	r3, [pc, #52]	; (8000db8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000d82:	1dba      	adds	r2, r7, #6
 8000d84:	8812      	ldrh	r2, [r2, #0]
 8000d86:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8000d88:	1dbb      	adds	r3, r7, #6
 8000d8a:	881b      	ldrh	r3, [r3, #0]
 8000d8c:	0018      	movs	r0, r3
 8000d8e:	f7ff fa8f 	bl	80002b0 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8000d92:	4b09      	ldr	r3, [pc, #36]	; (8000db8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000d94:	691b      	ldr	r3, [r3, #16]
 8000d96:	1dba      	adds	r2, r7, #6
 8000d98:	8812      	ldrh	r2, [r2, #0]
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	d008      	beq.n	8000db0 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8000d9e:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000da0:	1dba      	adds	r2, r7, #6
 8000da2:	8812      	ldrh	r2, [r2, #0]
 8000da4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8000da6:	1dbb      	adds	r3, r7, #6
 8000da8:	881b      	ldrh	r3, [r3, #0]
 8000daa:	0018      	movs	r0, r3
 8000dac:	f000 f806 	bl	8000dbc <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8000db0:	46c0      	nop			; (mov r8, r8)
 8000db2:	46bd      	mov	sp, r7
 8000db4:	b002      	add	sp, #8
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	40021800 	.word	0x40021800

08000dbc <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	0002      	movs	r2, r0
 8000dc4:	1dbb      	adds	r3, r7, #6
 8000dc6:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8000dc8:	46c0      	nop			; (mov r8, r8)
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	b002      	add	sp, #8
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000dd8:	4b19      	ldr	r3, [pc, #100]	; (8000e40 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a19      	ldr	r2, [pc, #100]	; (8000e44 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8000dde:	4013      	ands	r3, r2
 8000de0:	0019      	movs	r1, r3
 8000de2:	4b17      	ldr	r3, [pc, #92]	; (8000e40 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000de4:	687a      	ldr	r2, [r7, #4]
 8000de6:	430a      	orrs	r2, r1
 8000de8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000dea:	687a      	ldr	r2, [r7, #4]
 8000dec:	2380      	movs	r3, #128	; 0x80
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d11f      	bne.n	8000e34 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8000df4:	4b14      	ldr	r3, [pc, #80]	; (8000e48 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	0013      	movs	r3, r2
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	189b      	adds	r3, r3, r2
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	4912      	ldr	r1, [pc, #72]	; (8000e4c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8000e02:	0018      	movs	r0, r3
 8000e04:	f7ff f97e 	bl	8000104 <__udivsi3>
 8000e08:	0003      	movs	r3, r0
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e0e:	e008      	b.n	8000e22 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d003      	beq.n	8000e1e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	3b01      	subs	r3, #1
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	e001      	b.n	8000e22 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	e009      	b.n	8000e36 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e22:	4b07      	ldr	r3, [pc, #28]	; (8000e40 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000e24:	695a      	ldr	r2, [r3, #20]
 8000e26:	2380      	movs	r3, #128	; 0x80
 8000e28:	00db      	lsls	r3, r3, #3
 8000e2a:	401a      	ands	r2, r3
 8000e2c:	2380      	movs	r3, #128	; 0x80
 8000e2e:	00db      	lsls	r3, r3, #3
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d0ed      	beq.n	8000e10 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8000e34:	2300      	movs	r3, #0
}
 8000e36:	0018      	movs	r0, r3
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	b004      	add	sp, #16
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	46c0      	nop			; (mov r8, r8)
 8000e40:	40007000 	.word	0x40007000
 8000e44:	fffff9ff 	.word	0xfffff9ff
 8000e48:	20000000 	.word	0x20000000
 8000e4c:	000f4240 	.word	0x000f4240

08000e50 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b088      	sub	sp, #32
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d102      	bne.n	8000e64 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	f000 fb56 	bl	8001510 <HAL_RCC_OscConfig+0x6c0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	2201      	movs	r2, #1
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	d100      	bne.n	8000e70 <HAL_RCC_OscConfig+0x20>
 8000e6e:	e07d      	b.n	8000f6c <HAL_RCC_OscConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e70:	4bc3      	ldr	r3, [pc, #780]	; (8001180 <HAL_RCC_OscConfig+0x330>)
 8000e72:	689b      	ldr	r3, [r3, #8]
 8000e74:	2238      	movs	r2, #56	; 0x38
 8000e76:	4013      	ands	r3, r2
 8000e78:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e7a:	4bc1      	ldr	r3, [pc, #772]	; (8001180 <HAL_RCC_OscConfig+0x330>)
 8000e7c:	68db      	ldr	r3, [r3, #12]
 8000e7e:	2203      	movs	r2, #3
 8000e80:	4013      	ands	r3, r2
 8000e82:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8000e84:	69bb      	ldr	r3, [r7, #24]
 8000e86:	2b10      	cmp	r3, #16
 8000e88:	d102      	bne.n	8000e90 <HAL_RCC_OscConfig+0x40>
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	2b03      	cmp	r3, #3
 8000e8e:	d002      	beq.n	8000e96 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8000e90:	69bb      	ldr	r3, [r7, #24]
 8000e92:	2b08      	cmp	r3, #8
 8000e94:	d10c      	bne.n	8000eb0 <HAL_RCC_OscConfig+0x60>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e96:	4bba      	ldr	r3, [pc, #744]	; (8001180 <HAL_RCC_OscConfig+0x330>)
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	2380      	movs	r3, #128	; 0x80
 8000e9c:	029b      	lsls	r3, r3, #10
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	d063      	beq.n	8000f6a <HAL_RCC_OscConfig+0x11a>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d15f      	bne.n	8000f6a <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	f000 fb30 	bl	8001510 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	685a      	ldr	r2, [r3, #4]
 8000eb4:	2380      	movs	r3, #128	; 0x80
 8000eb6:	025b      	lsls	r3, r3, #9
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d107      	bne.n	8000ecc <HAL_RCC_OscConfig+0x7c>
 8000ebc:	4bb0      	ldr	r3, [pc, #704]	; (8001180 <HAL_RCC_OscConfig+0x330>)
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	4baf      	ldr	r3, [pc, #700]	; (8001180 <HAL_RCC_OscConfig+0x330>)
 8000ec2:	2180      	movs	r1, #128	; 0x80
 8000ec4:	0249      	lsls	r1, r1, #9
 8000ec6:	430a      	orrs	r2, r1
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	e020      	b.n	8000f0e <HAL_RCC_OscConfig+0xbe>
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	685a      	ldr	r2, [r3, #4]
 8000ed0:	23a0      	movs	r3, #160	; 0xa0
 8000ed2:	02db      	lsls	r3, r3, #11
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	d10e      	bne.n	8000ef6 <HAL_RCC_OscConfig+0xa6>
 8000ed8:	4ba9      	ldr	r3, [pc, #676]	; (8001180 <HAL_RCC_OscConfig+0x330>)
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	4ba8      	ldr	r3, [pc, #672]	; (8001180 <HAL_RCC_OscConfig+0x330>)
 8000ede:	2180      	movs	r1, #128	; 0x80
 8000ee0:	02c9      	lsls	r1, r1, #11
 8000ee2:	430a      	orrs	r2, r1
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	4ba6      	ldr	r3, [pc, #664]	; (8001180 <HAL_RCC_OscConfig+0x330>)
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	4ba5      	ldr	r3, [pc, #660]	; (8001180 <HAL_RCC_OscConfig+0x330>)
 8000eec:	2180      	movs	r1, #128	; 0x80
 8000eee:	0249      	lsls	r1, r1, #9
 8000ef0:	430a      	orrs	r2, r1
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	e00b      	b.n	8000f0e <HAL_RCC_OscConfig+0xbe>
 8000ef6:	4ba2      	ldr	r3, [pc, #648]	; (8001180 <HAL_RCC_OscConfig+0x330>)
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	4ba1      	ldr	r3, [pc, #644]	; (8001180 <HAL_RCC_OscConfig+0x330>)
 8000efc:	49a1      	ldr	r1, [pc, #644]	; (8001184 <HAL_RCC_OscConfig+0x334>)
 8000efe:	400a      	ands	r2, r1
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	4b9f      	ldr	r3, [pc, #636]	; (8001180 <HAL_RCC_OscConfig+0x330>)
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	4b9e      	ldr	r3, [pc, #632]	; (8001180 <HAL_RCC_OscConfig+0x330>)
 8000f08:	499f      	ldr	r1, [pc, #636]	; (8001188 <HAL_RCC_OscConfig+0x338>)
 8000f0a:	400a      	ands	r2, r1
 8000f0c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d014      	beq.n	8000f40 <HAL_RCC_OscConfig+0xf0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f16:	f7ff fcbd 	bl	8000894 <HAL_GetTick>
 8000f1a:	0003      	movs	r3, r0
 8000f1c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f1e:	e008      	b.n	8000f32 <HAL_RCC_OscConfig+0xe2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f20:	f7ff fcb8 	bl	8000894 <HAL_GetTick>
 8000f24:	0002      	movs	r2, r0
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	2b64      	cmp	r3, #100	; 0x64
 8000f2c:	d901      	bls.n	8000f32 <HAL_RCC_OscConfig+0xe2>
          {
            return HAL_TIMEOUT;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	e2ee      	b.n	8001510 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f32:	4b93      	ldr	r3, [pc, #588]	; (8001180 <HAL_RCC_OscConfig+0x330>)
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	2380      	movs	r3, #128	; 0x80
 8000f38:	029b      	lsls	r3, r3, #10
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	d0f0      	beq.n	8000f20 <HAL_RCC_OscConfig+0xd0>
 8000f3e:	e015      	b.n	8000f6c <HAL_RCC_OscConfig+0x11c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f40:	f7ff fca8 	bl	8000894 <HAL_GetTick>
 8000f44:	0003      	movs	r3, r0
 8000f46:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f48:	e008      	b.n	8000f5c <HAL_RCC_OscConfig+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f4a:	f7ff fca3 	bl	8000894 <HAL_GetTick>
 8000f4e:	0002      	movs	r2, r0
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	1ad3      	subs	r3, r2, r3
 8000f54:	2b64      	cmp	r3, #100	; 0x64
 8000f56:	d901      	bls.n	8000f5c <HAL_RCC_OscConfig+0x10c>
          {
            return HAL_TIMEOUT;
 8000f58:	2303      	movs	r3, #3
 8000f5a:	e2d9      	b.n	8001510 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f5c:	4b88      	ldr	r3, [pc, #544]	; (8001180 <HAL_RCC_OscConfig+0x330>)
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	2380      	movs	r3, #128	; 0x80
 8000f62:	029b      	lsls	r3, r3, #10
 8000f64:	4013      	ands	r3, r2
 8000f66:	d1f0      	bne.n	8000f4a <HAL_RCC_OscConfig+0xfa>
 8000f68:	e000      	b.n	8000f6c <HAL_RCC_OscConfig+0x11c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f6a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2202      	movs	r2, #2
 8000f72:	4013      	ands	r3, r2
 8000f74:	d100      	bne.n	8000f78 <HAL_RCC_OscConfig+0x128>
 8000f76:	e099      	b.n	80010ac <HAL_RCC_OscConfig+0x25c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f78:	4b81      	ldr	r3, [pc, #516]	; (8001180 <HAL_RCC_OscConfig+0x330>)
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	2238      	movs	r2, #56	; 0x38
 8000f7e:	4013      	ands	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f82:	4b7f      	ldr	r3, [pc, #508]	; (8001180 <HAL_RCC_OscConfig+0x330>)
 8000f84:	68db      	ldr	r3, [r3, #12]
 8000f86:	2203      	movs	r2, #3
 8000f88:	4013      	ands	r3, r2
 8000f8a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8000f8c:	69bb      	ldr	r3, [r7, #24]
 8000f8e:	2b10      	cmp	r3, #16
 8000f90:	d102      	bne.n	8000f98 <HAL_RCC_OscConfig+0x148>
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	2b02      	cmp	r3, #2
 8000f96:	d002      	beq.n	8000f9e <HAL_RCC_OscConfig+0x14e>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d135      	bne.n	800100a <HAL_RCC_OscConfig+0x1ba>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f9e:	4b78      	ldr	r3, [pc, #480]	; (8001180 <HAL_RCC_OscConfig+0x330>)
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	2380      	movs	r3, #128	; 0x80
 8000fa4:	00db      	lsls	r3, r3, #3
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	d005      	beq.n	8000fb6 <HAL_RCC_OscConfig+0x166>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	68db      	ldr	r3, [r3, #12]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d101      	bne.n	8000fb6 <HAL_RCC_OscConfig+0x166>
      {
        return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e2ac      	b.n	8001510 <HAL_RCC_OscConfig+0x6c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fb6:	4b72      	ldr	r3, [pc, #456]	; (8001180 <HAL_RCC_OscConfig+0x330>)
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	4a74      	ldr	r2, [pc, #464]	; (800118c <HAL_RCC_OscConfig+0x33c>)
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	0019      	movs	r1, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	695b      	ldr	r3, [r3, #20]
 8000fc4:	021a      	lsls	r2, r3, #8
 8000fc6:	4b6e      	ldr	r3, [pc, #440]	; (8001180 <HAL_RCC_OscConfig+0x330>)
 8000fc8:	430a      	orrs	r2, r1
 8000fca:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fcc:	69bb      	ldr	r3, [r7, #24]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d112      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x1a8>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000fd2:	4b6b      	ldr	r3, [pc, #428]	; (8001180 <HAL_RCC_OscConfig+0x330>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a6e      	ldr	r2, [pc, #440]	; (8001190 <HAL_RCC_OscConfig+0x340>)
 8000fd8:	4013      	ands	r3, r2
 8000fda:	0019      	movs	r1, r3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	691a      	ldr	r2, [r3, #16]
 8000fe0:	4b67      	ldr	r3, [pc, #412]	; (8001180 <HAL_RCC_OscConfig+0x330>)
 8000fe2:	430a      	orrs	r2, r1
 8000fe4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8000fe6:	4b66      	ldr	r3, [pc, #408]	; (8001180 <HAL_RCC_OscConfig+0x330>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	0adb      	lsrs	r3, r3, #11
 8000fec:	2207      	movs	r2, #7
 8000fee:	4013      	ands	r3, r2
 8000ff0:	4a68      	ldr	r2, [pc, #416]	; (8001194 <HAL_RCC_OscConfig+0x344>)
 8000ff2:	40da      	lsrs	r2, r3
 8000ff4:	4b68      	ldr	r3, [pc, #416]	; (8001198 <HAL_RCC_OscConfig+0x348>)
 8000ff6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000ff8:	4b68      	ldr	r3, [pc, #416]	; (800119c <HAL_RCC_OscConfig+0x34c>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	0018      	movs	r0, r3
 8000ffe:	f7ff fbed 	bl	80007dc <HAL_InitTick>
 8001002:	1e03      	subs	r3, r0, #0
 8001004:	d051      	beq.n	80010aa <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e282      	b.n	8001510 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	68db      	ldr	r3, [r3, #12]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d030      	beq.n	8001074 <HAL_RCC_OscConfig+0x224>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001012:	4b5b      	ldr	r3, [pc, #364]	; (8001180 <HAL_RCC_OscConfig+0x330>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a5e      	ldr	r2, [pc, #376]	; (8001190 <HAL_RCC_OscConfig+0x340>)
 8001018:	4013      	ands	r3, r2
 800101a:	0019      	movs	r1, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	691a      	ldr	r2, [r3, #16]
 8001020:	4b57      	ldr	r3, [pc, #348]	; (8001180 <HAL_RCC_OscConfig+0x330>)
 8001022:	430a      	orrs	r2, r1
 8001024:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001026:	4b56      	ldr	r3, [pc, #344]	; (8001180 <HAL_RCC_OscConfig+0x330>)
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	4b55      	ldr	r3, [pc, #340]	; (8001180 <HAL_RCC_OscConfig+0x330>)
 800102c:	2180      	movs	r1, #128	; 0x80
 800102e:	0049      	lsls	r1, r1, #1
 8001030:	430a      	orrs	r2, r1
 8001032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001034:	f7ff fc2e 	bl	8000894 <HAL_GetTick>
 8001038:	0003      	movs	r3, r0
 800103a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800103c:	e008      	b.n	8001050 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800103e:	f7ff fc29 	bl	8000894 <HAL_GetTick>
 8001042:	0002      	movs	r2, r0
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	1ad3      	subs	r3, r2, r3
 8001048:	2b02      	cmp	r3, #2
 800104a:	d901      	bls.n	8001050 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800104c:	2303      	movs	r3, #3
 800104e:	e25f      	b.n	8001510 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001050:	4b4b      	ldr	r3, [pc, #300]	; (8001180 <HAL_RCC_OscConfig+0x330>)
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	2380      	movs	r3, #128	; 0x80
 8001056:	00db      	lsls	r3, r3, #3
 8001058:	4013      	ands	r3, r2
 800105a:	d0f0      	beq.n	800103e <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800105c:	4b48      	ldr	r3, [pc, #288]	; (8001180 <HAL_RCC_OscConfig+0x330>)
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	4a4a      	ldr	r2, [pc, #296]	; (800118c <HAL_RCC_OscConfig+0x33c>)
 8001062:	4013      	ands	r3, r2
 8001064:	0019      	movs	r1, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	695b      	ldr	r3, [r3, #20]
 800106a:	021a      	lsls	r2, r3, #8
 800106c:	4b44      	ldr	r3, [pc, #272]	; (8001180 <HAL_RCC_OscConfig+0x330>)
 800106e:	430a      	orrs	r2, r1
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	e01b      	b.n	80010ac <HAL_RCC_OscConfig+0x25c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001074:	4b42      	ldr	r3, [pc, #264]	; (8001180 <HAL_RCC_OscConfig+0x330>)
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	4b41      	ldr	r3, [pc, #260]	; (8001180 <HAL_RCC_OscConfig+0x330>)
 800107a:	4949      	ldr	r1, [pc, #292]	; (80011a0 <HAL_RCC_OscConfig+0x350>)
 800107c:	400a      	ands	r2, r1
 800107e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001080:	f7ff fc08 	bl	8000894 <HAL_GetTick>
 8001084:	0003      	movs	r3, r0
 8001086:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001088:	e008      	b.n	800109c <HAL_RCC_OscConfig+0x24c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800108a:	f7ff fc03 	bl	8000894 <HAL_GetTick>
 800108e:	0002      	movs	r2, r0
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	1ad3      	subs	r3, r2, r3
 8001094:	2b02      	cmp	r3, #2
 8001096:	d901      	bls.n	800109c <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 8001098:	2303      	movs	r3, #3
 800109a:	e239      	b.n	8001510 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800109c:	4b38      	ldr	r3, [pc, #224]	; (8001180 <HAL_RCC_OscConfig+0x330>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	2380      	movs	r3, #128	; 0x80
 80010a2:	00db      	lsls	r3, r3, #3
 80010a4:	4013      	ands	r3, r2
 80010a6:	d1f0      	bne.n	800108a <HAL_RCC_OscConfig+0x23a>
 80010a8:	e000      	b.n	80010ac <HAL_RCC_OscConfig+0x25c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80010aa:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2208      	movs	r2, #8
 80010b2:	4013      	ands	r3, r2
 80010b4:	d047      	beq.n	8001146 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80010b6:	4b32      	ldr	r3, [pc, #200]	; (8001180 <HAL_RCC_OscConfig+0x330>)
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	2238      	movs	r2, #56	; 0x38
 80010bc:	4013      	ands	r3, r2
 80010be:	2b18      	cmp	r3, #24
 80010c0:	d10a      	bne.n	80010d8 <HAL_RCC_OscConfig+0x288>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80010c2:	4b2f      	ldr	r3, [pc, #188]	; (8001180 <HAL_RCC_OscConfig+0x330>)
 80010c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010c6:	2202      	movs	r2, #2
 80010c8:	4013      	ands	r3, r2
 80010ca:	d03c      	beq.n	8001146 <HAL_RCC_OscConfig+0x2f6>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d138      	bne.n	8001146 <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 80010d4:	2301      	movs	r3, #1
 80010d6:	e21b      	b.n	8001510 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	699b      	ldr	r3, [r3, #24]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d019      	beq.n	8001114 <HAL_RCC_OscConfig+0x2c4>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80010e0:	4b27      	ldr	r3, [pc, #156]	; (8001180 <HAL_RCC_OscConfig+0x330>)
 80010e2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80010e4:	4b26      	ldr	r3, [pc, #152]	; (8001180 <HAL_RCC_OscConfig+0x330>)
 80010e6:	2101      	movs	r1, #1
 80010e8:	430a      	orrs	r2, r1
 80010ea:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010ec:	f7ff fbd2 	bl	8000894 <HAL_GetTick>
 80010f0:	0003      	movs	r3, r0
 80010f2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80010f4:	e008      	b.n	8001108 <HAL_RCC_OscConfig+0x2b8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010f6:	f7ff fbcd 	bl	8000894 <HAL_GetTick>
 80010fa:	0002      	movs	r2, r0
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	1ad3      	subs	r3, r2, r3
 8001100:	2b02      	cmp	r3, #2
 8001102:	d901      	bls.n	8001108 <HAL_RCC_OscConfig+0x2b8>
          {
            return HAL_TIMEOUT;
 8001104:	2303      	movs	r3, #3
 8001106:	e203      	b.n	8001510 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001108:	4b1d      	ldr	r3, [pc, #116]	; (8001180 <HAL_RCC_OscConfig+0x330>)
 800110a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800110c:	2202      	movs	r2, #2
 800110e:	4013      	ands	r3, r2
 8001110:	d0f1      	beq.n	80010f6 <HAL_RCC_OscConfig+0x2a6>
 8001112:	e018      	b.n	8001146 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001114:	4b1a      	ldr	r3, [pc, #104]	; (8001180 <HAL_RCC_OscConfig+0x330>)
 8001116:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001118:	4b19      	ldr	r3, [pc, #100]	; (8001180 <HAL_RCC_OscConfig+0x330>)
 800111a:	2101      	movs	r1, #1
 800111c:	438a      	bics	r2, r1
 800111e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001120:	f7ff fbb8 	bl	8000894 <HAL_GetTick>
 8001124:	0003      	movs	r3, r0
 8001126:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001128:	e008      	b.n	800113c <HAL_RCC_OscConfig+0x2ec>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800112a:	f7ff fbb3 	bl	8000894 <HAL_GetTick>
 800112e:	0002      	movs	r2, r0
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	2b02      	cmp	r3, #2
 8001136:	d901      	bls.n	800113c <HAL_RCC_OscConfig+0x2ec>
          {
            return HAL_TIMEOUT;
 8001138:	2303      	movs	r3, #3
 800113a:	e1e9      	b.n	8001510 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800113c:	4b10      	ldr	r3, [pc, #64]	; (8001180 <HAL_RCC_OscConfig+0x330>)
 800113e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001140:	2202      	movs	r2, #2
 8001142:	4013      	ands	r3, r2
 8001144:	d1f1      	bne.n	800112a <HAL_RCC_OscConfig+0x2da>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	2204      	movs	r2, #4
 800114c:	4013      	ands	r3, r2
 800114e:	d100      	bne.n	8001152 <HAL_RCC_OscConfig+0x302>
 8001150:	e0c6      	b.n	80012e0 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001152:	231f      	movs	r3, #31
 8001154:	18fb      	adds	r3, r7, r3
 8001156:	2200      	movs	r2, #0
 8001158:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800115a:	4b09      	ldr	r3, [pc, #36]	; (8001180 <HAL_RCC_OscConfig+0x330>)
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	2238      	movs	r2, #56	; 0x38
 8001160:	4013      	ands	r3, r2
 8001162:	2b20      	cmp	r3, #32
 8001164:	d11e      	bne.n	80011a4 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001166:	4b06      	ldr	r3, [pc, #24]	; (8001180 <HAL_RCC_OscConfig+0x330>)
 8001168:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800116a:	2202      	movs	r2, #2
 800116c:	4013      	ands	r3, r2
 800116e:	d100      	bne.n	8001172 <HAL_RCC_OscConfig+0x322>
 8001170:	e0b6      	b.n	80012e0 <HAL_RCC_OscConfig+0x490>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d000      	beq.n	800117c <HAL_RCC_OscConfig+0x32c>
 800117a:	e0b1      	b.n	80012e0 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 800117c:	2301      	movs	r3, #1
 800117e:	e1c7      	b.n	8001510 <HAL_RCC_OscConfig+0x6c0>
 8001180:	40021000 	.word	0x40021000
 8001184:	fffeffff 	.word	0xfffeffff
 8001188:	fffbffff 	.word	0xfffbffff
 800118c:	ffff80ff 	.word	0xffff80ff
 8001190:	ffffc7ff 	.word	0xffffc7ff
 8001194:	00f42400 	.word	0x00f42400
 8001198:	20000000 	.word	0x20000000
 800119c:	20000004 	.word	0x20000004
 80011a0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80011a4:	4bb8      	ldr	r3, [pc, #736]	; (8001488 <HAL_RCC_OscConfig+0x638>)
 80011a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80011a8:	2380      	movs	r3, #128	; 0x80
 80011aa:	055b      	lsls	r3, r3, #21
 80011ac:	4013      	ands	r3, r2
 80011ae:	d101      	bne.n	80011b4 <HAL_RCC_OscConfig+0x364>
 80011b0:	2301      	movs	r3, #1
 80011b2:	e000      	b.n	80011b6 <HAL_RCC_OscConfig+0x366>
 80011b4:	2300      	movs	r3, #0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d011      	beq.n	80011de <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80011ba:	4bb3      	ldr	r3, [pc, #716]	; (8001488 <HAL_RCC_OscConfig+0x638>)
 80011bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80011be:	4bb2      	ldr	r3, [pc, #712]	; (8001488 <HAL_RCC_OscConfig+0x638>)
 80011c0:	2180      	movs	r1, #128	; 0x80
 80011c2:	0549      	lsls	r1, r1, #21
 80011c4:	430a      	orrs	r2, r1
 80011c6:	63da      	str	r2, [r3, #60]	; 0x3c
 80011c8:	4baf      	ldr	r3, [pc, #700]	; (8001488 <HAL_RCC_OscConfig+0x638>)
 80011ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80011cc:	2380      	movs	r3, #128	; 0x80
 80011ce:	055b      	lsls	r3, r3, #21
 80011d0:	4013      	ands	r3, r2
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80011d6:	231f      	movs	r3, #31
 80011d8:	18fb      	adds	r3, r7, r3
 80011da:	2201      	movs	r2, #1
 80011dc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011de:	4bab      	ldr	r3, [pc, #684]	; (800148c <HAL_RCC_OscConfig+0x63c>)
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	2380      	movs	r3, #128	; 0x80
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	4013      	ands	r3, r2
 80011e8:	d11a      	bne.n	8001220 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80011ea:	4ba8      	ldr	r3, [pc, #672]	; (800148c <HAL_RCC_OscConfig+0x63c>)
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	4ba7      	ldr	r3, [pc, #668]	; (800148c <HAL_RCC_OscConfig+0x63c>)
 80011f0:	2180      	movs	r1, #128	; 0x80
 80011f2:	0049      	lsls	r1, r1, #1
 80011f4:	430a      	orrs	r2, r1
 80011f6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80011f8:	f7ff fb4c 	bl	8000894 <HAL_GetTick>
 80011fc:	0003      	movs	r3, r0
 80011fe:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001200:	e008      	b.n	8001214 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001202:	f7ff fb47 	bl	8000894 <HAL_GetTick>
 8001206:	0002      	movs	r2, r0
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	2b02      	cmp	r3, #2
 800120e:	d901      	bls.n	8001214 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8001210:	2303      	movs	r3, #3
 8001212:	e17d      	b.n	8001510 <HAL_RCC_OscConfig+0x6c0>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001214:	4b9d      	ldr	r3, [pc, #628]	; (800148c <HAL_RCC_OscConfig+0x63c>)
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	2380      	movs	r3, #128	; 0x80
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	4013      	ands	r3, r2
 800121e:	d0f0      	beq.n	8001202 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	2b01      	cmp	r3, #1
 8001226:	d106      	bne.n	8001236 <HAL_RCC_OscConfig+0x3e6>
 8001228:	4b97      	ldr	r3, [pc, #604]	; (8001488 <HAL_RCC_OscConfig+0x638>)
 800122a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800122c:	4b96      	ldr	r3, [pc, #600]	; (8001488 <HAL_RCC_OscConfig+0x638>)
 800122e:	2101      	movs	r1, #1
 8001230:	430a      	orrs	r2, r1
 8001232:	65da      	str	r2, [r3, #92]	; 0x5c
 8001234:	e01c      	b.n	8001270 <HAL_RCC_OscConfig+0x420>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	2b05      	cmp	r3, #5
 800123c:	d10c      	bne.n	8001258 <HAL_RCC_OscConfig+0x408>
 800123e:	4b92      	ldr	r3, [pc, #584]	; (8001488 <HAL_RCC_OscConfig+0x638>)
 8001240:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001242:	4b91      	ldr	r3, [pc, #580]	; (8001488 <HAL_RCC_OscConfig+0x638>)
 8001244:	2104      	movs	r1, #4
 8001246:	430a      	orrs	r2, r1
 8001248:	65da      	str	r2, [r3, #92]	; 0x5c
 800124a:	4b8f      	ldr	r3, [pc, #572]	; (8001488 <HAL_RCC_OscConfig+0x638>)
 800124c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800124e:	4b8e      	ldr	r3, [pc, #568]	; (8001488 <HAL_RCC_OscConfig+0x638>)
 8001250:	2101      	movs	r1, #1
 8001252:	430a      	orrs	r2, r1
 8001254:	65da      	str	r2, [r3, #92]	; 0x5c
 8001256:	e00b      	b.n	8001270 <HAL_RCC_OscConfig+0x420>
 8001258:	4b8b      	ldr	r3, [pc, #556]	; (8001488 <HAL_RCC_OscConfig+0x638>)
 800125a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800125c:	4b8a      	ldr	r3, [pc, #552]	; (8001488 <HAL_RCC_OscConfig+0x638>)
 800125e:	2101      	movs	r1, #1
 8001260:	438a      	bics	r2, r1
 8001262:	65da      	str	r2, [r3, #92]	; 0x5c
 8001264:	4b88      	ldr	r3, [pc, #544]	; (8001488 <HAL_RCC_OscConfig+0x638>)
 8001266:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001268:	4b87      	ldr	r3, [pc, #540]	; (8001488 <HAL_RCC_OscConfig+0x638>)
 800126a:	2104      	movs	r1, #4
 800126c:	438a      	bics	r2, r1
 800126e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d014      	beq.n	80012a2 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001278:	f7ff fb0c 	bl	8000894 <HAL_GetTick>
 800127c:	0003      	movs	r3, r0
 800127e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001280:	e009      	b.n	8001296 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001282:	f7ff fb07 	bl	8000894 <HAL_GetTick>
 8001286:	0002      	movs	r2, r0
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	4a80      	ldr	r2, [pc, #512]	; (8001490 <HAL_RCC_OscConfig+0x640>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d901      	bls.n	8001296 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001292:	2303      	movs	r3, #3
 8001294:	e13c      	b.n	8001510 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001296:	4b7c      	ldr	r3, [pc, #496]	; (8001488 <HAL_RCC_OscConfig+0x638>)
 8001298:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800129a:	2202      	movs	r2, #2
 800129c:	4013      	ands	r3, r2
 800129e:	d0f0      	beq.n	8001282 <HAL_RCC_OscConfig+0x432>
 80012a0:	e013      	b.n	80012ca <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012a2:	f7ff faf7 	bl	8000894 <HAL_GetTick>
 80012a6:	0003      	movs	r3, r0
 80012a8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012aa:	e009      	b.n	80012c0 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012ac:	f7ff faf2 	bl	8000894 <HAL_GetTick>
 80012b0:	0002      	movs	r2, r0
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	4a76      	ldr	r2, [pc, #472]	; (8001490 <HAL_RCC_OscConfig+0x640>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d901      	bls.n	80012c0 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 80012bc:	2303      	movs	r3, #3
 80012be:	e127      	b.n	8001510 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012c0:	4b71      	ldr	r3, [pc, #452]	; (8001488 <HAL_RCC_OscConfig+0x638>)
 80012c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012c4:	2202      	movs	r2, #2
 80012c6:	4013      	ands	r3, r2
 80012c8:	d1f0      	bne.n	80012ac <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80012ca:	231f      	movs	r3, #31
 80012cc:	18fb      	adds	r3, r7, r3
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d105      	bne.n	80012e0 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80012d4:	4b6c      	ldr	r3, [pc, #432]	; (8001488 <HAL_RCC_OscConfig+0x638>)
 80012d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80012d8:	4b6b      	ldr	r3, [pc, #428]	; (8001488 <HAL_RCC_OscConfig+0x638>)
 80012da:	496e      	ldr	r1, [pc, #440]	; (8001494 <HAL_RCC_OscConfig+0x644>)
 80012dc:	400a      	ands	r2, r1
 80012de:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2220      	movs	r2, #32
 80012e6:	4013      	ands	r3, r2
 80012e8:	d039      	beq.n	800135e <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	69db      	ldr	r3, [r3, #28]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d01b      	beq.n	800132a <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80012f2:	4b65      	ldr	r3, [pc, #404]	; (8001488 <HAL_RCC_OscConfig+0x638>)
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	4b64      	ldr	r3, [pc, #400]	; (8001488 <HAL_RCC_OscConfig+0x638>)
 80012f8:	2180      	movs	r1, #128	; 0x80
 80012fa:	03c9      	lsls	r1, r1, #15
 80012fc:	430a      	orrs	r2, r1
 80012fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001300:	f7ff fac8 	bl	8000894 <HAL_GetTick>
 8001304:	0003      	movs	r3, r0
 8001306:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001308:	e008      	b.n	800131c <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800130a:	f7ff fac3 	bl	8000894 <HAL_GetTick>
 800130e:	0002      	movs	r2, r0
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	2b02      	cmp	r3, #2
 8001316:	d901      	bls.n	800131c <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8001318:	2303      	movs	r3, #3
 800131a:	e0f9      	b.n	8001510 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800131c:	4b5a      	ldr	r3, [pc, #360]	; (8001488 <HAL_RCC_OscConfig+0x638>)
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	2380      	movs	r3, #128	; 0x80
 8001322:	041b      	lsls	r3, r3, #16
 8001324:	4013      	ands	r3, r2
 8001326:	d0f0      	beq.n	800130a <HAL_RCC_OscConfig+0x4ba>
 8001328:	e019      	b.n	800135e <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800132a:	4b57      	ldr	r3, [pc, #348]	; (8001488 <HAL_RCC_OscConfig+0x638>)
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	4b56      	ldr	r3, [pc, #344]	; (8001488 <HAL_RCC_OscConfig+0x638>)
 8001330:	4959      	ldr	r1, [pc, #356]	; (8001498 <HAL_RCC_OscConfig+0x648>)
 8001332:	400a      	ands	r2, r1
 8001334:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001336:	f7ff faad 	bl	8000894 <HAL_GetTick>
 800133a:	0003      	movs	r3, r0
 800133c:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800133e:	e008      	b.n	8001352 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001340:	f7ff faa8 	bl	8000894 <HAL_GetTick>
 8001344:	0002      	movs	r2, r0
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	2b02      	cmp	r3, #2
 800134c:	d901      	bls.n	8001352 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e0de      	b.n	8001510 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001352:	4b4d      	ldr	r3, [pc, #308]	; (8001488 <HAL_RCC_OscConfig+0x638>)
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	2380      	movs	r3, #128	; 0x80
 8001358:	041b      	lsls	r3, r3, #16
 800135a:	4013      	ands	r3, r2
 800135c:	d1f0      	bne.n	8001340 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6a1b      	ldr	r3, [r3, #32]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d100      	bne.n	8001368 <HAL_RCC_OscConfig+0x518>
 8001366:	e0d2      	b.n	800150e <HAL_RCC_OscConfig+0x6be>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001368:	4b47      	ldr	r3, [pc, #284]	; (8001488 <HAL_RCC_OscConfig+0x638>)
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	2238      	movs	r2, #56	; 0x38
 800136e:	4013      	ands	r3, r2
 8001370:	2b10      	cmp	r3, #16
 8001372:	d100      	bne.n	8001376 <HAL_RCC_OscConfig+0x526>
 8001374:	e081      	b.n	800147a <HAL_RCC_OscConfig+0x62a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6a1b      	ldr	r3, [r3, #32]
 800137a:	2b02      	cmp	r3, #2
 800137c:	d156      	bne.n	800142c <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800137e:	4b42      	ldr	r3, [pc, #264]	; (8001488 <HAL_RCC_OscConfig+0x638>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	4b41      	ldr	r3, [pc, #260]	; (8001488 <HAL_RCC_OscConfig+0x638>)
 8001384:	4945      	ldr	r1, [pc, #276]	; (800149c <HAL_RCC_OscConfig+0x64c>)
 8001386:	400a      	ands	r2, r1
 8001388:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800138a:	f7ff fa83 	bl	8000894 <HAL_GetTick>
 800138e:	0003      	movs	r3, r0
 8001390:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001392:	e008      	b.n	80013a6 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001394:	f7ff fa7e 	bl	8000894 <HAL_GetTick>
 8001398:	0002      	movs	r2, r0
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d901      	bls.n	80013a6 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e0b4      	b.n	8001510 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013a6:	4b38      	ldr	r3, [pc, #224]	; (8001488 <HAL_RCC_OscConfig+0x638>)
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	2380      	movs	r3, #128	; 0x80
 80013ac:	049b      	lsls	r3, r3, #18
 80013ae:	4013      	ands	r3, r2
 80013b0:	d1f0      	bne.n	8001394 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013b2:	4b35      	ldr	r3, [pc, #212]	; (8001488 <HAL_RCC_OscConfig+0x638>)
 80013b4:	68db      	ldr	r3, [r3, #12]
 80013b6:	4a3a      	ldr	r2, [pc, #232]	; (80014a0 <HAL_RCC_OscConfig+0x650>)
 80013b8:	4013      	ands	r3, r2
 80013ba:	0019      	movs	r1, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c4:	431a      	orrs	r2, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ca:	021b      	lsls	r3, r3, #8
 80013cc:	431a      	orrs	r2, r3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	431a      	orrs	r2, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013d8:	431a      	orrs	r2, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013de:	431a      	orrs	r2, r3
 80013e0:	4b29      	ldr	r3, [pc, #164]	; (8001488 <HAL_RCC_OscConfig+0x638>)
 80013e2:	430a      	orrs	r2, r1
 80013e4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013e6:	4b28      	ldr	r3, [pc, #160]	; (8001488 <HAL_RCC_OscConfig+0x638>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	4b27      	ldr	r3, [pc, #156]	; (8001488 <HAL_RCC_OscConfig+0x638>)
 80013ec:	2180      	movs	r1, #128	; 0x80
 80013ee:	0449      	lsls	r1, r1, #17
 80013f0:	430a      	orrs	r2, r1
 80013f2:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80013f4:	4b24      	ldr	r3, [pc, #144]	; (8001488 <HAL_RCC_OscConfig+0x638>)
 80013f6:	68da      	ldr	r2, [r3, #12]
 80013f8:	4b23      	ldr	r3, [pc, #140]	; (8001488 <HAL_RCC_OscConfig+0x638>)
 80013fa:	2180      	movs	r1, #128	; 0x80
 80013fc:	0549      	lsls	r1, r1, #21
 80013fe:	430a      	orrs	r2, r1
 8001400:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001402:	f7ff fa47 	bl	8000894 <HAL_GetTick>
 8001406:	0003      	movs	r3, r0
 8001408:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800140a:	e008      	b.n	800141e <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800140c:	f7ff fa42 	bl	8000894 <HAL_GetTick>
 8001410:	0002      	movs	r2, r0
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b02      	cmp	r3, #2
 8001418:	d901      	bls.n	800141e <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e078      	b.n	8001510 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800141e:	4b1a      	ldr	r3, [pc, #104]	; (8001488 <HAL_RCC_OscConfig+0x638>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	2380      	movs	r3, #128	; 0x80
 8001424:	049b      	lsls	r3, r3, #18
 8001426:	4013      	ands	r3, r2
 8001428:	d0f0      	beq.n	800140c <HAL_RCC_OscConfig+0x5bc>
 800142a:	e070      	b.n	800150e <HAL_RCC_OscConfig+0x6be>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800142c:	4b16      	ldr	r3, [pc, #88]	; (8001488 <HAL_RCC_OscConfig+0x638>)
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	4b15      	ldr	r3, [pc, #84]	; (8001488 <HAL_RCC_OscConfig+0x638>)
 8001432:	491a      	ldr	r1, [pc, #104]	; (800149c <HAL_RCC_OscConfig+0x64c>)
 8001434:	400a      	ands	r2, r1
 8001436:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001438:	4b13      	ldr	r3, [pc, #76]	; (8001488 <HAL_RCC_OscConfig+0x638>)
 800143a:	68da      	ldr	r2, [r3, #12]
 800143c:	4b12      	ldr	r3, [pc, #72]	; (8001488 <HAL_RCC_OscConfig+0x638>)
 800143e:	2103      	movs	r1, #3
 8001440:	438a      	bics	r2, r1
 8001442:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001444:	4b10      	ldr	r3, [pc, #64]	; (8001488 <HAL_RCC_OscConfig+0x638>)
 8001446:	68da      	ldr	r2, [r3, #12]
 8001448:	4b0f      	ldr	r3, [pc, #60]	; (8001488 <HAL_RCC_OscConfig+0x638>)
 800144a:	4916      	ldr	r1, [pc, #88]	; (80014a4 <HAL_RCC_OscConfig+0x654>)
 800144c:	400a      	ands	r2, r1
 800144e:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001450:	f7ff fa20 	bl	8000894 <HAL_GetTick>
 8001454:	0003      	movs	r3, r0
 8001456:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001458:	e008      	b.n	800146c <HAL_RCC_OscConfig+0x61c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800145a:	f7ff fa1b 	bl	8000894 <HAL_GetTick>
 800145e:	0002      	movs	r2, r0
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	2b02      	cmp	r3, #2
 8001466:	d901      	bls.n	800146c <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 8001468:	2303      	movs	r3, #3
 800146a:	e051      	b.n	8001510 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800146c:	4b06      	ldr	r3, [pc, #24]	; (8001488 <HAL_RCC_OscConfig+0x638>)
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	2380      	movs	r3, #128	; 0x80
 8001472:	049b      	lsls	r3, r3, #18
 8001474:	4013      	ands	r3, r2
 8001476:	d1f0      	bne.n	800145a <HAL_RCC_OscConfig+0x60a>
 8001478:	e049      	b.n	800150e <HAL_RCC_OscConfig+0x6be>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6a1b      	ldr	r3, [r3, #32]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d112      	bne.n	80014a8 <HAL_RCC_OscConfig+0x658>
      {
        return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e044      	b.n	8001510 <HAL_RCC_OscConfig+0x6c0>
 8001486:	46c0      	nop			; (mov r8, r8)
 8001488:	40021000 	.word	0x40021000
 800148c:	40007000 	.word	0x40007000
 8001490:	00001388 	.word	0x00001388
 8001494:	efffffff 	.word	0xefffffff
 8001498:	ffbfffff 	.word	0xffbfffff
 800149c:	feffffff 	.word	0xfeffffff
 80014a0:	11c1808c 	.word	0x11c1808c
 80014a4:	eefeffff 	.word	0xeefeffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80014a8:	4b1b      	ldr	r3, [pc, #108]	; (8001518 <HAL_RCC_OscConfig+0x6c8>)
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	2203      	movs	r2, #3
 80014b2:	401a      	ands	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d126      	bne.n	800150a <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	2270      	movs	r2, #112	; 0x70
 80014c0:	401a      	ands	r2, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d11f      	bne.n	800150a <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80014ca:	697a      	ldr	r2, [r7, #20]
 80014cc:	23fe      	movs	r3, #254	; 0xfe
 80014ce:	01db      	lsls	r3, r3, #7
 80014d0:	401a      	ands	r2, r3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014d6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80014d8:	429a      	cmp	r2, r3
 80014da:	d116      	bne.n	800150a <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80014dc:	697a      	ldr	r2, [r7, #20]
 80014de:	23f8      	movs	r3, #248	; 0xf8
 80014e0:	039b      	lsls	r3, r3, #14
 80014e2:	401a      	ands	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d10e      	bne.n	800150a <HAL_RCC_OscConfig+0x6ba>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80014ec:	697a      	ldr	r2, [r7, #20]
 80014ee:	23e0      	movs	r3, #224	; 0xe0
 80014f0:	051b      	lsls	r3, r3, #20
 80014f2:	401a      	ands	r2, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d106      	bne.n	800150a <HAL_RCC_OscConfig+0x6ba>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	0f5b      	lsrs	r3, r3, #29
 8001500:	075a      	lsls	r2, r3, #29
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001506:	429a      	cmp	r2, r3
 8001508:	d001      	beq.n	800150e <HAL_RCC_OscConfig+0x6be>
        {
          return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e000      	b.n	8001510 <HAL_RCC_OscConfig+0x6c0>
        }
      }
    }
  }
  return HAL_OK;
 800150e:	2300      	movs	r3, #0
}
 8001510:	0018      	movs	r0, r3
 8001512:	46bd      	mov	sp, r7
 8001514:	b008      	add	sp, #32
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40021000 	.word	0x40021000

0800151c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d101      	bne.n	8001530 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e0e9      	b.n	8001704 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001530:	4b76      	ldr	r3, [pc, #472]	; (800170c <HAL_RCC_ClockConfig+0x1f0>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2207      	movs	r2, #7
 8001536:	4013      	ands	r3, r2
 8001538:	683a      	ldr	r2, [r7, #0]
 800153a:	429a      	cmp	r2, r3
 800153c:	d91e      	bls.n	800157c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800153e:	4b73      	ldr	r3, [pc, #460]	; (800170c <HAL_RCC_ClockConfig+0x1f0>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2207      	movs	r2, #7
 8001544:	4393      	bics	r3, r2
 8001546:	0019      	movs	r1, r3
 8001548:	4b70      	ldr	r3, [pc, #448]	; (800170c <HAL_RCC_ClockConfig+0x1f0>)
 800154a:	683a      	ldr	r2, [r7, #0]
 800154c:	430a      	orrs	r2, r1
 800154e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001550:	f7ff f9a0 	bl	8000894 <HAL_GetTick>
 8001554:	0003      	movs	r3, r0
 8001556:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001558:	e009      	b.n	800156e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800155a:	f7ff f99b 	bl	8000894 <HAL_GetTick>
 800155e:	0002      	movs	r2, r0
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	4a6a      	ldr	r2, [pc, #424]	; (8001710 <HAL_RCC_ClockConfig+0x1f4>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d901      	bls.n	800156e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e0ca      	b.n	8001704 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800156e:	4b67      	ldr	r3, [pc, #412]	; (800170c <HAL_RCC_ClockConfig+0x1f0>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2207      	movs	r2, #7
 8001574:	4013      	ands	r3, r2
 8001576:	683a      	ldr	r2, [r7, #0]
 8001578:	429a      	cmp	r2, r3
 800157a:	d1ee      	bne.n	800155a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2202      	movs	r2, #2
 8001582:	4013      	ands	r3, r2
 8001584:	d015      	beq.n	80015b2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2204      	movs	r2, #4
 800158c:	4013      	ands	r3, r2
 800158e:	d006      	beq.n	800159e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001590:	4b60      	ldr	r3, [pc, #384]	; (8001714 <HAL_RCC_ClockConfig+0x1f8>)
 8001592:	689a      	ldr	r2, [r3, #8]
 8001594:	4b5f      	ldr	r3, [pc, #380]	; (8001714 <HAL_RCC_ClockConfig+0x1f8>)
 8001596:	21e0      	movs	r1, #224	; 0xe0
 8001598:	01c9      	lsls	r1, r1, #7
 800159a:	430a      	orrs	r2, r1
 800159c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800159e:	4b5d      	ldr	r3, [pc, #372]	; (8001714 <HAL_RCC_ClockConfig+0x1f8>)
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	4a5d      	ldr	r2, [pc, #372]	; (8001718 <HAL_RCC_ClockConfig+0x1fc>)
 80015a4:	4013      	ands	r3, r2
 80015a6:	0019      	movs	r1, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	689a      	ldr	r2, [r3, #8]
 80015ac:	4b59      	ldr	r3, [pc, #356]	; (8001714 <HAL_RCC_ClockConfig+0x1f8>)
 80015ae:	430a      	orrs	r2, r1
 80015b0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2201      	movs	r2, #1
 80015b8:	4013      	ands	r3, r2
 80015ba:	d057      	beq.n	800166c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d107      	bne.n	80015d4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015c4:	4b53      	ldr	r3, [pc, #332]	; (8001714 <HAL_RCC_ClockConfig+0x1f8>)
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	2380      	movs	r3, #128	; 0x80
 80015ca:	029b      	lsls	r3, r3, #10
 80015cc:	4013      	ands	r3, r2
 80015ce:	d12b      	bne.n	8001628 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e097      	b.n	8001704 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d107      	bne.n	80015ec <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015dc:	4b4d      	ldr	r3, [pc, #308]	; (8001714 <HAL_RCC_ClockConfig+0x1f8>)
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	2380      	movs	r3, #128	; 0x80
 80015e2:	049b      	lsls	r3, r3, #18
 80015e4:	4013      	ands	r3, r2
 80015e6:	d11f      	bne.n	8001628 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e08b      	b.n	8001704 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d107      	bne.n	8001604 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015f4:	4b47      	ldr	r3, [pc, #284]	; (8001714 <HAL_RCC_ClockConfig+0x1f8>)
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	2380      	movs	r3, #128	; 0x80
 80015fa:	00db      	lsls	r3, r3, #3
 80015fc:	4013      	ands	r3, r2
 80015fe:	d113      	bne.n	8001628 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e07f      	b.n	8001704 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	2b03      	cmp	r3, #3
 800160a:	d106      	bne.n	800161a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800160c:	4b41      	ldr	r3, [pc, #260]	; (8001714 <HAL_RCC_ClockConfig+0x1f8>)
 800160e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001610:	2202      	movs	r2, #2
 8001612:	4013      	ands	r3, r2
 8001614:	d108      	bne.n	8001628 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e074      	b.n	8001704 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800161a:	4b3e      	ldr	r3, [pc, #248]	; (8001714 <HAL_RCC_ClockConfig+0x1f8>)
 800161c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800161e:	2202      	movs	r2, #2
 8001620:	4013      	ands	r3, r2
 8001622:	d101      	bne.n	8001628 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e06d      	b.n	8001704 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001628:	4b3a      	ldr	r3, [pc, #232]	; (8001714 <HAL_RCC_ClockConfig+0x1f8>)
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	2207      	movs	r2, #7
 800162e:	4393      	bics	r3, r2
 8001630:	0019      	movs	r1, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	685a      	ldr	r2, [r3, #4]
 8001636:	4b37      	ldr	r3, [pc, #220]	; (8001714 <HAL_RCC_ClockConfig+0x1f8>)
 8001638:	430a      	orrs	r2, r1
 800163a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800163c:	f7ff f92a 	bl	8000894 <HAL_GetTick>
 8001640:	0003      	movs	r3, r0
 8001642:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001644:	e009      	b.n	800165a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001646:	f7ff f925 	bl	8000894 <HAL_GetTick>
 800164a:	0002      	movs	r2, r0
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	4a2f      	ldr	r2, [pc, #188]	; (8001710 <HAL_RCC_ClockConfig+0x1f4>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d901      	bls.n	800165a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e054      	b.n	8001704 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800165a:	4b2e      	ldr	r3, [pc, #184]	; (8001714 <HAL_RCC_ClockConfig+0x1f8>)
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	2238      	movs	r2, #56	; 0x38
 8001660:	401a      	ands	r2, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	00db      	lsls	r3, r3, #3
 8001668:	429a      	cmp	r2, r3
 800166a:	d1ec      	bne.n	8001646 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800166c:	4b27      	ldr	r3, [pc, #156]	; (800170c <HAL_RCC_ClockConfig+0x1f0>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2207      	movs	r2, #7
 8001672:	4013      	ands	r3, r2
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	429a      	cmp	r2, r3
 8001678:	d21e      	bcs.n	80016b8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800167a:	4b24      	ldr	r3, [pc, #144]	; (800170c <HAL_RCC_ClockConfig+0x1f0>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2207      	movs	r2, #7
 8001680:	4393      	bics	r3, r2
 8001682:	0019      	movs	r1, r3
 8001684:	4b21      	ldr	r3, [pc, #132]	; (800170c <HAL_RCC_ClockConfig+0x1f0>)
 8001686:	683a      	ldr	r2, [r7, #0]
 8001688:	430a      	orrs	r2, r1
 800168a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800168c:	f7ff f902 	bl	8000894 <HAL_GetTick>
 8001690:	0003      	movs	r3, r0
 8001692:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001694:	e009      	b.n	80016aa <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001696:	f7ff f8fd 	bl	8000894 <HAL_GetTick>
 800169a:	0002      	movs	r2, r0
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	4a1b      	ldr	r2, [pc, #108]	; (8001710 <HAL_RCC_ClockConfig+0x1f4>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e02c      	b.n	8001704 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80016aa:	4b18      	ldr	r3, [pc, #96]	; (800170c <HAL_RCC_ClockConfig+0x1f0>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2207      	movs	r2, #7
 80016b0:	4013      	ands	r3, r2
 80016b2:	683a      	ldr	r2, [r7, #0]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d1ee      	bne.n	8001696 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2204      	movs	r2, #4
 80016be:	4013      	ands	r3, r2
 80016c0:	d009      	beq.n	80016d6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80016c2:	4b14      	ldr	r3, [pc, #80]	; (8001714 <HAL_RCC_ClockConfig+0x1f8>)
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	4a15      	ldr	r2, [pc, #84]	; (800171c <HAL_RCC_ClockConfig+0x200>)
 80016c8:	4013      	ands	r3, r2
 80016ca:	0019      	movs	r1, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	68da      	ldr	r2, [r3, #12]
 80016d0:	4b10      	ldr	r3, [pc, #64]	; (8001714 <HAL_RCC_ClockConfig+0x1f8>)
 80016d2:	430a      	orrs	r2, r1
 80016d4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80016d6:	f000 f829 	bl	800172c <HAL_RCC_GetSysClockFreq>
 80016da:	0001      	movs	r1, r0
 80016dc:	4b0d      	ldr	r3, [pc, #52]	; (8001714 <HAL_RCC_ClockConfig+0x1f8>)
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	0a1b      	lsrs	r3, r3, #8
 80016e2:	220f      	movs	r2, #15
 80016e4:	401a      	ands	r2, r3
 80016e6:	4b0e      	ldr	r3, [pc, #56]	; (8001720 <HAL_RCC_ClockConfig+0x204>)
 80016e8:	0092      	lsls	r2, r2, #2
 80016ea:	58d3      	ldr	r3, [r2, r3]
 80016ec:	221f      	movs	r2, #31
 80016ee:	4013      	ands	r3, r2
 80016f0:	000a      	movs	r2, r1
 80016f2:	40da      	lsrs	r2, r3
 80016f4:	4b0b      	ldr	r3, [pc, #44]	; (8001724 <HAL_RCC_ClockConfig+0x208>)
 80016f6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80016f8:	4b0b      	ldr	r3, [pc, #44]	; (8001728 <HAL_RCC_ClockConfig+0x20c>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	0018      	movs	r0, r3
 80016fe:	f7ff f86d 	bl	80007dc <HAL_InitTick>
 8001702:	0003      	movs	r3, r0
}
 8001704:	0018      	movs	r0, r3
 8001706:	46bd      	mov	sp, r7
 8001708:	b004      	add	sp, #16
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40022000 	.word	0x40022000
 8001710:	00001388 	.word	0x00001388
 8001714:	40021000 	.word	0x40021000
 8001718:	fffff0ff 	.word	0xfffff0ff
 800171c:	ffff8fff 	.word	0xffff8fff
 8001720:	08002938 	.word	0x08002938
 8001724:	20000000 	.word	0x20000000
 8001728:	20000004 	.word	0x20000004

0800172c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b086      	sub	sp, #24
 8001730:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001732:	4b3c      	ldr	r3, [pc, #240]	; (8001824 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	2238      	movs	r2, #56	; 0x38
 8001738:	4013      	ands	r3, r2
 800173a:	d10f      	bne.n	800175c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800173c:	4b39      	ldr	r3, [pc, #228]	; (8001824 <HAL_RCC_GetSysClockFreq+0xf8>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	0adb      	lsrs	r3, r3, #11
 8001742:	2207      	movs	r2, #7
 8001744:	4013      	ands	r3, r2
 8001746:	2201      	movs	r2, #1
 8001748:	409a      	lsls	r2, r3
 800174a:	0013      	movs	r3, r2
 800174c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800174e:	6839      	ldr	r1, [r7, #0]
 8001750:	4835      	ldr	r0, [pc, #212]	; (8001828 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001752:	f7fe fcd7 	bl	8000104 <__udivsi3>
 8001756:	0003      	movs	r3, r0
 8001758:	613b      	str	r3, [r7, #16]
 800175a:	e05d      	b.n	8001818 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800175c:	4b31      	ldr	r3, [pc, #196]	; (8001824 <HAL_RCC_GetSysClockFreq+0xf8>)
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	2238      	movs	r2, #56	; 0x38
 8001762:	4013      	ands	r3, r2
 8001764:	2b08      	cmp	r3, #8
 8001766:	d102      	bne.n	800176e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001768:	4b30      	ldr	r3, [pc, #192]	; (800182c <HAL_RCC_GetSysClockFreq+0x100>)
 800176a:	613b      	str	r3, [r7, #16]
 800176c:	e054      	b.n	8001818 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800176e:	4b2d      	ldr	r3, [pc, #180]	; (8001824 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	2238      	movs	r2, #56	; 0x38
 8001774:	4013      	ands	r3, r2
 8001776:	2b10      	cmp	r3, #16
 8001778:	d138      	bne.n	80017ec <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800177a:	4b2a      	ldr	r3, [pc, #168]	; (8001824 <HAL_RCC_GetSysClockFreq+0xf8>)
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	2203      	movs	r2, #3
 8001780:	4013      	ands	r3, r2
 8001782:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001784:	4b27      	ldr	r3, [pc, #156]	; (8001824 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	091b      	lsrs	r3, r3, #4
 800178a:	2207      	movs	r2, #7
 800178c:	4013      	ands	r3, r2
 800178e:	3301      	adds	r3, #1
 8001790:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	2b03      	cmp	r3, #3
 8001796:	d10d      	bne.n	80017b4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001798:	68b9      	ldr	r1, [r7, #8]
 800179a:	4824      	ldr	r0, [pc, #144]	; (800182c <HAL_RCC_GetSysClockFreq+0x100>)
 800179c:	f7fe fcb2 	bl	8000104 <__udivsi3>
 80017a0:	0003      	movs	r3, r0
 80017a2:	0019      	movs	r1, r3
 80017a4:	4b1f      	ldr	r3, [pc, #124]	; (8001824 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	0a1b      	lsrs	r3, r3, #8
 80017aa:	227f      	movs	r2, #127	; 0x7f
 80017ac:	4013      	ands	r3, r2
 80017ae:	434b      	muls	r3, r1
 80017b0:	617b      	str	r3, [r7, #20]
        break;
 80017b2:	e00d      	b.n	80017d0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80017b4:	68b9      	ldr	r1, [r7, #8]
 80017b6:	481c      	ldr	r0, [pc, #112]	; (8001828 <HAL_RCC_GetSysClockFreq+0xfc>)
 80017b8:	f7fe fca4 	bl	8000104 <__udivsi3>
 80017bc:	0003      	movs	r3, r0
 80017be:	0019      	movs	r1, r3
 80017c0:	4b18      	ldr	r3, [pc, #96]	; (8001824 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	0a1b      	lsrs	r3, r3, #8
 80017c6:	227f      	movs	r2, #127	; 0x7f
 80017c8:	4013      	ands	r3, r2
 80017ca:	434b      	muls	r3, r1
 80017cc:	617b      	str	r3, [r7, #20]
        break;
 80017ce:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80017d0:	4b14      	ldr	r3, [pc, #80]	; (8001824 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	0f5b      	lsrs	r3, r3, #29
 80017d6:	2207      	movs	r2, #7
 80017d8:	4013      	ands	r3, r2
 80017da:	3301      	adds	r3, #1
 80017dc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80017de:	6879      	ldr	r1, [r7, #4]
 80017e0:	6978      	ldr	r0, [r7, #20]
 80017e2:	f7fe fc8f 	bl	8000104 <__udivsi3>
 80017e6:	0003      	movs	r3, r0
 80017e8:	613b      	str	r3, [r7, #16]
 80017ea:	e015      	b.n	8001818 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80017ec:	4b0d      	ldr	r3, [pc, #52]	; (8001824 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	2238      	movs	r2, #56	; 0x38
 80017f2:	4013      	ands	r3, r2
 80017f4:	2b20      	cmp	r3, #32
 80017f6:	d103      	bne.n	8001800 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80017f8:	2380      	movs	r3, #128	; 0x80
 80017fa:	021b      	lsls	r3, r3, #8
 80017fc:	613b      	str	r3, [r7, #16]
 80017fe:	e00b      	b.n	8001818 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001800:	4b08      	ldr	r3, [pc, #32]	; (8001824 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	2238      	movs	r2, #56	; 0x38
 8001806:	4013      	ands	r3, r2
 8001808:	2b18      	cmp	r3, #24
 800180a:	d103      	bne.n	8001814 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800180c:	23fa      	movs	r3, #250	; 0xfa
 800180e:	01db      	lsls	r3, r3, #7
 8001810:	613b      	str	r3, [r7, #16]
 8001812:	e001      	b.n	8001818 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001814:	2300      	movs	r3, #0
 8001816:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001818:	693b      	ldr	r3, [r7, #16]
}
 800181a:	0018      	movs	r0, r3
 800181c:	46bd      	mov	sp, r7
 800181e:	b006      	add	sp, #24
 8001820:	bd80      	pop	{r7, pc}
 8001822:	46c0      	nop			; (mov r8, r8)
 8001824:	40021000 	.word	0x40021000
 8001828:	00f42400 	.word	0x00f42400
 800182c:	007a1200 	.word	0x007a1200

08001830 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d101      	bne.n	8001842 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e04a      	b.n	80018d8 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	223d      	movs	r2, #61	; 0x3d
 8001846:	5c9b      	ldrb	r3, [r3, r2]
 8001848:	b2db      	uxtb	r3, r3
 800184a:	2b00      	cmp	r3, #0
 800184c:	d107      	bne.n	800185e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	223c      	movs	r2, #60	; 0x3c
 8001852:	2100      	movs	r1, #0
 8001854:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	0018      	movs	r0, r3
 800185a:	f7fe fee1 	bl	8000620 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	223d      	movs	r2, #61	; 0x3d
 8001862:	2102      	movs	r1, #2
 8001864:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	3304      	adds	r3, #4
 800186e:	0019      	movs	r1, r3
 8001870:	0010      	movs	r0, r2
 8001872:	f000 fbb1 	bl	8001fd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2248      	movs	r2, #72	; 0x48
 800187a:	2101      	movs	r1, #1
 800187c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	223e      	movs	r2, #62	; 0x3e
 8001882:	2101      	movs	r1, #1
 8001884:	5499      	strb	r1, [r3, r2]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	223f      	movs	r2, #63	; 0x3f
 800188a:	2101      	movs	r1, #1
 800188c:	5499      	strb	r1, [r3, r2]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2240      	movs	r2, #64	; 0x40
 8001892:	2101      	movs	r1, #1
 8001894:	5499      	strb	r1, [r3, r2]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2241      	movs	r2, #65	; 0x41
 800189a:	2101      	movs	r1, #1
 800189c:	5499      	strb	r1, [r3, r2]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2242      	movs	r2, #66	; 0x42
 80018a2:	2101      	movs	r1, #1
 80018a4:	5499      	strb	r1, [r3, r2]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2243      	movs	r2, #67	; 0x43
 80018aa:	2101      	movs	r1, #1
 80018ac:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2244      	movs	r2, #68	; 0x44
 80018b2:	2101      	movs	r1, #1
 80018b4:	5499      	strb	r1, [r3, r2]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2245      	movs	r2, #69	; 0x45
 80018ba:	2101      	movs	r1, #1
 80018bc:	5499      	strb	r1, [r3, r2]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2246      	movs	r2, #70	; 0x46
 80018c2:	2101      	movs	r1, #1
 80018c4:	5499      	strb	r1, [r3, r2]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2247      	movs	r2, #71	; 0x47
 80018ca:	2101      	movs	r1, #1
 80018cc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	223d      	movs	r2, #61	; 0x3d
 80018d2:	2101      	movs	r1, #1
 80018d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80018d6:	2300      	movs	r3, #0
}
 80018d8:	0018      	movs	r0, r3
 80018da:	46bd      	mov	sp, r7
 80018dc:	b002      	add	sp, #8
 80018de:	bd80      	pop	{r7, pc}

080018e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d101      	bne.n	80018f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e04a      	b.n	8001988 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	223d      	movs	r2, #61	; 0x3d
 80018f6:	5c9b      	ldrb	r3, [r3, r2]
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d107      	bne.n	800190e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	223c      	movs	r2, #60	; 0x3c
 8001902:	2100      	movs	r1, #0
 8001904:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	0018      	movs	r0, r3
 800190a:	f000 f841 	bl	8001990 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	223d      	movs	r2, #61	; 0x3d
 8001912:	2102      	movs	r1, #2
 8001914:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	3304      	adds	r3, #4
 800191e:	0019      	movs	r1, r3
 8001920:	0010      	movs	r0, r2
 8001922:	f000 fb59 	bl	8001fd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2248      	movs	r2, #72	; 0x48
 800192a:	2101      	movs	r1, #1
 800192c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	223e      	movs	r2, #62	; 0x3e
 8001932:	2101      	movs	r1, #1
 8001934:	5499      	strb	r1, [r3, r2]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	223f      	movs	r2, #63	; 0x3f
 800193a:	2101      	movs	r1, #1
 800193c:	5499      	strb	r1, [r3, r2]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2240      	movs	r2, #64	; 0x40
 8001942:	2101      	movs	r1, #1
 8001944:	5499      	strb	r1, [r3, r2]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2241      	movs	r2, #65	; 0x41
 800194a:	2101      	movs	r1, #1
 800194c:	5499      	strb	r1, [r3, r2]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2242      	movs	r2, #66	; 0x42
 8001952:	2101      	movs	r1, #1
 8001954:	5499      	strb	r1, [r3, r2]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2243      	movs	r2, #67	; 0x43
 800195a:	2101      	movs	r1, #1
 800195c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2244      	movs	r2, #68	; 0x44
 8001962:	2101      	movs	r1, #1
 8001964:	5499      	strb	r1, [r3, r2]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2245      	movs	r2, #69	; 0x45
 800196a:	2101      	movs	r1, #1
 800196c:	5499      	strb	r1, [r3, r2]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2246      	movs	r2, #70	; 0x46
 8001972:	2101      	movs	r1, #1
 8001974:	5499      	strb	r1, [r3, r2]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2247      	movs	r2, #71	; 0x47
 800197a:	2101      	movs	r1, #1
 800197c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	223d      	movs	r2, #61	; 0x3d
 8001982:	2101      	movs	r1, #1
 8001984:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001986:	2300      	movs	r3, #0
}
 8001988:	0018      	movs	r0, r3
 800198a:	46bd      	mov	sp, r7
 800198c:	b002      	add	sp, #8
 800198e:	bd80      	pop	{r7, pc}

08001990 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001998:	46c0      	nop			; (mov r8, r8)
 800199a:	46bd      	mov	sp, r7
 800199c:	b002      	add	sp, #8
 800199e:	bd80      	pop	{r7, pc}

080019a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	691b      	ldr	r3, [r3, #16]
 80019ae:	2202      	movs	r2, #2
 80019b0:	4013      	ands	r3, r2
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d124      	bne.n	8001a00 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	2202      	movs	r2, #2
 80019be:	4013      	ands	r3, r2
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d11d      	bne.n	8001a00 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2203      	movs	r2, #3
 80019ca:	4252      	negs	r2, r2
 80019cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2201      	movs	r2, #1
 80019d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	699b      	ldr	r3, [r3, #24]
 80019da:	2203      	movs	r2, #3
 80019dc:	4013      	ands	r3, r2
 80019de:	d004      	beq.n	80019ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	0018      	movs	r0, r3
 80019e4:	f000 fae0 	bl	8001fa8 <HAL_TIM_IC_CaptureCallback>
 80019e8:	e007      	b.n	80019fa <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	0018      	movs	r0, r3
 80019ee:	f000 fad3 	bl	8001f98 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	0018      	movs	r0, r3
 80019f6:	f000 fadf 	bl	8001fb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2200      	movs	r2, #0
 80019fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	691b      	ldr	r3, [r3, #16]
 8001a06:	2204      	movs	r2, #4
 8001a08:	4013      	ands	r3, r2
 8001a0a:	2b04      	cmp	r3, #4
 8001a0c:	d125      	bne.n	8001a5a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	2204      	movs	r2, #4
 8001a16:	4013      	ands	r3, r2
 8001a18:	2b04      	cmp	r3, #4
 8001a1a:	d11e      	bne.n	8001a5a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2205      	movs	r2, #5
 8001a22:	4252      	negs	r2, r2
 8001a24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2202      	movs	r2, #2
 8001a2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	699a      	ldr	r2, [r3, #24]
 8001a32:	23c0      	movs	r3, #192	; 0xc0
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	4013      	ands	r3, r2
 8001a38:	d004      	beq.n	8001a44 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	0018      	movs	r0, r3
 8001a3e:	f000 fab3 	bl	8001fa8 <HAL_TIM_IC_CaptureCallback>
 8001a42:	e007      	b.n	8001a54 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	0018      	movs	r0, r3
 8001a48:	f000 faa6 	bl	8001f98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	0018      	movs	r0, r3
 8001a50:	f000 fab2 	bl	8001fb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	691b      	ldr	r3, [r3, #16]
 8001a60:	2208      	movs	r2, #8
 8001a62:	4013      	ands	r3, r2
 8001a64:	2b08      	cmp	r3, #8
 8001a66:	d124      	bne.n	8001ab2 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	2208      	movs	r2, #8
 8001a70:	4013      	ands	r3, r2
 8001a72:	2b08      	cmp	r3, #8
 8001a74:	d11d      	bne.n	8001ab2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2209      	movs	r2, #9
 8001a7c:	4252      	negs	r2, r2
 8001a7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2204      	movs	r2, #4
 8001a84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	69db      	ldr	r3, [r3, #28]
 8001a8c:	2203      	movs	r2, #3
 8001a8e:	4013      	ands	r3, r2
 8001a90:	d004      	beq.n	8001a9c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	0018      	movs	r0, r3
 8001a96:	f000 fa87 	bl	8001fa8 <HAL_TIM_IC_CaptureCallback>
 8001a9a:	e007      	b.n	8001aac <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	0018      	movs	r0, r3
 8001aa0:	f000 fa7a 	bl	8001f98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	0018      	movs	r0, r3
 8001aa8:	f000 fa86 	bl	8001fb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	691b      	ldr	r3, [r3, #16]
 8001ab8:	2210      	movs	r2, #16
 8001aba:	4013      	ands	r3, r2
 8001abc:	2b10      	cmp	r3, #16
 8001abe:	d125      	bne.n	8001b0c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	2210      	movs	r2, #16
 8001ac8:	4013      	ands	r3, r2
 8001aca:	2b10      	cmp	r3, #16
 8001acc:	d11e      	bne.n	8001b0c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2211      	movs	r2, #17
 8001ad4:	4252      	negs	r2, r2
 8001ad6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2208      	movs	r2, #8
 8001adc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	69da      	ldr	r2, [r3, #28]
 8001ae4:	23c0      	movs	r3, #192	; 0xc0
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	4013      	ands	r3, r2
 8001aea:	d004      	beq.n	8001af6 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	0018      	movs	r0, r3
 8001af0:	f000 fa5a 	bl	8001fa8 <HAL_TIM_IC_CaptureCallback>
 8001af4:	e007      	b.n	8001b06 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	0018      	movs	r0, r3
 8001afa:	f000 fa4d 	bl	8001f98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	0018      	movs	r0, r3
 8001b02:	f000 fa59 	bl	8001fb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	691b      	ldr	r3, [r3, #16]
 8001b12:	2201      	movs	r2, #1
 8001b14:	4013      	ands	r3, r2
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d10f      	bne.n	8001b3a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	2201      	movs	r2, #1
 8001b22:	4013      	ands	r3, r2
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d108      	bne.n	8001b3a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2202      	movs	r2, #2
 8001b2e:	4252      	negs	r2, r2
 8001b30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	0018      	movs	r0, r3
 8001b36:	f000 fa27 	bl	8001f88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	691b      	ldr	r3, [r3, #16]
 8001b40:	2280      	movs	r2, #128	; 0x80
 8001b42:	4013      	ands	r3, r2
 8001b44:	2b80      	cmp	r3, #128	; 0x80
 8001b46:	d10f      	bne.n	8001b68 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	2280      	movs	r2, #128	; 0x80
 8001b50:	4013      	ands	r3, r2
 8001b52:	2b80      	cmp	r3, #128	; 0x80
 8001b54:	d108      	bne.n	8001b68 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2281      	movs	r2, #129	; 0x81
 8001b5c:	4252      	negs	r2, r2
 8001b5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	0018      	movs	r0, r3
 8001b64:	f000 fea0 	bl	80028a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	691a      	ldr	r2, [r3, #16]
 8001b6e:	2380      	movs	r3, #128	; 0x80
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	401a      	ands	r2, r3
 8001b74:	2380      	movs	r3, #128	; 0x80
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d10e      	bne.n	8001b9a <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	2280      	movs	r2, #128	; 0x80
 8001b84:	4013      	ands	r3, r2
 8001b86:	2b80      	cmp	r3, #128	; 0x80
 8001b88:	d107      	bne.n	8001b9a <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a1c      	ldr	r2, [pc, #112]	; (8001c00 <HAL_TIM_IRQHandler+0x260>)
 8001b90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	0018      	movs	r0, r3
 8001b96:	f000 fe8f 	bl	80028b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	691b      	ldr	r3, [r3, #16]
 8001ba0:	2240      	movs	r2, #64	; 0x40
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	2b40      	cmp	r3, #64	; 0x40
 8001ba6:	d10f      	bne.n	8001bc8 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	2240      	movs	r2, #64	; 0x40
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	2b40      	cmp	r3, #64	; 0x40
 8001bb4:	d108      	bne.n	8001bc8 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2241      	movs	r2, #65	; 0x41
 8001bbc:	4252      	negs	r2, r2
 8001bbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	0018      	movs	r0, r3
 8001bc4:	f000 fa00 	bl	8001fc8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	691b      	ldr	r3, [r3, #16]
 8001bce:	2220      	movs	r2, #32
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	2b20      	cmp	r3, #32
 8001bd4:	d10f      	bne.n	8001bf6 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	2220      	movs	r2, #32
 8001bde:	4013      	ands	r3, r2
 8001be0:	2b20      	cmp	r3, #32
 8001be2:	d108      	bne.n	8001bf6 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2221      	movs	r2, #33	; 0x21
 8001bea:	4252      	negs	r2, r2
 8001bec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	0018      	movs	r0, r3
 8001bf2:	f000 fe51 	bl	8002898 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001bf6:	46c0      	nop			; (mov r8, r8)
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	b002      	add	sp, #8
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	46c0      	nop			; (mov r8, r8)
 8001c00:	fffffeff 	.word	0xfffffeff

08001c04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	223c      	movs	r2, #60	; 0x3c
 8001c14:	5c9b      	ldrb	r3, [r3, r2]
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d101      	bne.n	8001c1e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	e0df      	b.n	8001dde <HAL_TIM_PWM_ConfigChannel+0x1da>
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	223c      	movs	r2, #60	; 0x3c
 8001c22:	2101      	movs	r1, #1
 8001c24:	5499      	strb	r1, [r3, r2]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2b14      	cmp	r3, #20
 8001c2a:	d900      	bls.n	8001c2e <HAL_TIM_PWM_ConfigChannel+0x2a>
 8001c2c:	e0d1      	b.n	8001dd2 <HAL_TIM_PWM_ConfigChannel+0x1ce>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	009a      	lsls	r2, r3, #2
 8001c32:	4b6d      	ldr	r3, [pc, #436]	; (8001de8 <HAL_TIM_PWM_ConfigChannel+0x1e4>)
 8001c34:	18d3      	adds	r3, r2, r3
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	68ba      	ldr	r2, [r7, #8]
 8001c40:	0011      	movs	r1, r2
 8001c42:	0018      	movs	r0, r3
 8001c44:	f000 fa52 	bl	80020ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	699a      	ldr	r2, [r3, #24]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2108      	movs	r1, #8
 8001c54:	430a      	orrs	r2, r1
 8001c56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	699a      	ldr	r2, [r3, #24]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2104      	movs	r1, #4
 8001c64:	438a      	bics	r2, r1
 8001c66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6999      	ldr	r1, [r3, #24]
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	691a      	ldr	r2, [r3, #16]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	430a      	orrs	r2, r1
 8001c78:	619a      	str	r2, [r3, #24]
      break;
 8001c7a:	e0ab      	b.n	8001dd4 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	68ba      	ldr	r2, [r7, #8]
 8001c82:	0011      	movs	r1, r2
 8001c84:	0018      	movs	r0, r3
 8001c86:	f000 fabb 	bl	8002200 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	699a      	ldr	r2, [r3, #24]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2180      	movs	r1, #128	; 0x80
 8001c96:	0109      	lsls	r1, r1, #4
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	699a      	ldr	r2, [r3, #24]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4951      	ldr	r1, [pc, #324]	; (8001dec <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8001ca8:	400a      	ands	r2, r1
 8001caa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	6999      	ldr	r1, [r3, #24]
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	691b      	ldr	r3, [r3, #16]
 8001cb6:	021a      	lsls	r2, r3, #8
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	430a      	orrs	r2, r1
 8001cbe:	619a      	str	r2, [r3, #24]
      break;
 8001cc0:	e088      	b.n	8001dd4 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	68ba      	ldr	r2, [r7, #8]
 8001cc8:	0011      	movs	r1, r2
 8001cca:	0018      	movs	r0, r3
 8001ccc:	f000 fb1c 	bl	8002308 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	69da      	ldr	r2, [r3, #28]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2108      	movs	r1, #8
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	69da      	ldr	r2, [r3, #28]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2104      	movs	r1, #4
 8001cec:	438a      	bics	r2, r1
 8001cee:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	69d9      	ldr	r1, [r3, #28]
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	691a      	ldr	r2, [r3, #16]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	430a      	orrs	r2, r1
 8001d00:	61da      	str	r2, [r3, #28]
      break;
 8001d02:	e067      	b.n	8001dd4 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	68ba      	ldr	r2, [r7, #8]
 8001d0a:	0011      	movs	r1, r2
 8001d0c:	0018      	movs	r0, r3
 8001d0e:	f000 fb83 	bl	8002418 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	69da      	ldr	r2, [r3, #28]
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2180      	movs	r1, #128	; 0x80
 8001d1e:	0109      	lsls	r1, r1, #4
 8001d20:	430a      	orrs	r2, r1
 8001d22:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	69da      	ldr	r2, [r3, #28]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	492f      	ldr	r1, [pc, #188]	; (8001dec <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8001d30:	400a      	ands	r2, r1
 8001d32:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	69d9      	ldr	r1, [r3, #28]
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	021a      	lsls	r2, r3, #8
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	430a      	orrs	r2, r1
 8001d46:	61da      	str	r2, [r3, #28]
      break;
 8001d48:	e044      	b.n	8001dd4 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	68ba      	ldr	r2, [r7, #8]
 8001d50:	0011      	movs	r1, r2
 8001d52:	0018      	movs	r0, r3
 8001d54:	f000 fbca 	bl	80024ec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2108      	movs	r1, #8
 8001d64:	430a      	orrs	r2, r1
 8001d66:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2104      	movs	r1, #4
 8001d74:	438a      	bics	r2, r1
 8001d76:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	691a      	ldr	r2, [r3, #16]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	430a      	orrs	r2, r1
 8001d88:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8001d8a:	e023      	b.n	8001dd4 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	68ba      	ldr	r2, [r7, #8]
 8001d92:	0011      	movs	r1, r2
 8001d94:	0018      	movs	r0, r3
 8001d96:	f000 fc09 	bl	80025ac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2180      	movs	r1, #128	; 0x80
 8001da6:	0109      	lsls	r1, r1, #4
 8001da8:	430a      	orrs	r2, r1
 8001daa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	490d      	ldr	r1, [pc, #52]	; (8001dec <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8001db8:	400a      	ands	r2, r1
 8001dba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	021a      	lsls	r2, r3, #8
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8001dd0:	e000      	b.n	8001dd4 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    }

    default:
      break;
 8001dd2:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	223c      	movs	r2, #60	; 0x3c
 8001dd8:	2100      	movs	r1, #0
 8001dda:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	0018      	movs	r0, r3
 8001de0:	46bd      	mov	sp, r7
 8001de2:	b004      	add	sp, #16
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	46c0      	nop			; (mov r8, r8)
 8001de8:	08002978 	.word	0x08002978
 8001dec:	fffffbff 	.word	0xfffffbff

08001df0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	223c      	movs	r2, #60	; 0x3c
 8001dfe:	5c9b      	ldrb	r3, [r3, r2]
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d101      	bne.n	8001e08 <HAL_TIM_ConfigClockSource+0x18>
 8001e04:	2302      	movs	r3, #2
 8001e06:	e0b7      	b.n	8001f78 <HAL_TIM_ConfigClockSource+0x188>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	223c      	movs	r2, #60	; 0x3c
 8001e0c:	2101      	movs	r1, #1
 8001e0e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	223d      	movs	r2, #61	; 0x3d
 8001e14:	2102      	movs	r1, #2
 8001e16:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	4a57      	ldr	r2, [pc, #348]	; (8001f80 <HAL_TIM_ConfigClockSource+0x190>)
 8001e24:	4013      	ands	r3, r2
 8001e26:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	4a56      	ldr	r2, [pc, #344]	; (8001f84 <HAL_TIM_ConfigClockSource+0x194>)
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	68fa      	ldr	r2, [r7, #12]
 8001e36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2280      	movs	r2, #128	; 0x80
 8001e3e:	0192      	lsls	r2, r2, #6
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d040      	beq.n	8001ec6 <HAL_TIM_ConfigClockSource+0xd6>
 8001e44:	2280      	movs	r2, #128	; 0x80
 8001e46:	0192      	lsls	r2, r2, #6
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d900      	bls.n	8001e4e <HAL_TIM_ConfigClockSource+0x5e>
 8001e4c:	e088      	b.n	8001f60 <HAL_TIM_ConfigClockSource+0x170>
 8001e4e:	2280      	movs	r2, #128	; 0x80
 8001e50:	0152      	lsls	r2, r2, #5
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d100      	bne.n	8001e58 <HAL_TIM_ConfigClockSource+0x68>
 8001e56:	e085      	b.n	8001f64 <HAL_TIM_ConfigClockSource+0x174>
 8001e58:	2280      	movs	r2, #128	; 0x80
 8001e5a:	0152      	lsls	r2, r2, #5
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d900      	bls.n	8001e62 <HAL_TIM_ConfigClockSource+0x72>
 8001e60:	e07e      	b.n	8001f60 <HAL_TIM_ConfigClockSource+0x170>
 8001e62:	2b70      	cmp	r3, #112	; 0x70
 8001e64:	d018      	beq.n	8001e98 <HAL_TIM_ConfigClockSource+0xa8>
 8001e66:	d900      	bls.n	8001e6a <HAL_TIM_ConfigClockSource+0x7a>
 8001e68:	e07a      	b.n	8001f60 <HAL_TIM_ConfigClockSource+0x170>
 8001e6a:	2b60      	cmp	r3, #96	; 0x60
 8001e6c:	d04f      	beq.n	8001f0e <HAL_TIM_ConfigClockSource+0x11e>
 8001e6e:	d900      	bls.n	8001e72 <HAL_TIM_ConfigClockSource+0x82>
 8001e70:	e076      	b.n	8001f60 <HAL_TIM_ConfigClockSource+0x170>
 8001e72:	2b50      	cmp	r3, #80	; 0x50
 8001e74:	d03b      	beq.n	8001eee <HAL_TIM_ConfigClockSource+0xfe>
 8001e76:	d900      	bls.n	8001e7a <HAL_TIM_ConfigClockSource+0x8a>
 8001e78:	e072      	b.n	8001f60 <HAL_TIM_ConfigClockSource+0x170>
 8001e7a:	2b40      	cmp	r3, #64	; 0x40
 8001e7c:	d057      	beq.n	8001f2e <HAL_TIM_ConfigClockSource+0x13e>
 8001e7e:	d900      	bls.n	8001e82 <HAL_TIM_ConfigClockSource+0x92>
 8001e80:	e06e      	b.n	8001f60 <HAL_TIM_ConfigClockSource+0x170>
 8001e82:	2b30      	cmp	r3, #48	; 0x30
 8001e84:	d063      	beq.n	8001f4e <HAL_TIM_ConfigClockSource+0x15e>
 8001e86:	d86b      	bhi.n	8001f60 <HAL_TIM_ConfigClockSource+0x170>
 8001e88:	2b20      	cmp	r3, #32
 8001e8a:	d060      	beq.n	8001f4e <HAL_TIM_ConfigClockSource+0x15e>
 8001e8c:	d868      	bhi.n	8001f60 <HAL_TIM_ConfigClockSource+0x170>
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d05d      	beq.n	8001f4e <HAL_TIM_ConfigClockSource+0x15e>
 8001e92:	2b10      	cmp	r3, #16
 8001e94:	d05b      	beq.n	8001f4e <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001e96:	e063      	b.n	8001f60 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6818      	ldr	r0, [r3, #0]
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	6899      	ldr	r1, [r3, #8]
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685a      	ldr	r2, [r3, #4]
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	f000 fc60 	bl	800276c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2277      	movs	r2, #119	; 0x77
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	68fa      	ldr	r2, [r7, #12]
 8001ec2:	609a      	str	r2, [r3, #8]
      break;
 8001ec4:	e04f      	b.n	8001f66 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6818      	ldr	r0, [r3, #0]
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	6899      	ldr	r1, [r3, #8]
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685a      	ldr	r2, [r3, #4]
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	f000 fc49 	bl	800276c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	689a      	ldr	r2, [r3, #8]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2180      	movs	r1, #128	; 0x80
 8001ee6:	01c9      	lsls	r1, r1, #7
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	609a      	str	r2, [r3, #8]
      break;
 8001eec:	e03b      	b.n	8001f66 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6818      	ldr	r0, [r3, #0]
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	6859      	ldr	r1, [r3, #4]
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	001a      	movs	r2, r3
 8001efc:	f000 fbba 	bl	8002674 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2150      	movs	r1, #80	; 0x50
 8001f06:	0018      	movs	r0, r3
 8001f08:	f000 fc14 	bl	8002734 <TIM_ITRx_SetConfig>
      break;
 8001f0c:	e02b      	b.n	8001f66 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6818      	ldr	r0, [r3, #0]
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	6859      	ldr	r1, [r3, #4]
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	001a      	movs	r2, r3
 8001f1c:	f000 fbd8 	bl	80026d0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2160      	movs	r1, #96	; 0x60
 8001f26:	0018      	movs	r0, r3
 8001f28:	f000 fc04 	bl	8002734 <TIM_ITRx_SetConfig>
      break;
 8001f2c:	e01b      	b.n	8001f66 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6818      	ldr	r0, [r3, #0]
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	6859      	ldr	r1, [r3, #4]
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	001a      	movs	r2, r3
 8001f3c:	f000 fb9a 	bl	8002674 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2140      	movs	r1, #64	; 0x40
 8001f46:	0018      	movs	r0, r3
 8001f48:	f000 fbf4 	bl	8002734 <TIM_ITRx_SetConfig>
      break;
 8001f4c:	e00b      	b.n	8001f66 <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	0019      	movs	r1, r3
 8001f58:	0010      	movs	r0, r2
 8001f5a:	f000 fbeb 	bl	8002734 <TIM_ITRx_SetConfig>
        break;
 8001f5e:	e002      	b.n	8001f66 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8001f60:	46c0      	nop			; (mov r8, r8)
 8001f62:	e000      	b.n	8001f66 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8001f64:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	223d      	movs	r2, #61	; 0x3d
 8001f6a:	2101      	movs	r1, #1
 8001f6c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	223c      	movs	r2, #60	; 0x3c
 8001f72:	2100      	movs	r1, #0
 8001f74:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f76:	2300      	movs	r3, #0
}
 8001f78:	0018      	movs	r0, r3
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	b004      	add	sp, #16
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	ffceff88 	.word	0xffceff88
 8001f84:	ffff00ff 	.word	0xffff00ff

08001f88 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001f90:	46c0      	nop			; (mov r8, r8)
 8001f92:	46bd      	mov	sp, r7
 8001f94:	b002      	add	sp, #8
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fa0:	46c0      	nop			; (mov r8, r8)
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	b002      	add	sp, #8
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fb0:	46c0      	nop			; (mov r8, r8)
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	b002      	add	sp, #8
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fc0:	46c0      	nop			; (mov r8, r8)
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	b002      	add	sp, #8
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fd0:	46c0      	nop			; (mov r8, r8)
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	b002      	add	sp, #8
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a38      	ldr	r2, [pc, #224]	; (80020cc <TIM_Base_SetConfig+0xf4>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d00c      	beq.n	800200a <TIM_Base_SetConfig+0x32>
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	2380      	movs	r3, #128	; 0x80
 8001ff4:	05db      	lsls	r3, r3, #23
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d007      	beq.n	800200a <TIM_Base_SetConfig+0x32>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a34      	ldr	r2, [pc, #208]	; (80020d0 <TIM_Base_SetConfig+0xf8>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d003      	beq.n	800200a <TIM_Base_SetConfig+0x32>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a33      	ldr	r2, [pc, #204]	; (80020d4 <TIM_Base_SetConfig+0xfc>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d108      	bne.n	800201c <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2270      	movs	r2, #112	; 0x70
 800200e:	4393      	bics	r3, r2
 8002010:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	4313      	orrs	r3, r2
 800201a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a2b      	ldr	r2, [pc, #172]	; (80020cc <TIM_Base_SetConfig+0xf4>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d01c      	beq.n	800205e <TIM_Base_SetConfig+0x86>
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	2380      	movs	r3, #128	; 0x80
 8002028:	05db      	lsls	r3, r3, #23
 800202a:	429a      	cmp	r2, r3
 800202c:	d017      	beq.n	800205e <TIM_Base_SetConfig+0x86>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a27      	ldr	r2, [pc, #156]	; (80020d0 <TIM_Base_SetConfig+0xf8>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d013      	beq.n	800205e <TIM_Base_SetConfig+0x86>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a26      	ldr	r2, [pc, #152]	; (80020d4 <TIM_Base_SetConfig+0xfc>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d00f      	beq.n	800205e <TIM_Base_SetConfig+0x86>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a25      	ldr	r2, [pc, #148]	; (80020d8 <TIM_Base_SetConfig+0x100>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d00b      	beq.n	800205e <TIM_Base_SetConfig+0x86>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a24      	ldr	r2, [pc, #144]	; (80020dc <TIM_Base_SetConfig+0x104>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d007      	beq.n	800205e <TIM_Base_SetConfig+0x86>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a23      	ldr	r2, [pc, #140]	; (80020e0 <TIM_Base_SetConfig+0x108>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d003      	beq.n	800205e <TIM_Base_SetConfig+0x86>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a22      	ldr	r2, [pc, #136]	; (80020e4 <TIM_Base_SetConfig+0x10c>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d108      	bne.n	8002070 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	4a21      	ldr	r2, [pc, #132]	; (80020e8 <TIM_Base_SetConfig+0x110>)
 8002062:	4013      	ands	r3, r2
 8002064:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	68db      	ldr	r3, [r3, #12]
 800206a:	68fa      	ldr	r2, [r7, #12]
 800206c:	4313      	orrs	r3, r2
 800206e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2280      	movs	r2, #128	; 0x80
 8002074:	4393      	bics	r3, r2
 8002076:	001a      	movs	r2, r3
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	695b      	ldr	r3, [r3, #20]
 800207c:	4313      	orrs	r3, r2
 800207e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	689a      	ldr	r2, [r3, #8]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a0c      	ldr	r2, [pc, #48]	; (80020cc <TIM_Base_SetConfig+0xf4>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d00b      	beq.n	80020b6 <TIM_Base_SetConfig+0xde>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a0e      	ldr	r2, [pc, #56]	; (80020dc <TIM_Base_SetConfig+0x104>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d007      	beq.n	80020b6 <TIM_Base_SetConfig+0xde>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a0d      	ldr	r2, [pc, #52]	; (80020e0 <TIM_Base_SetConfig+0x108>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d003      	beq.n	80020b6 <TIM_Base_SetConfig+0xde>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a0c      	ldr	r2, [pc, #48]	; (80020e4 <TIM_Base_SetConfig+0x10c>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d103      	bne.n	80020be <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	691a      	ldr	r2, [r3, #16]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2201      	movs	r2, #1
 80020c2:	615a      	str	r2, [r3, #20]
}
 80020c4:	46c0      	nop			; (mov r8, r8)
 80020c6:	46bd      	mov	sp, r7
 80020c8:	b004      	add	sp, #16
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	40012c00 	.word	0x40012c00
 80020d0:	40000400 	.word	0x40000400
 80020d4:	40000800 	.word	0x40000800
 80020d8:	40002000 	.word	0x40002000
 80020dc:	40014000 	.word	0x40014000
 80020e0:	40014400 	.word	0x40014400
 80020e4:	40014800 	.word	0x40014800
 80020e8:	fffffcff 	.word	0xfffffcff

080020ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b086      	sub	sp, #24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a1b      	ldr	r3, [r3, #32]
 80020fa:	2201      	movs	r2, #1
 80020fc:	4393      	bics	r3, r2
 80020fe:	001a      	movs	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a1b      	ldr	r3, [r3, #32]
 8002108:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	699b      	ldr	r3, [r3, #24]
 8002114:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	4a32      	ldr	r2, [pc, #200]	; (80021e4 <TIM_OC1_SetConfig+0xf8>)
 800211a:	4013      	ands	r3, r2
 800211c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2203      	movs	r2, #3
 8002122:	4393      	bics	r3, r2
 8002124:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	68fa      	ldr	r2, [r7, #12]
 800212c:	4313      	orrs	r3, r2
 800212e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	2202      	movs	r2, #2
 8002134:	4393      	bics	r3, r2
 8002136:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	697a      	ldr	r2, [r7, #20]
 800213e:	4313      	orrs	r3, r2
 8002140:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a28      	ldr	r2, [pc, #160]	; (80021e8 <TIM_OC1_SetConfig+0xfc>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d00b      	beq.n	8002162 <TIM_OC1_SetConfig+0x76>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a27      	ldr	r2, [pc, #156]	; (80021ec <TIM_OC1_SetConfig+0x100>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d007      	beq.n	8002162 <TIM_OC1_SetConfig+0x76>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a26      	ldr	r2, [pc, #152]	; (80021f0 <TIM_OC1_SetConfig+0x104>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d003      	beq.n	8002162 <TIM_OC1_SetConfig+0x76>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a25      	ldr	r2, [pc, #148]	; (80021f4 <TIM_OC1_SetConfig+0x108>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d10c      	bne.n	800217c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	2208      	movs	r2, #8
 8002166:	4393      	bics	r3, r2
 8002168:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	697a      	ldr	r2, [r7, #20]
 8002170:	4313      	orrs	r3, r2
 8002172:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	2204      	movs	r2, #4
 8002178:	4393      	bics	r3, r2
 800217a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4a1a      	ldr	r2, [pc, #104]	; (80021e8 <TIM_OC1_SetConfig+0xfc>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d00b      	beq.n	800219c <TIM_OC1_SetConfig+0xb0>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4a19      	ldr	r2, [pc, #100]	; (80021ec <TIM_OC1_SetConfig+0x100>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d007      	beq.n	800219c <TIM_OC1_SetConfig+0xb0>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	4a18      	ldr	r2, [pc, #96]	; (80021f0 <TIM_OC1_SetConfig+0x104>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d003      	beq.n	800219c <TIM_OC1_SetConfig+0xb0>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4a17      	ldr	r2, [pc, #92]	; (80021f4 <TIM_OC1_SetConfig+0x108>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d111      	bne.n	80021c0 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	4a16      	ldr	r2, [pc, #88]	; (80021f8 <TIM_OC1_SetConfig+0x10c>)
 80021a0:	4013      	ands	r3, r2
 80021a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	4a15      	ldr	r2, [pc, #84]	; (80021fc <TIM_OC1_SetConfig+0x110>)
 80021a8:	4013      	ands	r3, r2
 80021aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	695b      	ldr	r3, [r3, #20]
 80021b0:	693a      	ldr	r2, [r7, #16]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	699b      	ldr	r3, [r3, #24]
 80021ba:	693a      	ldr	r2, [r7, #16]
 80021bc:	4313      	orrs	r3, r2
 80021be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	68fa      	ldr	r2, [r7, #12]
 80021ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685a      	ldr	r2, [r3, #4]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	697a      	ldr	r2, [r7, #20]
 80021d8:	621a      	str	r2, [r3, #32]
}
 80021da:	46c0      	nop			; (mov r8, r8)
 80021dc:	46bd      	mov	sp, r7
 80021de:	b006      	add	sp, #24
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	46c0      	nop			; (mov r8, r8)
 80021e4:	fffeff8f 	.word	0xfffeff8f
 80021e8:	40012c00 	.word	0x40012c00
 80021ec:	40014000 	.word	0x40014000
 80021f0:	40014400 	.word	0x40014400
 80021f4:	40014800 	.word	0x40014800
 80021f8:	fffffeff 	.word	0xfffffeff
 80021fc:	fffffdff 	.word	0xfffffdff

08002200 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a1b      	ldr	r3, [r3, #32]
 800220e:	2210      	movs	r2, #16
 8002210:	4393      	bics	r3, r2
 8002212:	001a      	movs	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a1b      	ldr	r3, [r3, #32]
 800221c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	4a2e      	ldr	r2, [pc, #184]	; (80022e8 <TIM_OC2_SetConfig+0xe8>)
 800222e:	4013      	ands	r3, r2
 8002230:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	4a2d      	ldr	r2, [pc, #180]	; (80022ec <TIM_OC2_SetConfig+0xec>)
 8002236:	4013      	ands	r3, r2
 8002238:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	021b      	lsls	r3, r3, #8
 8002240:	68fa      	ldr	r2, [r7, #12]
 8002242:	4313      	orrs	r3, r2
 8002244:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	2220      	movs	r2, #32
 800224a:	4393      	bics	r3, r2
 800224c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	011b      	lsls	r3, r3, #4
 8002254:	697a      	ldr	r2, [r7, #20]
 8002256:	4313      	orrs	r3, r2
 8002258:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a24      	ldr	r2, [pc, #144]	; (80022f0 <TIM_OC2_SetConfig+0xf0>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d10d      	bne.n	800227e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	2280      	movs	r2, #128	; 0x80
 8002266:	4393      	bics	r3, r2
 8002268:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	011b      	lsls	r3, r3, #4
 8002270:	697a      	ldr	r2, [r7, #20]
 8002272:	4313      	orrs	r3, r2
 8002274:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	2240      	movs	r2, #64	; 0x40
 800227a:	4393      	bics	r3, r2
 800227c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a1b      	ldr	r2, [pc, #108]	; (80022f0 <TIM_OC2_SetConfig+0xf0>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d00b      	beq.n	800229e <TIM_OC2_SetConfig+0x9e>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a1a      	ldr	r2, [pc, #104]	; (80022f4 <TIM_OC2_SetConfig+0xf4>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d007      	beq.n	800229e <TIM_OC2_SetConfig+0x9e>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a19      	ldr	r2, [pc, #100]	; (80022f8 <TIM_OC2_SetConfig+0xf8>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d003      	beq.n	800229e <TIM_OC2_SetConfig+0x9e>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a18      	ldr	r2, [pc, #96]	; (80022fc <TIM_OC2_SetConfig+0xfc>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d113      	bne.n	80022c6 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	4a17      	ldr	r2, [pc, #92]	; (8002300 <TIM_OC2_SetConfig+0x100>)
 80022a2:	4013      	ands	r3, r2
 80022a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	4a16      	ldr	r2, [pc, #88]	; (8002304 <TIM_OC2_SetConfig+0x104>)
 80022aa:	4013      	ands	r3, r2
 80022ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	693a      	ldr	r2, [r7, #16]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	693a      	ldr	r2, [r7, #16]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	693a      	ldr	r2, [r7, #16]
 80022ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	68fa      	ldr	r2, [r7, #12]
 80022d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685a      	ldr	r2, [r3, #4]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	697a      	ldr	r2, [r7, #20]
 80022de:	621a      	str	r2, [r3, #32]
}
 80022e0:	46c0      	nop			; (mov r8, r8)
 80022e2:	46bd      	mov	sp, r7
 80022e4:	b006      	add	sp, #24
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	feff8fff 	.word	0xfeff8fff
 80022ec:	fffffcff 	.word	0xfffffcff
 80022f0:	40012c00 	.word	0x40012c00
 80022f4:	40014000 	.word	0x40014000
 80022f8:	40014400 	.word	0x40014400
 80022fc:	40014800 	.word	0x40014800
 8002300:	fffffbff 	.word	0xfffffbff
 8002304:	fffff7ff 	.word	0xfffff7ff

08002308 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a1b      	ldr	r3, [r3, #32]
 8002316:	4a35      	ldr	r2, [pc, #212]	; (80023ec <TIM_OC3_SetConfig+0xe4>)
 8002318:	401a      	ands	r2, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a1b      	ldr	r3, [r3, #32]
 8002322:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	69db      	ldr	r3, [r3, #28]
 800232e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	4a2f      	ldr	r2, [pc, #188]	; (80023f0 <TIM_OC3_SetConfig+0xe8>)
 8002334:	4013      	ands	r3, r2
 8002336:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2203      	movs	r2, #3
 800233c:	4393      	bics	r3, r2
 800233e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	68fa      	ldr	r2, [r7, #12]
 8002346:	4313      	orrs	r3, r2
 8002348:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	4a29      	ldr	r2, [pc, #164]	; (80023f4 <TIM_OC3_SetConfig+0xec>)
 800234e:	4013      	ands	r3, r2
 8002350:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	021b      	lsls	r3, r3, #8
 8002358:	697a      	ldr	r2, [r7, #20]
 800235a:	4313      	orrs	r3, r2
 800235c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a25      	ldr	r2, [pc, #148]	; (80023f8 <TIM_OC3_SetConfig+0xf0>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d10d      	bne.n	8002382 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	4a24      	ldr	r2, [pc, #144]	; (80023fc <TIM_OC3_SetConfig+0xf4>)
 800236a:	4013      	ands	r3, r2
 800236c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	021b      	lsls	r3, r3, #8
 8002374:	697a      	ldr	r2, [r7, #20]
 8002376:	4313      	orrs	r3, r2
 8002378:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	4a20      	ldr	r2, [pc, #128]	; (8002400 <TIM_OC3_SetConfig+0xf8>)
 800237e:	4013      	ands	r3, r2
 8002380:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a1c      	ldr	r2, [pc, #112]	; (80023f8 <TIM_OC3_SetConfig+0xf0>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d00b      	beq.n	80023a2 <TIM_OC3_SetConfig+0x9a>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a1d      	ldr	r2, [pc, #116]	; (8002404 <TIM_OC3_SetConfig+0xfc>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d007      	beq.n	80023a2 <TIM_OC3_SetConfig+0x9a>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a1c      	ldr	r2, [pc, #112]	; (8002408 <TIM_OC3_SetConfig+0x100>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d003      	beq.n	80023a2 <TIM_OC3_SetConfig+0x9a>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a1b      	ldr	r2, [pc, #108]	; (800240c <TIM_OC3_SetConfig+0x104>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d113      	bne.n	80023ca <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	4a1a      	ldr	r2, [pc, #104]	; (8002410 <TIM_OC3_SetConfig+0x108>)
 80023a6:	4013      	ands	r3, r2
 80023a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	4a19      	ldr	r2, [pc, #100]	; (8002414 <TIM_OC3_SetConfig+0x10c>)
 80023ae:	4013      	ands	r3, r2
 80023b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	011b      	lsls	r3, r3, #4
 80023b8:	693a      	ldr	r2, [r7, #16]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	011b      	lsls	r3, r3, #4
 80023c4:	693a      	ldr	r2, [r7, #16]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685a      	ldr	r2, [r3, #4]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	697a      	ldr	r2, [r7, #20]
 80023e2:	621a      	str	r2, [r3, #32]
}
 80023e4:	46c0      	nop			; (mov r8, r8)
 80023e6:	46bd      	mov	sp, r7
 80023e8:	b006      	add	sp, #24
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	fffffeff 	.word	0xfffffeff
 80023f0:	fffeff8f 	.word	0xfffeff8f
 80023f4:	fffffdff 	.word	0xfffffdff
 80023f8:	40012c00 	.word	0x40012c00
 80023fc:	fffff7ff 	.word	0xfffff7ff
 8002400:	fffffbff 	.word	0xfffffbff
 8002404:	40014000 	.word	0x40014000
 8002408:	40014400 	.word	0x40014400
 800240c:	40014800 	.word	0x40014800
 8002410:	ffffefff 	.word	0xffffefff
 8002414:	ffffdfff 	.word	0xffffdfff

08002418 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b086      	sub	sp, #24
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a1b      	ldr	r3, [r3, #32]
 8002426:	4a28      	ldr	r2, [pc, #160]	; (80024c8 <TIM_OC4_SetConfig+0xb0>)
 8002428:	401a      	ands	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a1b      	ldr	r3, [r3, #32]
 8002432:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	69db      	ldr	r3, [r3, #28]
 800243e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	4a22      	ldr	r2, [pc, #136]	; (80024cc <TIM_OC4_SetConfig+0xb4>)
 8002444:	4013      	ands	r3, r2
 8002446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	4a21      	ldr	r2, [pc, #132]	; (80024d0 <TIM_OC4_SetConfig+0xb8>)
 800244c:	4013      	ands	r3, r2
 800244e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	021b      	lsls	r3, r3, #8
 8002456:	68fa      	ldr	r2, [r7, #12]
 8002458:	4313      	orrs	r3, r2
 800245a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	4a1d      	ldr	r2, [pc, #116]	; (80024d4 <TIM_OC4_SetConfig+0xbc>)
 8002460:	4013      	ands	r3, r2
 8002462:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	031b      	lsls	r3, r3, #12
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	4313      	orrs	r3, r2
 800246e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4a19      	ldr	r2, [pc, #100]	; (80024d8 <TIM_OC4_SetConfig+0xc0>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d00b      	beq.n	8002490 <TIM_OC4_SetConfig+0x78>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4a18      	ldr	r2, [pc, #96]	; (80024dc <TIM_OC4_SetConfig+0xc4>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d007      	beq.n	8002490 <TIM_OC4_SetConfig+0x78>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4a17      	ldr	r2, [pc, #92]	; (80024e0 <TIM_OC4_SetConfig+0xc8>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d003      	beq.n	8002490 <TIM_OC4_SetConfig+0x78>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	4a16      	ldr	r2, [pc, #88]	; (80024e4 <TIM_OC4_SetConfig+0xcc>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d109      	bne.n	80024a4 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	4a15      	ldr	r2, [pc, #84]	; (80024e8 <TIM_OC4_SetConfig+0xd0>)
 8002494:	4013      	ands	r3, r2
 8002496:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	695b      	ldr	r3, [r3, #20]
 800249c:	019b      	lsls	r3, r3, #6
 800249e:	697a      	ldr	r2, [r7, #20]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	697a      	ldr	r2, [r7, #20]
 80024a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	68fa      	ldr	r2, [r7, #12]
 80024ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685a      	ldr	r2, [r3, #4]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	621a      	str	r2, [r3, #32]
}
 80024be:	46c0      	nop			; (mov r8, r8)
 80024c0:	46bd      	mov	sp, r7
 80024c2:	b006      	add	sp, #24
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	46c0      	nop			; (mov r8, r8)
 80024c8:	ffffefff 	.word	0xffffefff
 80024cc:	feff8fff 	.word	0xfeff8fff
 80024d0:	fffffcff 	.word	0xfffffcff
 80024d4:	ffffdfff 	.word	0xffffdfff
 80024d8:	40012c00 	.word	0x40012c00
 80024dc:	40014000 	.word	0x40014000
 80024e0:	40014400 	.word	0x40014400
 80024e4:	40014800 	.word	0x40014800
 80024e8:	ffffbfff 	.word	0xffffbfff

080024ec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a1b      	ldr	r3, [r3, #32]
 80024fa:	4a25      	ldr	r2, [pc, #148]	; (8002590 <TIM_OC5_SetConfig+0xa4>)
 80024fc:	401a      	ands	r2, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a1b      	ldr	r3, [r3, #32]
 8002506:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	4a1f      	ldr	r2, [pc, #124]	; (8002594 <TIM_OC5_SetConfig+0xa8>)
 8002518:	4013      	ands	r3, r2
 800251a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	68fa      	ldr	r2, [r7, #12]
 8002522:	4313      	orrs	r3, r2
 8002524:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	4a1b      	ldr	r2, [pc, #108]	; (8002598 <TIM_OC5_SetConfig+0xac>)
 800252a:	4013      	ands	r3, r2
 800252c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	041b      	lsls	r3, r3, #16
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	4313      	orrs	r3, r2
 8002538:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a17      	ldr	r2, [pc, #92]	; (800259c <TIM_OC5_SetConfig+0xb0>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d00b      	beq.n	800255a <TIM_OC5_SetConfig+0x6e>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a16      	ldr	r2, [pc, #88]	; (80025a0 <TIM_OC5_SetConfig+0xb4>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d007      	beq.n	800255a <TIM_OC5_SetConfig+0x6e>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a15      	ldr	r2, [pc, #84]	; (80025a4 <TIM_OC5_SetConfig+0xb8>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d003      	beq.n	800255a <TIM_OC5_SetConfig+0x6e>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a14      	ldr	r2, [pc, #80]	; (80025a8 <TIM_OC5_SetConfig+0xbc>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d109      	bne.n	800256e <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	4a0c      	ldr	r2, [pc, #48]	; (8002590 <TIM_OC5_SetConfig+0xa4>)
 800255e:	4013      	ands	r3, r2
 8002560:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	695b      	ldr	r3, [r3, #20]
 8002566:	021b      	lsls	r3, r3, #8
 8002568:	697a      	ldr	r2, [r7, #20]
 800256a:	4313      	orrs	r3, r2
 800256c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	697a      	ldr	r2, [r7, #20]
 8002572:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	68fa      	ldr	r2, [r7, #12]
 8002578:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685a      	ldr	r2, [r3, #4]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	621a      	str	r2, [r3, #32]
}
 8002588:	46c0      	nop			; (mov r8, r8)
 800258a:	46bd      	mov	sp, r7
 800258c:	b006      	add	sp, #24
 800258e:	bd80      	pop	{r7, pc}
 8002590:	fffeffff 	.word	0xfffeffff
 8002594:	fffeff8f 	.word	0xfffeff8f
 8002598:	fffdffff 	.word	0xfffdffff
 800259c:	40012c00 	.word	0x40012c00
 80025a0:	40014000 	.word	0x40014000
 80025a4:	40014400 	.word	0x40014400
 80025a8:	40014800 	.word	0x40014800

080025ac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a1b      	ldr	r3, [r3, #32]
 80025ba:	4a26      	ldr	r2, [pc, #152]	; (8002654 <TIM_OC6_SetConfig+0xa8>)
 80025bc:	401a      	ands	r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a1b      	ldr	r3, [r3, #32]
 80025c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	4a20      	ldr	r2, [pc, #128]	; (8002658 <TIM_OC6_SetConfig+0xac>)
 80025d8:	4013      	ands	r3, r2
 80025da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	021b      	lsls	r3, r3, #8
 80025e2:	68fa      	ldr	r2, [r7, #12]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	4a1c      	ldr	r2, [pc, #112]	; (800265c <TIM_OC6_SetConfig+0xb0>)
 80025ec:	4013      	ands	r3, r2
 80025ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	051b      	lsls	r3, r3, #20
 80025f6:	693a      	ldr	r2, [r7, #16]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4a18      	ldr	r2, [pc, #96]	; (8002660 <TIM_OC6_SetConfig+0xb4>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d00b      	beq.n	800261c <TIM_OC6_SetConfig+0x70>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4a17      	ldr	r2, [pc, #92]	; (8002664 <TIM_OC6_SetConfig+0xb8>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d007      	beq.n	800261c <TIM_OC6_SetConfig+0x70>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	4a16      	ldr	r2, [pc, #88]	; (8002668 <TIM_OC6_SetConfig+0xbc>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d003      	beq.n	800261c <TIM_OC6_SetConfig+0x70>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	4a15      	ldr	r2, [pc, #84]	; (800266c <TIM_OC6_SetConfig+0xc0>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d109      	bne.n	8002630 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	4a14      	ldr	r2, [pc, #80]	; (8002670 <TIM_OC6_SetConfig+0xc4>)
 8002620:	4013      	ands	r3, r2
 8002622:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	695b      	ldr	r3, [r3, #20]
 8002628:	029b      	lsls	r3, r3, #10
 800262a:	697a      	ldr	r2, [r7, #20]
 800262c:	4313      	orrs	r3, r2
 800262e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	697a      	ldr	r2, [r7, #20]
 8002634:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	68fa      	ldr	r2, [r7, #12]
 800263a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685a      	ldr	r2, [r3, #4]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	693a      	ldr	r2, [r7, #16]
 8002648:	621a      	str	r2, [r3, #32]
}
 800264a:	46c0      	nop			; (mov r8, r8)
 800264c:	46bd      	mov	sp, r7
 800264e:	b006      	add	sp, #24
 8002650:	bd80      	pop	{r7, pc}
 8002652:	46c0      	nop			; (mov r8, r8)
 8002654:	ffefffff 	.word	0xffefffff
 8002658:	feff8fff 	.word	0xfeff8fff
 800265c:	ffdfffff 	.word	0xffdfffff
 8002660:	40012c00 	.word	0x40012c00
 8002664:	40014000 	.word	0x40014000
 8002668:	40014400 	.word	0x40014400
 800266c:	40014800 	.word	0x40014800
 8002670:	fffbffff 	.word	0xfffbffff

08002674 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6a1b      	ldr	r3, [r3, #32]
 8002684:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6a1b      	ldr	r3, [r3, #32]
 800268a:	2201      	movs	r2, #1
 800268c:	4393      	bics	r3, r2
 800268e:	001a      	movs	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	699b      	ldr	r3, [r3, #24]
 8002698:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	22f0      	movs	r2, #240	; 0xf0
 800269e:	4393      	bics	r3, r2
 80026a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	011b      	lsls	r3, r3, #4
 80026a6:	693a      	ldr	r2, [r7, #16]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	220a      	movs	r2, #10
 80026b0:	4393      	bics	r3, r2
 80026b2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80026b4:	697a      	ldr	r2, [r7, #20]
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	697a      	ldr	r2, [r7, #20]
 80026c6:	621a      	str	r2, [r3, #32]
}
 80026c8:	46c0      	nop			; (mov r8, r8)
 80026ca:	46bd      	mov	sp, r7
 80026cc:	b006      	add	sp, #24
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b086      	sub	sp, #24
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6a1b      	ldr	r3, [r3, #32]
 80026e0:	2210      	movs	r2, #16
 80026e2:	4393      	bics	r3, r2
 80026e4:	001a      	movs	r2, r3
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	699b      	ldr	r3, [r3, #24]
 80026ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6a1b      	ldr	r3, [r3, #32]
 80026f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	4a0d      	ldr	r2, [pc, #52]	; (8002730 <TIM_TI2_ConfigInputStage+0x60>)
 80026fa:	4013      	ands	r3, r2
 80026fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	031b      	lsls	r3, r3, #12
 8002702:	697a      	ldr	r2, [r7, #20]
 8002704:	4313      	orrs	r3, r2
 8002706:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	22a0      	movs	r2, #160	; 0xa0
 800270c:	4393      	bics	r3, r2
 800270e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	011b      	lsls	r3, r3, #4
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	4313      	orrs	r3, r2
 8002718:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	697a      	ldr	r2, [r7, #20]
 800271e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	621a      	str	r2, [r3, #32]
}
 8002726:	46c0      	nop			; (mov r8, r8)
 8002728:	46bd      	mov	sp, r7
 800272a:	b006      	add	sp, #24
 800272c:	bd80      	pop	{r7, pc}
 800272e:	46c0      	nop			; (mov r8, r8)
 8002730:	ffff0fff 	.word	0xffff0fff

08002734 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	4a08      	ldr	r2, [pc, #32]	; (8002768 <TIM_ITRx_SetConfig+0x34>)
 8002748:	4013      	ands	r3, r2
 800274a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800274c:	683a      	ldr	r2, [r7, #0]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	4313      	orrs	r3, r2
 8002752:	2207      	movs	r2, #7
 8002754:	4313      	orrs	r3, r2
 8002756:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	609a      	str	r2, [r3, #8]
}
 800275e:	46c0      	nop			; (mov r8, r8)
 8002760:	46bd      	mov	sp, r7
 8002762:	b004      	add	sp, #16
 8002764:	bd80      	pop	{r7, pc}
 8002766:	46c0      	nop			; (mov r8, r8)
 8002768:	ffcfff8f 	.word	0xffcfff8f

0800276c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b086      	sub	sp, #24
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	607a      	str	r2, [r7, #4]
 8002778:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	4a09      	ldr	r2, [pc, #36]	; (80027a8 <TIM_ETR_SetConfig+0x3c>)
 8002784:	4013      	ands	r3, r2
 8002786:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	021a      	lsls	r2, r3, #8
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	431a      	orrs	r2, r3
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	4313      	orrs	r3, r2
 8002794:	697a      	ldr	r2, [r7, #20]
 8002796:	4313      	orrs	r3, r2
 8002798:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	697a      	ldr	r2, [r7, #20]
 800279e:	609a      	str	r2, [r3, #8]
}
 80027a0:	46c0      	nop			; (mov r8, r8)
 80027a2:	46bd      	mov	sp, r7
 80027a4:	b006      	add	sp, #24
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	ffff00ff 	.word	0xffff00ff

080027ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	223c      	movs	r2, #60	; 0x3c
 80027ba:	5c9b      	ldrb	r3, [r3, r2]
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d101      	bne.n	80027c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80027c0:	2302      	movs	r3, #2
 80027c2:	e05a      	b.n	800287a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	223c      	movs	r2, #60	; 0x3c
 80027c8:	2101      	movs	r1, #1
 80027ca:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	223d      	movs	r2, #61	; 0x3d
 80027d0:	2102      	movs	r1, #2
 80027d2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a26      	ldr	r2, [pc, #152]	; (8002884 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d108      	bne.n	8002800 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	4a25      	ldr	r2, [pc, #148]	; (8002888 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80027f2:	4013      	ands	r3, r2
 80027f4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2270      	movs	r2, #112	; 0x70
 8002804:	4393      	bics	r3, r2
 8002806:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68fa      	ldr	r2, [r7, #12]
 800280e:	4313      	orrs	r3, r2
 8002810:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68fa      	ldr	r2, [r7, #12]
 8002818:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a19      	ldr	r2, [pc, #100]	; (8002884 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d014      	beq.n	800284e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	2380      	movs	r3, #128	; 0x80
 800282a:	05db      	lsls	r3, r3, #23
 800282c:	429a      	cmp	r2, r3
 800282e:	d00e      	beq.n	800284e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a15      	ldr	r2, [pc, #84]	; (800288c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d009      	beq.n	800284e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a14      	ldr	r2, [pc, #80]	; (8002890 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d004      	beq.n	800284e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a12      	ldr	r2, [pc, #72]	; (8002894 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d10c      	bne.n	8002868 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	2280      	movs	r2, #128	; 0x80
 8002852:	4393      	bics	r3, r2
 8002854:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	68ba      	ldr	r2, [r7, #8]
 800285c:	4313      	orrs	r3, r2
 800285e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68ba      	ldr	r2, [r7, #8]
 8002866:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	223d      	movs	r2, #61	; 0x3d
 800286c:	2101      	movs	r1, #1
 800286e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	223c      	movs	r2, #60	; 0x3c
 8002874:	2100      	movs	r1, #0
 8002876:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002878:	2300      	movs	r3, #0
}
 800287a:	0018      	movs	r0, r3
 800287c:	46bd      	mov	sp, r7
 800287e:	b004      	add	sp, #16
 8002880:	bd80      	pop	{r7, pc}
 8002882:	46c0      	nop			; (mov r8, r8)
 8002884:	40012c00 	.word	0x40012c00
 8002888:	ff0fffff 	.word	0xff0fffff
 800288c:	40000400 	.word	0x40000400
 8002890:	40000800 	.word	0x40000800
 8002894:	40014000 	.word	0x40014000

08002898 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80028a0:	46c0      	nop			; (mov r8, r8)
 80028a2:	46bd      	mov	sp, r7
 80028a4:	b002      	add	sp, #8
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80028b0:	46c0      	nop			; (mov r8, r8)
 80028b2:	46bd      	mov	sp, r7
 80028b4:	b002      	add	sp, #8
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80028c0:	46c0      	nop			; (mov r8, r8)
 80028c2:	46bd      	mov	sp, r7
 80028c4:	b002      	add	sp, #8
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <__libc_init_array>:
 80028c8:	b570      	push	{r4, r5, r6, lr}
 80028ca:	2600      	movs	r6, #0
 80028cc:	4d0c      	ldr	r5, [pc, #48]	; (8002900 <__libc_init_array+0x38>)
 80028ce:	4c0d      	ldr	r4, [pc, #52]	; (8002904 <__libc_init_array+0x3c>)
 80028d0:	1b64      	subs	r4, r4, r5
 80028d2:	10a4      	asrs	r4, r4, #2
 80028d4:	42a6      	cmp	r6, r4
 80028d6:	d109      	bne.n	80028ec <__libc_init_array+0x24>
 80028d8:	2600      	movs	r6, #0
 80028da:	f000 f821 	bl	8002920 <_init>
 80028de:	4d0a      	ldr	r5, [pc, #40]	; (8002908 <__libc_init_array+0x40>)
 80028e0:	4c0a      	ldr	r4, [pc, #40]	; (800290c <__libc_init_array+0x44>)
 80028e2:	1b64      	subs	r4, r4, r5
 80028e4:	10a4      	asrs	r4, r4, #2
 80028e6:	42a6      	cmp	r6, r4
 80028e8:	d105      	bne.n	80028f6 <__libc_init_array+0x2e>
 80028ea:	bd70      	pop	{r4, r5, r6, pc}
 80028ec:	00b3      	lsls	r3, r6, #2
 80028ee:	58eb      	ldr	r3, [r5, r3]
 80028f0:	4798      	blx	r3
 80028f2:	3601      	adds	r6, #1
 80028f4:	e7ee      	b.n	80028d4 <__libc_init_array+0xc>
 80028f6:	00b3      	lsls	r3, r6, #2
 80028f8:	58eb      	ldr	r3, [r5, r3]
 80028fa:	4798      	blx	r3
 80028fc:	3601      	adds	r6, #1
 80028fe:	e7f2      	b.n	80028e6 <__libc_init_array+0x1e>
 8002900:	080029cc 	.word	0x080029cc
 8002904:	080029cc 	.word	0x080029cc
 8002908:	080029cc 	.word	0x080029cc
 800290c:	080029d0 	.word	0x080029d0

08002910 <memset>:
 8002910:	0003      	movs	r3, r0
 8002912:	1882      	adds	r2, r0, r2
 8002914:	4293      	cmp	r3, r2
 8002916:	d100      	bne.n	800291a <memset+0xa>
 8002918:	4770      	bx	lr
 800291a:	7019      	strb	r1, [r3, #0]
 800291c:	3301      	adds	r3, #1
 800291e:	e7f9      	b.n	8002914 <memset+0x4>

08002920 <_init>:
 8002920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002922:	46c0      	nop			; (mov r8, r8)
 8002924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002926:	bc08      	pop	{r3}
 8002928:	469e      	mov	lr, r3
 800292a:	4770      	bx	lr

0800292c <_fini>:
 800292c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800292e:	46c0      	nop			; (mov r8, r8)
 8002930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002932:	bc08      	pop	{r3}
 8002934:	469e      	mov	lr, r3
 8002936:	4770      	bx	lr
