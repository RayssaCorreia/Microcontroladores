
Exe_5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ad4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08001b90  08001b90  00011b90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001bf8  08001bf8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001bf8  08001bf8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001bf8  08001bf8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001bf8  08001bf8  00011bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001bfc  08001bfc  00011bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001c00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  2000000c  08001c0c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  08001c0c  00020030  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004882  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000116d  00000000  00000000  000248b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000528  00000000  00000000  00025a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000490  00000000  00000000  00025f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001970b  00000000  00000000  000263e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005661  00000000  00000000  0003faeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a50e1  00000000  00000000  0004514c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ea22d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001098  00000000  00000000  000ea280  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08001b78 	.word	0x08001b78

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08001b78 	.word	0x08001b78

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <HAL_GPIO_EXTI_Rising_Callback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin){
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	0002      	movs	r2, r0
 8000224:	1dbb      	adds	r3, r7, #6
 8000226:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(BUTTON_GPIO_Port, BUTTON_Pin, GPIO_PIN_RESET);
 8000228:	2380      	movs	r3, #128	; 0x80
 800022a:	019b      	lsls	r3, r3, #6
 800022c:	480a      	ldr	r0, [pc, #40]	; (8000258 <HAL_GPIO_EXTI_Rising_Callback+0x3c>)
 800022e:	2200      	movs	r2, #0
 8000230:	0019      	movs	r1, r3
 8000232:	f000 fef3 	bl	800101c <HAL_GPIO_WritePin>
	Contador++;
 8000236:	4b09      	ldr	r3, [pc, #36]	; (800025c <HAL_GPIO_EXTI_Rising_Callback+0x40>)
 8000238:	881b      	ldrh	r3, [r3, #0]
 800023a:	3301      	adds	r3, #1
 800023c:	b29a      	uxth	r2, r3
 800023e:	4b07      	ldr	r3, [pc, #28]	; (800025c <HAL_GPIO_EXTI_Rising_Callback+0x40>)
 8000240:	801a      	strh	r2, [r3, #0]

	if(Contador > 9){
 8000242:	4b06      	ldr	r3, [pc, #24]	; (800025c <HAL_GPIO_EXTI_Rising_Callback+0x40>)
 8000244:	881b      	ldrh	r3, [r3, #0]
 8000246:	2b09      	cmp	r3, #9
 8000248:	d902      	bls.n	8000250 <HAL_GPIO_EXTI_Rising_Callback+0x34>
		Contador = 0;
 800024a:	4b04      	ldr	r3, [pc, #16]	; (800025c <HAL_GPIO_EXTI_Rising_Callback+0x40>)
 800024c:	2200      	movs	r2, #0
 800024e:	801a      	strh	r2, [r3, #0]
	}
}
 8000250:	46c0      	nop			; (mov r8, r8)
 8000252:	46bd      	mov	sp, r7
 8000254:	b002      	add	sp, #8
 8000256:	bd80      	pop	{r7, pc}
 8000258:	50000800 	.word	0x50000800
 800025c:	20000028 	.word	0x20000028

08000260 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000264:	f000 fbd0 	bl	8000a08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000268:	f000 fa4e 	bl	8000708 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800026c:	f000 faaa 	bl	80007c4 <MX_GPIO_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_Delay(1);
 8000270:	2001      	movs	r0, #1
 8000272:	f000 fc4f 	bl	8000b14 <HAL_Delay>

	  switch(Contador) {
 8000276:	4be5      	ldr	r3, [pc, #916]	; (800060c <main+0x3ac>)
 8000278:	881b      	ldrh	r3, [r3, #0]
 800027a:	2b09      	cmp	r3, #9
 800027c:	d900      	bls.n	8000280 <main+0x20>
 800027e:	e23d      	b.n	80006fc <main+0x49c>
 8000280:	009a      	lsls	r2, r3, #2
 8000282:	4be3      	ldr	r3, [pc, #908]	; (8000610 <main+0x3b0>)
 8000284:	18d3      	adds	r3, r2, r3
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	469f      	mov	pc, r3
	  	  case 0:
	  	  		HAL_GPIO_WritePin(A_7_GPIO_Port, A_7_Pin, 1);
 800028a:	2380      	movs	r3, #128	; 0x80
 800028c:	0059      	lsls	r1, r3, #1
 800028e:	23a0      	movs	r3, #160	; 0xa0
 8000290:	05db      	lsls	r3, r3, #23
 8000292:	2201      	movs	r2, #1
 8000294:	0018      	movs	r0, r3
 8000296:	f000 fec1 	bl	800101c <HAL_GPIO_WritePin>
	  	  	  	HAL_GPIO_WritePin(B_6_GPIO_Port, B_6_Pin, 1);
 800029a:	2380      	movs	r3, #128	; 0x80
 800029c:	01db      	lsls	r3, r3, #7
 800029e:	48dd      	ldr	r0, [pc, #884]	; (8000614 <main+0x3b4>)
 80002a0:	2201      	movs	r2, #1
 80002a2:	0019      	movs	r1, r3
 80002a4:	f000 feba 	bl	800101c <HAL_GPIO_WritePin>
	  	  	  	HAL_GPIO_WritePin(C_4_GPIO_Port, C_4_Pin, 1);
 80002a8:	23a0      	movs	r3, #160	; 0xa0
 80002aa:	05db      	lsls	r3, r3, #23
 80002ac:	2201      	movs	r2, #1
 80002ae:	2140      	movs	r1, #64	; 0x40
 80002b0:	0018      	movs	r0, r3
 80002b2:	f000 feb3 	bl	800101c <HAL_GPIO_WritePin>
	  	  	  	HAL_GPIO_WritePin(D_2_GPIO_Port, D_2_Pin, 1);
 80002b6:	2380      	movs	r3, #128	; 0x80
 80002b8:	0099      	lsls	r1, r3, #2
 80002ba:	23a0      	movs	r3, #160	; 0xa0
 80002bc:	05db      	lsls	r3, r3, #23
 80002be:	2201      	movs	r2, #1
 80002c0:	0018      	movs	r0, r3
 80002c2:	f000 feab 	bl	800101c <HAL_GPIO_WritePin>
	  	  	  	HAL_GPIO_WritePin(E_1_GPIO_Port, E_1_Pin, 1);
 80002c6:	4bd4      	ldr	r3, [pc, #848]	; (8000618 <main+0x3b8>)
 80002c8:	2201      	movs	r2, #1
 80002ca:	2180      	movs	r1, #128	; 0x80
 80002cc:	0018      	movs	r0, r3
 80002ce:	f000 fea5 	bl	800101c <HAL_GPIO_WritePin>
	  	  	  	HAL_GPIO_WritePin(F_9_GPIO_Port, F_9_Pin, 1);
 80002d2:	4bd0      	ldr	r3, [pc, #832]	; (8000614 <main+0x3b4>)
 80002d4:	2201      	movs	r2, #1
 80002d6:	2110      	movs	r1, #16
 80002d8:	0018      	movs	r0, r3
 80002da:	f000 fe9f 	bl	800101c <HAL_GPIO_WritePin>
	  	  	  	HAL_GPIO_WritePin(G_10_GPIO_Port, G_10_Pin, 0);
 80002de:	4bcd      	ldr	r3, [pc, #820]	; (8000614 <main+0x3b4>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	2120      	movs	r1, #32
 80002e4:	0018      	movs	r0, r3
 80002e6:	f000 fe99 	bl	800101c <HAL_GPIO_WritePin>
	  	  	  	HAL_GPIO_WritePin(DP_5_GPIO_Port, DP_5_Pin, 0);
 80002ea:	23a0      	movs	r3, #160	; 0xa0
 80002ec:	05db      	lsls	r3, r3, #23
 80002ee:	2200      	movs	r2, #0
 80002f0:	2180      	movs	r1, #128	; 0x80
 80002f2:	0018      	movs	r0, r3
 80002f4:	f000 fe92 	bl	800101c <HAL_GPIO_WritePin>

	  	  break;
 80002f8:	e201      	b.n	80006fe <main+0x49e>

	  	  case 1:
	  	  	  		HAL_GPIO_WritePin(A_7_GPIO_Port, A_7_Pin, 0);
 80002fa:	2380      	movs	r3, #128	; 0x80
 80002fc:	0059      	lsls	r1, r3, #1
 80002fe:	23a0      	movs	r3, #160	; 0xa0
 8000300:	05db      	lsls	r3, r3, #23
 8000302:	2200      	movs	r2, #0
 8000304:	0018      	movs	r0, r3
 8000306:	f000 fe89 	bl	800101c <HAL_GPIO_WritePin>
	  	  	  		HAL_GPIO_WritePin(B_6_GPIO_Port, B_6_Pin, 1);
 800030a:	2380      	movs	r3, #128	; 0x80
 800030c:	01db      	lsls	r3, r3, #7
 800030e:	48c1      	ldr	r0, [pc, #772]	; (8000614 <main+0x3b4>)
 8000310:	2201      	movs	r2, #1
 8000312:	0019      	movs	r1, r3
 8000314:	f000 fe82 	bl	800101c <HAL_GPIO_WritePin>
	  	  	  		HAL_GPIO_WritePin(C_4_GPIO_Port, C_4_Pin, 1);
 8000318:	23a0      	movs	r3, #160	; 0xa0
 800031a:	05db      	lsls	r3, r3, #23
 800031c:	2201      	movs	r2, #1
 800031e:	2140      	movs	r1, #64	; 0x40
 8000320:	0018      	movs	r0, r3
 8000322:	f000 fe7b 	bl	800101c <HAL_GPIO_WritePin>
	  	  	  		HAL_GPIO_WritePin(D_2_GPIO_Port, D_2_Pin, 0);
 8000326:	2380      	movs	r3, #128	; 0x80
 8000328:	0099      	lsls	r1, r3, #2
 800032a:	23a0      	movs	r3, #160	; 0xa0
 800032c:	05db      	lsls	r3, r3, #23
 800032e:	2200      	movs	r2, #0
 8000330:	0018      	movs	r0, r3
 8000332:	f000 fe73 	bl	800101c <HAL_GPIO_WritePin>
	  	  	  		HAL_GPIO_WritePin(E_1_GPIO_Port, E_1_Pin, 0);
 8000336:	4bb8      	ldr	r3, [pc, #736]	; (8000618 <main+0x3b8>)
 8000338:	2200      	movs	r2, #0
 800033a:	2180      	movs	r1, #128	; 0x80
 800033c:	0018      	movs	r0, r3
 800033e:	f000 fe6d 	bl	800101c <HAL_GPIO_WritePin>
	  	  	  		HAL_GPIO_WritePin(F_9_GPIO_Port, F_9_Pin, 0);
 8000342:	4bb4      	ldr	r3, [pc, #720]	; (8000614 <main+0x3b4>)
 8000344:	2200      	movs	r2, #0
 8000346:	2110      	movs	r1, #16
 8000348:	0018      	movs	r0, r3
 800034a:	f000 fe67 	bl	800101c <HAL_GPIO_WritePin>
	  	  	  		HAL_GPIO_WritePin(G_10_GPIO_Port, G_10_Pin, 0);
 800034e:	4bb1      	ldr	r3, [pc, #708]	; (8000614 <main+0x3b4>)
 8000350:	2200      	movs	r2, #0
 8000352:	2120      	movs	r1, #32
 8000354:	0018      	movs	r0, r3
 8000356:	f000 fe61 	bl	800101c <HAL_GPIO_WritePin>
	  	  	  		HAL_GPIO_WritePin(DP_5_GPIO_Port, DP_5_Pin, 0);
 800035a:	23a0      	movs	r3, #160	; 0xa0
 800035c:	05db      	lsls	r3, r3, #23
 800035e:	2200      	movs	r2, #0
 8000360:	2180      	movs	r1, #128	; 0x80
 8000362:	0018      	movs	r0, r3
 8000364:	f000 fe5a 	bl	800101c <HAL_GPIO_WritePin>

	  	  	  		  break;
 8000368:	e1c9      	b.n	80006fe <main+0x49e>

	  	  	  	  case 2:
	  	  	  		HAL_GPIO_WritePin(A_7_GPIO_Port, A_7_Pin, 1);
 800036a:	2380      	movs	r3, #128	; 0x80
 800036c:	0059      	lsls	r1, r3, #1
 800036e:	23a0      	movs	r3, #160	; 0xa0
 8000370:	05db      	lsls	r3, r3, #23
 8000372:	2201      	movs	r2, #1
 8000374:	0018      	movs	r0, r3
 8000376:	f000 fe51 	bl	800101c <HAL_GPIO_WritePin>
	  	  	  		HAL_GPIO_WritePin(B_6_GPIO_Port, B_6_Pin, 1);
 800037a:	2380      	movs	r3, #128	; 0x80
 800037c:	01db      	lsls	r3, r3, #7
 800037e:	48a5      	ldr	r0, [pc, #660]	; (8000614 <main+0x3b4>)
 8000380:	2201      	movs	r2, #1
 8000382:	0019      	movs	r1, r3
 8000384:	f000 fe4a 	bl	800101c <HAL_GPIO_WritePin>
	  	  	  		HAL_GPIO_WritePin(C_4_GPIO_Port, C_4_Pin, 0);
 8000388:	23a0      	movs	r3, #160	; 0xa0
 800038a:	05db      	lsls	r3, r3, #23
 800038c:	2200      	movs	r2, #0
 800038e:	2140      	movs	r1, #64	; 0x40
 8000390:	0018      	movs	r0, r3
 8000392:	f000 fe43 	bl	800101c <HAL_GPIO_WritePin>
	  	  	  		HAL_GPIO_WritePin(D_2_GPIO_Port, D_2_Pin, 1);
 8000396:	2380      	movs	r3, #128	; 0x80
 8000398:	0099      	lsls	r1, r3, #2
 800039a:	23a0      	movs	r3, #160	; 0xa0
 800039c:	05db      	lsls	r3, r3, #23
 800039e:	2201      	movs	r2, #1
 80003a0:	0018      	movs	r0, r3
 80003a2:	f000 fe3b 	bl	800101c <HAL_GPIO_WritePin>
	  	  	  		HAL_GPIO_WritePin(E_1_GPIO_Port, E_1_Pin, 1);
 80003a6:	4b9c      	ldr	r3, [pc, #624]	; (8000618 <main+0x3b8>)
 80003a8:	2201      	movs	r2, #1
 80003aa:	2180      	movs	r1, #128	; 0x80
 80003ac:	0018      	movs	r0, r3
 80003ae:	f000 fe35 	bl	800101c <HAL_GPIO_WritePin>
	  	  	  		HAL_GPIO_WritePin(F_9_GPIO_Port, F_9_Pin, 0);
 80003b2:	4b98      	ldr	r3, [pc, #608]	; (8000614 <main+0x3b4>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	2110      	movs	r1, #16
 80003b8:	0018      	movs	r0, r3
 80003ba:	f000 fe2f 	bl	800101c <HAL_GPIO_WritePin>
	  	  	  		HAL_GPIO_WritePin(G_10_GPIO_Port, G_10_Pin, 1);
 80003be:	4b95      	ldr	r3, [pc, #596]	; (8000614 <main+0x3b4>)
 80003c0:	2201      	movs	r2, #1
 80003c2:	2120      	movs	r1, #32
 80003c4:	0018      	movs	r0, r3
 80003c6:	f000 fe29 	bl	800101c <HAL_GPIO_WritePin>
	  	  	  		HAL_GPIO_WritePin(DP_5_GPIO_Port, DP_5_Pin, 0);
 80003ca:	23a0      	movs	r3, #160	; 0xa0
 80003cc:	05db      	lsls	r3, r3, #23
 80003ce:	2200      	movs	r2, #0
 80003d0:	2180      	movs	r1, #128	; 0x80
 80003d2:	0018      	movs	r0, r3
 80003d4:	f000 fe22 	bl	800101c <HAL_GPIO_WritePin>

	  	  	  		  break;
 80003d8:	e191      	b.n	80006fe <main+0x49e>

	  	  	  	  case 3:
	  	  	  		HAL_GPIO_WritePin(A_7_GPIO_Port, A_7_Pin, 1);
 80003da:	2380      	movs	r3, #128	; 0x80
 80003dc:	0059      	lsls	r1, r3, #1
 80003de:	23a0      	movs	r3, #160	; 0xa0
 80003e0:	05db      	lsls	r3, r3, #23
 80003e2:	2201      	movs	r2, #1
 80003e4:	0018      	movs	r0, r3
 80003e6:	f000 fe19 	bl	800101c <HAL_GPIO_WritePin>
	  	  	  		HAL_GPIO_WritePin(B_6_GPIO_Port, B_6_Pin, 0);
 80003ea:	2380      	movs	r3, #128	; 0x80
 80003ec:	01db      	lsls	r3, r3, #7
 80003ee:	4889      	ldr	r0, [pc, #548]	; (8000614 <main+0x3b4>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	0019      	movs	r1, r3
 80003f4:	f000 fe12 	bl	800101c <HAL_GPIO_WritePin>
	  	  	  		HAL_GPIO_WritePin(C_4_GPIO_Port, C_4_Pin, 0);
 80003f8:	23a0      	movs	r3, #160	; 0xa0
 80003fa:	05db      	lsls	r3, r3, #23
 80003fc:	2200      	movs	r2, #0
 80003fe:	2140      	movs	r1, #64	; 0x40
 8000400:	0018      	movs	r0, r3
 8000402:	f000 fe0b 	bl	800101c <HAL_GPIO_WritePin>
	  	  	  		HAL_GPIO_WritePin(D_2_GPIO_Port, D_2_Pin, 1);
 8000406:	2380      	movs	r3, #128	; 0x80
 8000408:	0099      	lsls	r1, r3, #2
 800040a:	23a0      	movs	r3, #160	; 0xa0
 800040c:	05db      	lsls	r3, r3, #23
 800040e:	2201      	movs	r2, #1
 8000410:	0018      	movs	r0, r3
 8000412:	f000 fe03 	bl	800101c <HAL_GPIO_WritePin>
	  	  	  		HAL_GPIO_WritePin(E_1_GPIO_Port, E_1_Pin, 1);
 8000416:	4b80      	ldr	r3, [pc, #512]	; (8000618 <main+0x3b8>)
 8000418:	2201      	movs	r2, #1
 800041a:	2180      	movs	r1, #128	; 0x80
 800041c:	0018      	movs	r0, r3
 800041e:	f000 fdfd 	bl	800101c <HAL_GPIO_WritePin>
	  	  	  		HAL_GPIO_WritePin(F_9_GPIO_Port, F_9_Pin, 1);
 8000422:	4b7c      	ldr	r3, [pc, #496]	; (8000614 <main+0x3b4>)
 8000424:	2201      	movs	r2, #1
 8000426:	2110      	movs	r1, #16
 8000428:	0018      	movs	r0, r3
 800042a:	f000 fdf7 	bl	800101c <HAL_GPIO_WritePin>
	  				HAL_GPIO_WritePin(G_10_GPIO_Port, G_10_Pin, 1);
 800042e:	4b79      	ldr	r3, [pc, #484]	; (8000614 <main+0x3b4>)
 8000430:	2201      	movs	r2, #1
 8000432:	2120      	movs	r1, #32
 8000434:	0018      	movs	r0, r3
 8000436:	f000 fdf1 	bl	800101c <HAL_GPIO_WritePin>
	  				HAL_GPIO_WritePin(DP_5_GPIO_Port, DP_5_Pin, 0);
 800043a:	23a0      	movs	r3, #160	; 0xa0
 800043c:	05db      	lsls	r3, r3, #23
 800043e:	2200      	movs	r2, #0
 8000440:	2180      	movs	r1, #128	; 0x80
 8000442:	0018      	movs	r0, r3
 8000444:	f000 fdea 	bl	800101c <HAL_GPIO_WritePin>


	  	  	  		  break;
 8000448:	e159      	b.n	80006fe <main+0x49e>

	  	  	  	  case 4:
	  	  	  		HAL_GPIO_WritePin(A_7_GPIO_Port, A_7_Pin, 0);
 800044a:	2380      	movs	r3, #128	; 0x80
 800044c:	0059      	lsls	r1, r3, #1
 800044e:	23a0      	movs	r3, #160	; 0xa0
 8000450:	05db      	lsls	r3, r3, #23
 8000452:	2200      	movs	r2, #0
 8000454:	0018      	movs	r0, r3
 8000456:	f000 fde1 	bl	800101c <HAL_GPIO_WritePin>
	  				HAL_GPIO_WritePin(B_6_GPIO_Port, B_6_Pin, 0);
 800045a:	2380      	movs	r3, #128	; 0x80
 800045c:	01db      	lsls	r3, r3, #7
 800045e:	486d      	ldr	r0, [pc, #436]	; (8000614 <main+0x3b4>)
 8000460:	2200      	movs	r2, #0
 8000462:	0019      	movs	r1, r3
 8000464:	f000 fdda 	bl	800101c <HAL_GPIO_WritePin>
	  				HAL_GPIO_WritePin(C_4_GPIO_Port, C_4_Pin, 1);
 8000468:	23a0      	movs	r3, #160	; 0xa0
 800046a:	05db      	lsls	r3, r3, #23
 800046c:	2201      	movs	r2, #1
 800046e:	2140      	movs	r1, #64	; 0x40
 8000470:	0018      	movs	r0, r3
 8000472:	f000 fdd3 	bl	800101c <HAL_GPIO_WritePin>
	  				HAL_GPIO_WritePin(D_2_GPIO_Port, D_2_Pin, 0);
 8000476:	2380      	movs	r3, #128	; 0x80
 8000478:	0099      	lsls	r1, r3, #2
 800047a:	23a0      	movs	r3, #160	; 0xa0
 800047c:	05db      	lsls	r3, r3, #23
 800047e:	2200      	movs	r2, #0
 8000480:	0018      	movs	r0, r3
 8000482:	f000 fdcb 	bl	800101c <HAL_GPIO_WritePin>
	  				HAL_GPIO_WritePin(E_1_GPIO_Port, E_1_Pin, 1);
 8000486:	4b64      	ldr	r3, [pc, #400]	; (8000618 <main+0x3b8>)
 8000488:	2201      	movs	r2, #1
 800048a:	2180      	movs	r1, #128	; 0x80
 800048c:	0018      	movs	r0, r3
 800048e:	f000 fdc5 	bl	800101c <HAL_GPIO_WritePin>
	  				HAL_GPIO_WritePin(F_9_GPIO_Port, F_9_Pin, 1);
 8000492:	4b60      	ldr	r3, [pc, #384]	; (8000614 <main+0x3b4>)
 8000494:	2201      	movs	r2, #1
 8000496:	2110      	movs	r1, #16
 8000498:	0018      	movs	r0, r3
 800049a:	f000 fdbf 	bl	800101c <HAL_GPIO_WritePin>
	  				HAL_GPIO_WritePin(G_10_GPIO_Port, G_10_Pin, 1);
 800049e:	4b5d      	ldr	r3, [pc, #372]	; (8000614 <main+0x3b4>)
 80004a0:	2201      	movs	r2, #1
 80004a2:	2120      	movs	r1, #32
 80004a4:	0018      	movs	r0, r3
 80004a6:	f000 fdb9 	bl	800101c <HAL_GPIO_WritePin>
	  				HAL_GPIO_WritePin(DP_5_GPIO_Port, DP_5_Pin, 0);
 80004aa:	23a0      	movs	r3, #160	; 0xa0
 80004ac:	05db      	lsls	r3, r3, #23
 80004ae:	2200      	movs	r2, #0
 80004b0:	2180      	movs	r1, #128	; 0x80
 80004b2:	0018      	movs	r0, r3
 80004b4:	f000 fdb2 	bl	800101c <HAL_GPIO_WritePin>

	  	  	  		  break;
 80004b8:	e121      	b.n	80006fe <main+0x49e>

	  	  	  	  case 5:
	  	  	  		HAL_GPIO_WritePin(A_7_GPIO_Port, A_7_Pin, 1);
 80004ba:	2380      	movs	r3, #128	; 0x80
 80004bc:	0059      	lsls	r1, r3, #1
 80004be:	23a0      	movs	r3, #160	; 0xa0
 80004c0:	05db      	lsls	r3, r3, #23
 80004c2:	2201      	movs	r2, #1
 80004c4:	0018      	movs	r0, r3
 80004c6:	f000 fda9 	bl	800101c <HAL_GPIO_WritePin>
	  				HAL_GPIO_WritePin(B_6_GPIO_Port, B_6_Pin, 0);
 80004ca:	2380      	movs	r3, #128	; 0x80
 80004cc:	01db      	lsls	r3, r3, #7
 80004ce:	4851      	ldr	r0, [pc, #324]	; (8000614 <main+0x3b4>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	0019      	movs	r1, r3
 80004d4:	f000 fda2 	bl	800101c <HAL_GPIO_WritePin>
	  				HAL_GPIO_WritePin(C_4_GPIO_Port, C_4_Pin, 1);
 80004d8:	23a0      	movs	r3, #160	; 0xa0
 80004da:	05db      	lsls	r3, r3, #23
 80004dc:	2201      	movs	r2, #1
 80004de:	2140      	movs	r1, #64	; 0x40
 80004e0:	0018      	movs	r0, r3
 80004e2:	f000 fd9b 	bl	800101c <HAL_GPIO_WritePin>
	  				HAL_GPIO_WritePin(D_2_GPIO_Port, D_2_Pin, 1);
 80004e6:	2380      	movs	r3, #128	; 0x80
 80004e8:	0099      	lsls	r1, r3, #2
 80004ea:	23a0      	movs	r3, #160	; 0xa0
 80004ec:	05db      	lsls	r3, r3, #23
 80004ee:	2201      	movs	r2, #1
 80004f0:	0018      	movs	r0, r3
 80004f2:	f000 fd93 	bl	800101c <HAL_GPIO_WritePin>
	  				HAL_GPIO_WritePin(E_1_GPIO_Port, E_1_Pin, 0);
 80004f6:	4b48      	ldr	r3, [pc, #288]	; (8000618 <main+0x3b8>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	2180      	movs	r1, #128	; 0x80
 80004fc:	0018      	movs	r0, r3
 80004fe:	f000 fd8d 	bl	800101c <HAL_GPIO_WritePin>
	  				HAL_GPIO_WritePin(F_9_GPIO_Port, F_9_Pin, 1);
 8000502:	4b44      	ldr	r3, [pc, #272]	; (8000614 <main+0x3b4>)
 8000504:	2201      	movs	r2, #1
 8000506:	2110      	movs	r1, #16
 8000508:	0018      	movs	r0, r3
 800050a:	f000 fd87 	bl	800101c <HAL_GPIO_WritePin>
	  				HAL_GPIO_WritePin(G_10_GPIO_Port, G_10_Pin, 1);
 800050e:	4b41      	ldr	r3, [pc, #260]	; (8000614 <main+0x3b4>)
 8000510:	2201      	movs	r2, #1
 8000512:	2120      	movs	r1, #32
 8000514:	0018      	movs	r0, r3
 8000516:	f000 fd81 	bl	800101c <HAL_GPIO_WritePin>
	  				HAL_GPIO_WritePin(DP_5_GPIO_Port, DP_5_Pin, 0);
 800051a:	23a0      	movs	r3, #160	; 0xa0
 800051c:	05db      	lsls	r3, r3, #23
 800051e:	2200      	movs	r2, #0
 8000520:	2180      	movs	r1, #128	; 0x80
 8000522:	0018      	movs	r0, r3
 8000524:	f000 fd7a 	bl	800101c <HAL_GPIO_WritePin>

	  	  	  		  break;
 8000528:	e0e9      	b.n	80006fe <main+0x49e>

	  	  	  	  case 6:
	  	  	  		HAL_GPIO_WritePin(A_7_GPIO_Port, A_7_Pin, 1);
 800052a:	2380      	movs	r3, #128	; 0x80
 800052c:	0059      	lsls	r1, r3, #1
 800052e:	23a0      	movs	r3, #160	; 0xa0
 8000530:	05db      	lsls	r3, r3, #23
 8000532:	2201      	movs	r2, #1
 8000534:	0018      	movs	r0, r3
 8000536:	f000 fd71 	bl	800101c <HAL_GPIO_WritePin>
	  				HAL_GPIO_WritePin(B_6_GPIO_Port, B_6_Pin, 1);
 800053a:	2380      	movs	r3, #128	; 0x80
 800053c:	01db      	lsls	r3, r3, #7
 800053e:	4835      	ldr	r0, [pc, #212]	; (8000614 <main+0x3b4>)
 8000540:	2201      	movs	r2, #1
 8000542:	0019      	movs	r1, r3
 8000544:	f000 fd6a 	bl	800101c <HAL_GPIO_WritePin>
	  				HAL_GPIO_WritePin(C_4_GPIO_Port, C_4_Pin, 1);
 8000548:	23a0      	movs	r3, #160	; 0xa0
 800054a:	05db      	lsls	r3, r3, #23
 800054c:	2201      	movs	r2, #1
 800054e:	2140      	movs	r1, #64	; 0x40
 8000550:	0018      	movs	r0, r3
 8000552:	f000 fd63 	bl	800101c <HAL_GPIO_WritePin>
	  				HAL_GPIO_WritePin(D_2_GPIO_Port, D_2_Pin, 1);
 8000556:	2380      	movs	r3, #128	; 0x80
 8000558:	0099      	lsls	r1, r3, #2
 800055a:	23a0      	movs	r3, #160	; 0xa0
 800055c:	05db      	lsls	r3, r3, #23
 800055e:	2201      	movs	r2, #1
 8000560:	0018      	movs	r0, r3
 8000562:	f000 fd5b 	bl	800101c <HAL_GPIO_WritePin>
	  				HAL_GPIO_WritePin(E_1_GPIO_Port, E_1_Pin, 0);
 8000566:	4b2c      	ldr	r3, [pc, #176]	; (8000618 <main+0x3b8>)
 8000568:	2200      	movs	r2, #0
 800056a:	2180      	movs	r1, #128	; 0x80
 800056c:	0018      	movs	r0, r3
 800056e:	f000 fd55 	bl	800101c <HAL_GPIO_WritePin>
	  				HAL_GPIO_WritePin(F_9_GPIO_Port, F_9_Pin, 1);
 8000572:	4b28      	ldr	r3, [pc, #160]	; (8000614 <main+0x3b4>)
 8000574:	2201      	movs	r2, #1
 8000576:	2110      	movs	r1, #16
 8000578:	0018      	movs	r0, r3
 800057a:	f000 fd4f 	bl	800101c <HAL_GPIO_WritePin>
	  				HAL_GPIO_WritePin(G_10_GPIO_Port, G_10_Pin, 1);
 800057e:	4b25      	ldr	r3, [pc, #148]	; (8000614 <main+0x3b4>)
 8000580:	2201      	movs	r2, #1
 8000582:	2120      	movs	r1, #32
 8000584:	0018      	movs	r0, r3
 8000586:	f000 fd49 	bl	800101c <HAL_GPIO_WritePin>
	  				HAL_GPIO_WritePin(DP_5_GPIO_Port, DP_5_Pin, 0);
 800058a:	23a0      	movs	r3, #160	; 0xa0
 800058c:	05db      	lsls	r3, r3, #23
 800058e:	2200      	movs	r2, #0
 8000590:	2180      	movs	r1, #128	; 0x80
 8000592:	0018      	movs	r0, r3
 8000594:	f000 fd42 	bl	800101c <HAL_GPIO_WritePin>

	  	  	  		  break;
 8000598:	e0b1      	b.n	80006fe <main+0x49e>

	  	  	  	  case 7:
	  	  	  		HAL_GPIO_WritePin(A_7_GPIO_Port, A_7_Pin, 0);
 800059a:	2380      	movs	r3, #128	; 0x80
 800059c:	0059      	lsls	r1, r3, #1
 800059e:	23a0      	movs	r3, #160	; 0xa0
 80005a0:	05db      	lsls	r3, r3, #23
 80005a2:	2200      	movs	r2, #0
 80005a4:	0018      	movs	r0, r3
 80005a6:	f000 fd39 	bl	800101c <HAL_GPIO_WritePin>
	  				HAL_GPIO_WritePin(B_6_GPIO_Port, B_6_Pin, 0);
 80005aa:	2380      	movs	r3, #128	; 0x80
 80005ac:	01db      	lsls	r3, r3, #7
 80005ae:	4819      	ldr	r0, [pc, #100]	; (8000614 <main+0x3b4>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	0019      	movs	r1, r3
 80005b4:	f000 fd32 	bl	800101c <HAL_GPIO_WritePin>
	  				HAL_GPIO_WritePin(C_4_GPIO_Port, C_4_Pin, 0);
 80005b8:	23a0      	movs	r3, #160	; 0xa0
 80005ba:	05db      	lsls	r3, r3, #23
 80005bc:	2200      	movs	r2, #0
 80005be:	2140      	movs	r1, #64	; 0x40
 80005c0:	0018      	movs	r0, r3
 80005c2:	f000 fd2b 	bl	800101c <HAL_GPIO_WritePin>
	  				HAL_GPIO_WritePin(D_2_GPIO_Port, D_2_Pin, 1);
 80005c6:	2380      	movs	r3, #128	; 0x80
 80005c8:	0099      	lsls	r1, r3, #2
 80005ca:	23a0      	movs	r3, #160	; 0xa0
 80005cc:	05db      	lsls	r3, r3, #23
 80005ce:	2201      	movs	r2, #1
 80005d0:	0018      	movs	r0, r3
 80005d2:	f000 fd23 	bl	800101c <HAL_GPIO_WritePin>
	  				HAL_GPIO_WritePin(E_1_GPIO_Port, E_1_Pin, 1);
 80005d6:	4b10      	ldr	r3, [pc, #64]	; (8000618 <main+0x3b8>)
 80005d8:	2201      	movs	r2, #1
 80005da:	2180      	movs	r1, #128	; 0x80
 80005dc:	0018      	movs	r0, r3
 80005de:	f000 fd1d 	bl	800101c <HAL_GPIO_WritePin>
	  				HAL_GPIO_WritePin(F_9_GPIO_Port, F_9_Pin, 1);
 80005e2:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <main+0x3b4>)
 80005e4:	2201      	movs	r2, #1
 80005e6:	2110      	movs	r1, #16
 80005e8:	0018      	movs	r0, r3
 80005ea:	f000 fd17 	bl	800101c <HAL_GPIO_WritePin>
	  				HAL_GPIO_WritePin(G_10_GPIO_Port, G_10_Pin, 0);
 80005ee:	4b09      	ldr	r3, [pc, #36]	; (8000614 <main+0x3b4>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	2120      	movs	r1, #32
 80005f4:	0018      	movs	r0, r3
 80005f6:	f000 fd11 	bl	800101c <HAL_GPIO_WritePin>
	  				HAL_GPIO_WritePin(DP_5_GPIO_Port, DP_5_Pin, 0);
 80005fa:	23a0      	movs	r3, #160	; 0xa0
 80005fc:	05db      	lsls	r3, r3, #23
 80005fe:	2200      	movs	r2, #0
 8000600:	2180      	movs	r1, #128	; 0x80
 8000602:	0018      	movs	r0, r3
 8000604:	f000 fd0a 	bl	800101c <HAL_GPIO_WritePin>

	  	  	  		  break;
 8000608:	e079      	b.n	80006fe <main+0x49e>
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	20000028 	.word	0x20000028
 8000610:	08001b90 	.word	0x08001b90
 8000614:	50000400 	.word	0x50000400
 8000618:	50000800 	.word	0x50000800

	  	  	  	  case 8:
	  	  	  		  HAL_GPIO_WritePin(A_7_GPIO_Port, A_7_Pin, 1);
 800061c:	2380      	movs	r3, #128	; 0x80
 800061e:	0059      	lsls	r1, r3, #1
 8000620:	23a0      	movs	r3, #160	; 0xa0
 8000622:	05db      	lsls	r3, r3, #23
 8000624:	2201      	movs	r2, #1
 8000626:	0018      	movs	r0, r3
 8000628:	f000 fcf8 	bl	800101c <HAL_GPIO_WritePin>
	  	  	  		  HAL_GPIO_WritePin(B_6_GPIO_Port, B_6_Pin, 1);
 800062c:	2380      	movs	r3, #128	; 0x80
 800062e:	01db      	lsls	r3, r3, #7
 8000630:	4833      	ldr	r0, [pc, #204]	; (8000700 <main+0x4a0>)
 8000632:	2201      	movs	r2, #1
 8000634:	0019      	movs	r1, r3
 8000636:	f000 fcf1 	bl	800101c <HAL_GPIO_WritePin>
	  	  	  		  HAL_GPIO_WritePin(C_4_GPIO_Port, C_4_Pin, 1);
 800063a:	23a0      	movs	r3, #160	; 0xa0
 800063c:	05db      	lsls	r3, r3, #23
 800063e:	2201      	movs	r2, #1
 8000640:	2140      	movs	r1, #64	; 0x40
 8000642:	0018      	movs	r0, r3
 8000644:	f000 fcea 	bl	800101c <HAL_GPIO_WritePin>
	  	  	  		  HAL_GPIO_WritePin(D_2_GPIO_Port, D_2_Pin, 1);
 8000648:	2380      	movs	r3, #128	; 0x80
 800064a:	0099      	lsls	r1, r3, #2
 800064c:	23a0      	movs	r3, #160	; 0xa0
 800064e:	05db      	lsls	r3, r3, #23
 8000650:	2201      	movs	r2, #1
 8000652:	0018      	movs	r0, r3
 8000654:	f000 fce2 	bl	800101c <HAL_GPIO_WritePin>
	  	  	  		  HAL_GPIO_WritePin(E_1_GPIO_Port, E_1_Pin, 1);
 8000658:	4b2a      	ldr	r3, [pc, #168]	; (8000704 <main+0x4a4>)
 800065a:	2201      	movs	r2, #1
 800065c:	2180      	movs	r1, #128	; 0x80
 800065e:	0018      	movs	r0, r3
 8000660:	f000 fcdc 	bl	800101c <HAL_GPIO_WritePin>
	  	  	  		  HAL_GPIO_WritePin(F_9_GPIO_Port, F_9_Pin, 1);
 8000664:	4b26      	ldr	r3, [pc, #152]	; (8000700 <main+0x4a0>)
 8000666:	2201      	movs	r2, #1
 8000668:	2110      	movs	r1, #16
 800066a:	0018      	movs	r0, r3
 800066c:	f000 fcd6 	bl	800101c <HAL_GPIO_WritePin>
	  	  	  		  HAL_GPIO_WritePin(G_10_GPIO_Port, G_10_Pin, 1);
 8000670:	4b23      	ldr	r3, [pc, #140]	; (8000700 <main+0x4a0>)
 8000672:	2201      	movs	r2, #1
 8000674:	2120      	movs	r1, #32
 8000676:	0018      	movs	r0, r3
 8000678:	f000 fcd0 	bl	800101c <HAL_GPIO_WritePin>
	  	  	  		  HAL_GPIO_WritePin(DP_5_GPIO_Port, DP_5_Pin, 0);
 800067c:	23a0      	movs	r3, #160	; 0xa0
 800067e:	05db      	lsls	r3, r3, #23
 8000680:	2200      	movs	r2, #0
 8000682:	2180      	movs	r1, #128	; 0x80
 8000684:	0018      	movs	r0, r3
 8000686:	f000 fcc9 	bl	800101c <HAL_GPIO_WritePin>

	  	  	  		  break;
 800068a:	e038      	b.n	80006fe <main+0x49e>

	  	  	  	  case 9:
	  	  	  		  HAL_GPIO_WritePin(A_7_GPIO_Port, A_7_Pin, 1);
 800068c:	2380      	movs	r3, #128	; 0x80
 800068e:	0059      	lsls	r1, r3, #1
 8000690:	23a0      	movs	r3, #160	; 0xa0
 8000692:	05db      	lsls	r3, r3, #23
 8000694:	2201      	movs	r2, #1
 8000696:	0018      	movs	r0, r3
 8000698:	f000 fcc0 	bl	800101c <HAL_GPIO_WritePin>
	  	  	  		  HAL_GPIO_WritePin(B_6_GPIO_Port, B_6_Pin, 0);
 800069c:	2380      	movs	r3, #128	; 0x80
 800069e:	01db      	lsls	r3, r3, #7
 80006a0:	4817      	ldr	r0, [pc, #92]	; (8000700 <main+0x4a0>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	0019      	movs	r1, r3
 80006a6:	f000 fcb9 	bl	800101c <HAL_GPIO_WritePin>
	  	  	  		  HAL_GPIO_WritePin(C_4_GPIO_Port, C_4_Pin, 1);
 80006aa:	23a0      	movs	r3, #160	; 0xa0
 80006ac:	05db      	lsls	r3, r3, #23
 80006ae:	2201      	movs	r2, #1
 80006b0:	2140      	movs	r1, #64	; 0x40
 80006b2:	0018      	movs	r0, r3
 80006b4:	f000 fcb2 	bl	800101c <HAL_GPIO_WritePin>
	  	  	  		  HAL_GPIO_WritePin(D_2_GPIO_Port, D_2_Pin, 1);
 80006b8:	2380      	movs	r3, #128	; 0x80
 80006ba:	0099      	lsls	r1, r3, #2
 80006bc:	23a0      	movs	r3, #160	; 0xa0
 80006be:	05db      	lsls	r3, r3, #23
 80006c0:	2201      	movs	r2, #1
 80006c2:	0018      	movs	r0, r3
 80006c4:	f000 fcaa 	bl	800101c <HAL_GPIO_WritePin>
	  	  	  		  HAL_GPIO_WritePin(E_1_GPIO_Port, E_1_Pin, 1);
 80006c8:	4b0e      	ldr	r3, [pc, #56]	; (8000704 <main+0x4a4>)
 80006ca:	2201      	movs	r2, #1
 80006cc:	2180      	movs	r1, #128	; 0x80
 80006ce:	0018      	movs	r0, r3
 80006d0:	f000 fca4 	bl	800101c <HAL_GPIO_WritePin>
	  	  	  		  HAL_GPIO_WritePin(F_9_GPIO_Port, F_9_Pin, 1);
 80006d4:	4b0a      	ldr	r3, [pc, #40]	; (8000700 <main+0x4a0>)
 80006d6:	2201      	movs	r2, #1
 80006d8:	2110      	movs	r1, #16
 80006da:	0018      	movs	r0, r3
 80006dc:	f000 fc9e 	bl	800101c <HAL_GPIO_WritePin>
	  	  	  		  HAL_GPIO_WritePin(G_10_GPIO_Port, G_10_Pin, 1);
 80006e0:	4b07      	ldr	r3, [pc, #28]	; (8000700 <main+0x4a0>)
 80006e2:	2201      	movs	r2, #1
 80006e4:	2120      	movs	r1, #32
 80006e6:	0018      	movs	r0, r3
 80006e8:	f000 fc98 	bl	800101c <HAL_GPIO_WritePin>
	  	  	  		  HAL_GPIO_WritePin(DP_5_GPIO_Port, DP_5_Pin, 0);
 80006ec:	23a0      	movs	r3, #160	; 0xa0
 80006ee:	05db      	lsls	r3, r3, #23
 80006f0:	2200      	movs	r2, #0
 80006f2:	2180      	movs	r1, #128	; 0x80
 80006f4:	0018      	movs	r0, r3
 80006f6:	f000 fc91 	bl	800101c <HAL_GPIO_WritePin>

	  	  	  		  break;
 80006fa:	e000      	b.n	80006fe <main+0x49e>
	  	  	  	  default:

	  	  	  		  break;
 80006fc:	46c0      	nop			; (mov r8, r8)
	  HAL_Delay(1);
 80006fe:	e5b7      	b.n	8000270 <main+0x10>
 8000700:	50000400 	.word	0x50000400
 8000704:	50000800 	.word	0x50000800

08000708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000708:	b590      	push	{r4, r7, lr}
 800070a:	b095      	sub	sp, #84	; 0x54
 800070c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070e:	2414      	movs	r4, #20
 8000710:	193b      	adds	r3, r7, r4
 8000712:	0018      	movs	r0, r3
 8000714:	233c      	movs	r3, #60	; 0x3c
 8000716:	001a      	movs	r2, r3
 8000718:	2100      	movs	r1, #0
 800071a:	f001 fa25 	bl	8001b68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	0018      	movs	r0, r3
 8000722:	2310      	movs	r3, #16
 8000724:	001a      	movs	r2, r3
 8000726:	2100      	movs	r1, #0
 8000728:	f001 fa1e 	bl	8001b68 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800072c:	2380      	movs	r3, #128	; 0x80
 800072e:	009b      	lsls	r3, r3, #2
 8000730:	0018      	movs	r0, r3
 8000732:	f000 fcc5 	bl	80010c0 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000736:	193b      	adds	r3, r7, r4
 8000738:	2202      	movs	r2, #2
 800073a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800073c:	193b      	adds	r3, r7, r4
 800073e:	2280      	movs	r2, #128	; 0x80
 8000740:	0052      	lsls	r2, r2, #1
 8000742:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000744:	0021      	movs	r1, r4
 8000746:	187b      	adds	r3, r7, r1
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800074c:	187b      	adds	r3, r7, r1
 800074e:	2240      	movs	r2, #64	; 0x40
 8000750:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000752:	187b      	adds	r3, r7, r1
 8000754:	2202      	movs	r2, #2
 8000756:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000758:	187b      	adds	r3, r7, r1
 800075a:	2202      	movs	r2, #2
 800075c:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800075e:	187b      	adds	r3, r7, r1
 8000760:	2200      	movs	r2, #0
 8000762:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000764:	187b      	adds	r3, r7, r1
 8000766:	2208      	movs	r2, #8
 8000768:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800076a:	187b      	adds	r3, r7, r1
 800076c:	2280      	movs	r2, #128	; 0x80
 800076e:	0292      	lsls	r2, r2, #10
 8000770:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000772:	187b      	adds	r3, r7, r1
 8000774:	2280      	movs	r2, #128	; 0x80
 8000776:	0492      	lsls	r2, r2, #18
 8000778:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800077a:	187b      	adds	r3, r7, r1
 800077c:	2280      	movs	r2, #128	; 0x80
 800077e:	0592      	lsls	r2, r2, #22
 8000780:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000782:	187b      	adds	r3, r7, r1
 8000784:	0018      	movs	r0, r3
 8000786:	f000 fcdb 	bl	8001140 <HAL_RCC_OscConfig>
 800078a:	1e03      	subs	r3, r0, #0
 800078c:	d001      	beq.n	8000792 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800078e:	f000 f8bd 	bl	800090c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000792:	1d3b      	adds	r3, r7, #4
 8000794:	2207      	movs	r2, #7
 8000796:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000798:	1d3b      	adds	r3, r7, #4
 800079a:	2202      	movs	r2, #2
 800079c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800079e:	1d3b      	adds	r3, r7, #4
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007a4:	1d3b      	adds	r3, r7, #4
 80007a6:	2200      	movs	r2, #0
 80007a8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	2102      	movs	r1, #2
 80007ae:	0018      	movs	r0, r3
 80007b0:	f001 f82c 	bl	800180c <HAL_RCC_ClockConfig>
 80007b4:	1e03      	subs	r3, r0, #0
 80007b6:	d001      	beq.n	80007bc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80007b8:	f000 f8a8 	bl	800090c <Error_Handler>
  }
}
 80007bc:	46c0      	nop			; (mov r8, r8)
 80007be:	46bd      	mov	sp, r7
 80007c0:	b015      	add	sp, #84	; 0x54
 80007c2:	bd90      	pop	{r4, r7, pc}

080007c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c4:	b590      	push	{r4, r7, lr}
 80007c6:	b089      	sub	sp, #36	; 0x24
 80007c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ca:	240c      	movs	r4, #12
 80007cc:	193b      	adds	r3, r7, r4
 80007ce:	0018      	movs	r0, r3
 80007d0:	2314      	movs	r3, #20
 80007d2:	001a      	movs	r2, r3
 80007d4:	2100      	movs	r1, #0
 80007d6:	f001 f9c7 	bl	8001b68 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007da:	4b48      	ldr	r3, [pc, #288]	; (80008fc <MX_GPIO_Init+0x138>)
 80007dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007de:	4b47      	ldr	r3, [pc, #284]	; (80008fc <MX_GPIO_Init+0x138>)
 80007e0:	2104      	movs	r1, #4
 80007e2:	430a      	orrs	r2, r1
 80007e4:	635a      	str	r2, [r3, #52]	; 0x34
 80007e6:	4b45      	ldr	r3, [pc, #276]	; (80008fc <MX_GPIO_Init+0x138>)
 80007e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007ea:	2204      	movs	r2, #4
 80007ec:	4013      	ands	r3, r2
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f2:	4b42      	ldr	r3, [pc, #264]	; (80008fc <MX_GPIO_Init+0x138>)
 80007f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007f6:	4b41      	ldr	r3, [pc, #260]	; (80008fc <MX_GPIO_Init+0x138>)
 80007f8:	2101      	movs	r1, #1
 80007fa:	430a      	orrs	r2, r1
 80007fc:	635a      	str	r2, [r3, #52]	; 0x34
 80007fe:	4b3f      	ldr	r3, [pc, #252]	; (80008fc <MX_GPIO_Init+0x138>)
 8000800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000802:	2201      	movs	r2, #1
 8000804:	4013      	ands	r3, r2
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800080a:	4b3c      	ldr	r3, [pc, #240]	; (80008fc <MX_GPIO_Init+0x138>)
 800080c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800080e:	4b3b      	ldr	r3, [pc, #236]	; (80008fc <MX_GPIO_Init+0x138>)
 8000810:	2102      	movs	r1, #2
 8000812:	430a      	orrs	r2, r1
 8000814:	635a      	str	r2, [r3, #52]	; 0x34
 8000816:	4b39      	ldr	r3, [pc, #228]	; (80008fc <MX_GPIO_Init+0x138>)
 8000818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800081a:	2202      	movs	r2, #2
 800081c:	4013      	ands	r3, r2
 800081e:	603b      	str	r3, [r7, #0]
 8000820:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, C_4_Pin|DP_5_Pin|A_7_Pin|D_2_Pin, GPIO_PIN_RESET);
 8000822:	23f0      	movs	r3, #240	; 0xf0
 8000824:	0099      	lsls	r1, r3, #2
 8000826:	23a0      	movs	r3, #160	; 0xa0
 8000828:	05db      	lsls	r3, r3, #23
 800082a:	2200      	movs	r2, #0
 800082c:	0018      	movs	r0, r3
 800082e:	f000 fbf5 	bl	800101c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, B_6_Pin|F_9_Pin|G_10_Pin, GPIO_PIN_RESET);
 8000832:	4933      	ldr	r1, [pc, #204]	; (8000900 <MX_GPIO_Init+0x13c>)
 8000834:	4b33      	ldr	r3, [pc, #204]	; (8000904 <MX_GPIO_Init+0x140>)
 8000836:	2200      	movs	r2, #0
 8000838:	0018      	movs	r0, r3
 800083a:	f000 fbef 	bl	800101c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(E_1_GPIO_Port, E_1_Pin, GPIO_PIN_RESET);
 800083e:	4b32      	ldr	r3, [pc, #200]	; (8000908 <MX_GPIO_Init+0x144>)
 8000840:	2200      	movs	r2, #0
 8000842:	2180      	movs	r1, #128	; 0x80
 8000844:	0018      	movs	r0, r3
 8000846:	f000 fbe9 	bl	800101c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800084a:	193b      	adds	r3, r7, r4
 800084c:	2280      	movs	r2, #128	; 0x80
 800084e:	0192      	lsls	r2, r2, #6
 8000850:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000852:	193b      	adds	r3, r7, r4
 8000854:	2288      	movs	r2, #136	; 0x88
 8000856:	0352      	lsls	r2, r2, #13
 8000858:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	193b      	adds	r3, r7, r4
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000860:	193b      	adds	r3, r7, r4
 8000862:	4a29      	ldr	r2, [pc, #164]	; (8000908 <MX_GPIO_Init+0x144>)
 8000864:	0019      	movs	r1, r3
 8000866:	0010      	movs	r0, r2
 8000868:	f000 fa6c 	bl	8000d44 <HAL_GPIO_Init>

  /*Configure GPIO pins : C_4_Pin DP_5_Pin A_7_Pin D_2_Pin */
  GPIO_InitStruct.Pin = C_4_Pin|DP_5_Pin|A_7_Pin|D_2_Pin;
 800086c:	0021      	movs	r1, r4
 800086e:	193b      	adds	r3, r7, r4
 8000870:	22f0      	movs	r2, #240	; 0xf0
 8000872:	0092      	lsls	r2, r2, #2
 8000874:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000876:	000c      	movs	r4, r1
 8000878:	193b      	adds	r3, r7, r4
 800087a:	2201      	movs	r2, #1
 800087c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	193b      	adds	r3, r7, r4
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000884:	193b      	adds	r3, r7, r4
 8000886:	2200      	movs	r2, #0
 8000888:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088a:	193a      	adds	r2, r7, r4
 800088c:	23a0      	movs	r3, #160	; 0xa0
 800088e:	05db      	lsls	r3, r3, #23
 8000890:	0011      	movs	r1, r2
 8000892:	0018      	movs	r0, r3
 8000894:	f000 fa56 	bl	8000d44 <HAL_GPIO_Init>

  /*Configure GPIO pins : B_6_Pin F_9_Pin G_10_Pin */
  GPIO_InitStruct.Pin = B_6_Pin|F_9_Pin|G_10_Pin;
 8000898:	193b      	adds	r3, r7, r4
 800089a:	4a19      	ldr	r2, [pc, #100]	; (8000900 <MX_GPIO_Init+0x13c>)
 800089c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089e:	193b      	adds	r3, r7, r4
 80008a0:	2201      	movs	r2, #1
 80008a2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	193b      	adds	r3, r7, r4
 80008a6:	2200      	movs	r2, #0
 80008a8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008aa:	193b      	adds	r3, r7, r4
 80008ac:	2200      	movs	r2, #0
 80008ae:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b0:	193b      	adds	r3, r7, r4
 80008b2:	4a14      	ldr	r2, [pc, #80]	; (8000904 <MX_GPIO_Init+0x140>)
 80008b4:	0019      	movs	r1, r3
 80008b6:	0010      	movs	r0, r2
 80008b8:	f000 fa44 	bl	8000d44 <HAL_GPIO_Init>

  /*Configure GPIO pin : E_1_Pin */
  GPIO_InitStruct.Pin = E_1_Pin;
 80008bc:	0021      	movs	r1, r4
 80008be:	187b      	adds	r3, r7, r1
 80008c0:	2280      	movs	r2, #128	; 0x80
 80008c2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c4:	187b      	adds	r3, r7, r1
 80008c6:	2201      	movs	r2, #1
 80008c8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	187b      	adds	r3, r7, r1
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d0:	187b      	adds	r3, r7, r1
 80008d2:	2200      	movs	r2, #0
 80008d4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(E_1_GPIO_Port, &GPIO_InitStruct);
 80008d6:	187b      	adds	r3, r7, r1
 80008d8:	4a0b      	ldr	r2, [pc, #44]	; (8000908 <MX_GPIO_Init+0x144>)
 80008da:	0019      	movs	r1, r3
 80008dc:	0010      	movs	r0, r2
 80008de:	f000 fa31 	bl	8000d44 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80008e2:	2200      	movs	r2, #0
 80008e4:	2100      	movs	r1, #0
 80008e6:	2007      	movs	r0, #7
 80008e8:	f000 f9fa 	bl	8000ce0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80008ec:	2007      	movs	r0, #7
 80008ee:	f000 fa0c 	bl	8000d0a <HAL_NVIC_EnableIRQ>

}
 80008f2:	46c0      	nop			; (mov r8, r8)
 80008f4:	46bd      	mov	sp, r7
 80008f6:	b009      	add	sp, #36	; 0x24
 80008f8:	bd90      	pop	{r4, r7, pc}
 80008fa:	46c0      	nop			; (mov r8, r8)
 80008fc:	40021000 	.word	0x40021000
 8000900:	00004030 	.word	0x00004030
 8000904:	50000400 	.word	0x50000400
 8000908:	50000800 	.word	0x50000800

0800090c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000910:	b672      	cpsid	i
}
 8000912:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000914:	e7fe      	b.n	8000914 <Error_Handler+0x8>
	...

08000918 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800091e:	4b11      	ldr	r3, [pc, #68]	; (8000964 <HAL_MspInit+0x4c>)
 8000920:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000922:	4b10      	ldr	r3, [pc, #64]	; (8000964 <HAL_MspInit+0x4c>)
 8000924:	2101      	movs	r1, #1
 8000926:	430a      	orrs	r2, r1
 8000928:	641a      	str	r2, [r3, #64]	; 0x40
 800092a:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <HAL_MspInit+0x4c>)
 800092c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092e:	2201      	movs	r2, #1
 8000930:	4013      	ands	r3, r2
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000936:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <HAL_MspInit+0x4c>)
 8000938:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800093a:	4b0a      	ldr	r3, [pc, #40]	; (8000964 <HAL_MspInit+0x4c>)
 800093c:	2180      	movs	r1, #128	; 0x80
 800093e:	0549      	lsls	r1, r1, #21
 8000940:	430a      	orrs	r2, r1
 8000942:	63da      	str	r2, [r3, #60]	; 0x3c
 8000944:	4b07      	ldr	r3, [pc, #28]	; (8000964 <HAL_MspInit+0x4c>)
 8000946:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000948:	2380      	movs	r3, #128	; 0x80
 800094a:	055b      	lsls	r3, r3, #21
 800094c:	4013      	ands	r3, r2
 800094e:	603b      	str	r3, [r7, #0]
 8000950:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000952:	23c0      	movs	r3, #192	; 0xc0
 8000954:	00db      	lsls	r3, r3, #3
 8000956:	0018      	movs	r0, r3
 8000958:	f000 f900 	bl	8000b5c <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800095c:	46c0      	nop			; (mov r8, r8)
 800095e:	46bd      	mov	sp, r7
 8000960:	b002      	add	sp, #8
 8000962:	bd80      	pop	{r7, pc}
 8000964:	40021000 	.word	0x40021000

08000968 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800096c:	e7fe      	b.n	800096c <NMI_Handler+0x4>

0800096e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800096e:	b580      	push	{r7, lr}
 8000970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000972:	e7fe      	b.n	8000972 <HardFault_Handler+0x4>

08000974 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000978:	46c0      	nop			; (mov r8, r8)
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}

0800097e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800097e:	b580      	push	{r7, lr}
 8000980:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000982:	46c0      	nop			; (mov r8, r8)
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}

08000988 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800098c:	f000 f8a6 	bl	8000adc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000990:	46c0      	nop			; (mov r8, r8)
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}

08000996 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000996:	b580      	push	{r7, lr}
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 800099a:	2380      	movs	r3, #128	; 0x80
 800099c:	019b      	lsls	r3, r3, #6
 800099e:	0018      	movs	r0, r3
 80009a0:	f000 fb5a 	bl	8001058 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80009a4:	46c0      	nop			; (mov r8, r8)
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}

080009aa <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009aa:	b580      	push	{r7, lr}
 80009ac:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009ae:	46c0      	nop			; (mov r8, r8)
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009b4:	480d      	ldr	r0, [pc, #52]	; (80009ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009b6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80009b8:	f7ff fff7 	bl	80009aa <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009bc:	480c      	ldr	r0, [pc, #48]	; (80009f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80009be:	490d      	ldr	r1, [pc, #52]	; (80009f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009c0:	4a0d      	ldr	r2, [pc, #52]	; (80009f8 <LoopForever+0xe>)
  movs r3, #0
 80009c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009c4:	e002      	b.n	80009cc <LoopCopyDataInit>

080009c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ca:	3304      	adds	r3, #4

080009cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009d0:	d3f9      	bcc.n	80009c6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009d2:	4a0a      	ldr	r2, [pc, #40]	; (80009fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80009d4:	4c0a      	ldr	r4, [pc, #40]	; (8000a00 <LoopForever+0x16>)
  movs r3, #0
 80009d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009d8:	e001      	b.n	80009de <LoopFillZerobss>

080009da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009dc:	3204      	adds	r2, #4

080009de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009e0:	d3fb      	bcc.n	80009da <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009e2:	f001 f89d 	bl	8001b20 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80009e6:	f7ff fc3b 	bl	8000260 <main>

080009ea <LoopForever>:

LoopForever:
  b LoopForever
 80009ea:	e7fe      	b.n	80009ea <LoopForever>
  ldr   r0, =_estack
 80009ec:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 80009f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009f4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009f8:	08001c00 	.word	0x08001c00
  ldr r2, =_sbss
 80009fc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a00:	20000030 	.word	0x20000030

08000a04 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a04:	e7fe      	b.n	8000a04 <ADC1_COMP_IRQHandler>
	...

08000a08 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a0e:	1dfb      	adds	r3, r7, #7
 8000a10:	2200      	movs	r2, #0
 8000a12:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a14:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <HAL_Init+0x3c>)
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	4b0a      	ldr	r3, [pc, #40]	; (8000a44 <HAL_Init+0x3c>)
 8000a1a:	2180      	movs	r1, #128	; 0x80
 8000a1c:	0049      	lsls	r1, r1, #1
 8000a1e:	430a      	orrs	r2, r1
 8000a20:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a22:	2003      	movs	r0, #3
 8000a24:	f000 f810 	bl	8000a48 <HAL_InitTick>
 8000a28:	1e03      	subs	r3, r0, #0
 8000a2a:	d003      	beq.n	8000a34 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000a2c:	1dfb      	adds	r3, r7, #7
 8000a2e:	2201      	movs	r2, #1
 8000a30:	701a      	strb	r2, [r3, #0]
 8000a32:	e001      	b.n	8000a38 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000a34:	f7ff ff70 	bl	8000918 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a38:	1dfb      	adds	r3, r7, #7
 8000a3a:	781b      	ldrb	r3, [r3, #0]
}
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	b002      	add	sp, #8
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40022000 	.word	0x40022000

08000a48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a48:	b590      	push	{r4, r7, lr}
 8000a4a:	b085      	sub	sp, #20
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a50:	230f      	movs	r3, #15
 8000a52:	18fb      	adds	r3, r7, r3
 8000a54:	2200      	movs	r2, #0
 8000a56:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000a58:	4b1d      	ldr	r3, [pc, #116]	; (8000ad0 <HAL_InitTick+0x88>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d02b      	beq.n	8000ab8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000a60:	4b1c      	ldr	r3, [pc, #112]	; (8000ad4 <HAL_InitTick+0x8c>)
 8000a62:	681c      	ldr	r4, [r3, #0]
 8000a64:	4b1a      	ldr	r3, [pc, #104]	; (8000ad0 <HAL_InitTick+0x88>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	0019      	movs	r1, r3
 8000a6a:	23fa      	movs	r3, #250	; 0xfa
 8000a6c:	0098      	lsls	r0, r3, #2
 8000a6e:	f7ff fb49 	bl	8000104 <__udivsi3>
 8000a72:	0003      	movs	r3, r0
 8000a74:	0019      	movs	r1, r3
 8000a76:	0020      	movs	r0, r4
 8000a78:	f7ff fb44 	bl	8000104 <__udivsi3>
 8000a7c:	0003      	movs	r3, r0
 8000a7e:	0018      	movs	r0, r3
 8000a80:	f000 f953 	bl	8000d2a <HAL_SYSTICK_Config>
 8000a84:	1e03      	subs	r3, r0, #0
 8000a86:	d112      	bne.n	8000aae <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	2b03      	cmp	r3, #3
 8000a8c:	d80a      	bhi.n	8000aa4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a8e:	6879      	ldr	r1, [r7, #4]
 8000a90:	2301      	movs	r3, #1
 8000a92:	425b      	negs	r3, r3
 8000a94:	2200      	movs	r2, #0
 8000a96:	0018      	movs	r0, r3
 8000a98:	f000 f922 	bl	8000ce0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a9c:	4b0e      	ldr	r3, [pc, #56]	; (8000ad8 <HAL_InitTick+0x90>)
 8000a9e:	687a      	ldr	r2, [r7, #4]
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	e00d      	b.n	8000ac0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000aa4:	230f      	movs	r3, #15
 8000aa6:	18fb      	adds	r3, r7, r3
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	701a      	strb	r2, [r3, #0]
 8000aac:	e008      	b.n	8000ac0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000aae:	230f      	movs	r3, #15
 8000ab0:	18fb      	adds	r3, r7, r3
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	701a      	strb	r2, [r3, #0]
 8000ab6:	e003      	b.n	8000ac0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ab8:	230f      	movs	r3, #15
 8000aba:	18fb      	adds	r3, r7, r3
 8000abc:	2201      	movs	r2, #1
 8000abe:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000ac0:	230f      	movs	r3, #15
 8000ac2:	18fb      	adds	r3, r7, r3
 8000ac4:	781b      	ldrb	r3, [r3, #0]
}
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	b005      	add	sp, #20
 8000acc:	bd90      	pop	{r4, r7, pc}
 8000ace:	46c0      	nop			; (mov r8, r8)
 8000ad0:	20000008 	.word	0x20000008
 8000ad4:	20000000 	.word	0x20000000
 8000ad8:	20000004 	.word	0x20000004

08000adc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ae0:	4b05      	ldr	r3, [pc, #20]	; (8000af8 <HAL_IncTick+0x1c>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	001a      	movs	r2, r3
 8000ae6:	4b05      	ldr	r3, [pc, #20]	; (8000afc <HAL_IncTick+0x20>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	18d2      	adds	r2, r2, r3
 8000aec:	4b03      	ldr	r3, [pc, #12]	; (8000afc <HAL_IncTick+0x20>)
 8000aee:	601a      	str	r2, [r3, #0]
}
 8000af0:	46c0      	nop			; (mov r8, r8)
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	46c0      	nop			; (mov r8, r8)
 8000af8:	20000008 	.word	0x20000008
 8000afc:	2000002c 	.word	0x2000002c

08000b00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  return uwTick;
 8000b04:	4b02      	ldr	r3, [pc, #8]	; (8000b10 <HAL_GetTick+0x10>)
 8000b06:	681b      	ldr	r3, [r3, #0]
}
 8000b08:	0018      	movs	r0, r3
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	46c0      	nop			; (mov r8, r8)
 8000b10:	2000002c 	.word	0x2000002c

08000b14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b1c:	f7ff fff0 	bl	8000b00 <HAL_GetTick>
 8000b20:	0003      	movs	r3, r0
 8000b22:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	d005      	beq.n	8000b3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b2e:	4b0a      	ldr	r3, [pc, #40]	; (8000b58 <HAL_Delay+0x44>)
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	001a      	movs	r2, r3
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	189b      	adds	r3, r3, r2
 8000b38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b3a:	46c0      	nop			; (mov r8, r8)
 8000b3c:	f7ff ffe0 	bl	8000b00 <HAL_GetTick>
 8000b40:	0002      	movs	r2, r0
 8000b42:	68bb      	ldr	r3, [r7, #8]
 8000b44:	1ad3      	subs	r3, r2, r3
 8000b46:	68fa      	ldr	r2, [r7, #12]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d8f7      	bhi.n	8000b3c <HAL_Delay+0x28>
  {
  }
}
 8000b4c:	46c0      	nop			; (mov r8, r8)
 8000b4e:	46c0      	nop			; (mov r8, r8)
 8000b50:	46bd      	mov	sp, r7
 8000b52:	b004      	add	sp, #16
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	46c0      	nop			; (mov r8, r8)
 8000b58:	20000008 	.word	0x20000008

08000b5c <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000b64:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a06      	ldr	r2, [pc, #24]	; (8000b84 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	0019      	movs	r1, r3
 8000b6e:	4b04      	ldr	r3, [pc, #16]	; (8000b80 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000b70:	687a      	ldr	r2, [r7, #4]
 8000b72:	430a      	orrs	r2, r1
 8000b74:	601a      	str	r2, [r3, #0]
}
 8000b76:	46c0      	nop			; (mov r8, r8)
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	b002      	add	sp, #8
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	46c0      	nop			; (mov r8, r8)
 8000b80:	40010000 	.word	0x40010000
 8000b84:	fffff9ff 	.word	0xfffff9ff

08000b88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	0002      	movs	r2, r0
 8000b90:	1dfb      	adds	r3, r7, #7
 8000b92:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b94:	1dfb      	adds	r3, r7, #7
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	2b7f      	cmp	r3, #127	; 0x7f
 8000b9a:	d809      	bhi.n	8000bb0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b9c:	1dfb      	adds	r3, r7, #7
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	001a      	movs	r2, r3
 8000ba2:	231f      	movs	r3, #31
 8000ba4:	401a      	ands	r2, r3
 8000ba6:	4b04      	ldr	r3, [pc, #16]	; (8000bb8 <__NVIC_EnableIRQ+0x30>)
 8000ba8:	2101      	movs	r1, #1
 8000baa:	4091      	lsls	r1, r2
 8000bac:	000a      	movs	r2, r1
 8000bae:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000bb0:	46c0      	nop			; (mov r8, r8)
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	b002      	add	sp, #8
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	e000e100 	.word	0xe000e100

08000bbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bbc:	b590      	push	{r4, r7, lr}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	0002      	movs	r2, r0
 8000bc4:	6039      	str	r1, [r7, #0]
 8000bc6:	1dfb      	adds	r3, r7, #7
 8000bc8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bca:	1dfb      	adds	r3, r7, #7
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	2b7f      	cmp	r3, #127	; 0x7f
 8000bd0:	d828      	bhi.n	8000c24 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bd2:	4a2f      	ldr	r2, [pc, #188]	; (8000c90 <__NVIC_SetPriority+0xd4>)
 8000bd4:	1dfb      	adds	r3, r7, #7
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	b25b      	sxtb	r3, r3
 8000bda:	089b      	lsrs	r3, r3, #2
 8000bdc:	33c0      	adds	r3, #192	; 0xc0
 8000bde:	009b      	lsls	r3, r3, #2
 8000be0:	589b      	ldr	r3, [r3, r2]
 8000be2:	1dfa      	adds	r2, r7, #7
 8000be4:	7812      	ldrb	r2, [r2, #0]
 8000be6:	0011      	movs	r1, r2
 8000be8:	2203      	movs	r2, #3
 8000bea:	400a      	ands	r2, r1
 8000bec:	00d2      	lsls	r2, r2, #3
 8000bee:	21ff      	movs	r1, #255	; 0xff
 8000bf0:	4091      	lsls	r1, r2
 8000bf2:	000a      	movs	r2, r1
 8000bf4:	43d2      	mvns	r2, r2
 8000bf6:	401a      	ands	r2, r3
 8000bf8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	019b      	lsls	r3, r3, #6
 8000bfe:	22ff      	movs	r2, #255	; 0xff
 8000c00:	401a      	ands	r2, r3
 8000c02:	1dfb      	adds	r3, r7, #7
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	0018      	movs	r0, r3
 8000c08:	2303      	movs	r3, #3
 8000c0a:	4003      	ands	r3, r0
 8000c0c:	00db      	lsls	r3, r3, #3
 8000c0e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c10:	481f      	ldr	r0, [pc, #124]	; (8000c90 <__NVIC_SetPriority+0xd4>)
 8000c12:	1dfb      	adds	r3, r7, #7
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	b25b      	sxtb	r3, r3
 8000c18:	089b      	lsrs	r3, r3, #2
 8000c1a:	430a      	orrs	r2, r1
 8000c1c:	33c0      	adds	r3, #192	; 0xc0
 8000c1e:	009b      	lsls	r3, r3, #2
 8000c20:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c22:	e031      	b.n	8000c88 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c24:	4a1b      	ldr	r2, [pc, #108]	; (8000c94 <__NVIC_SetPriority+0xd8>)
 8000c26:	1dfb      	adds	r3, r7, #7
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	0019      	movs	r1, r3
 8000c2c:	230f      	movs	r3, #15
 8000c2e:	400b      	ands	r3, r1
 8000c30:	3b08      	subs	r3, #8
 8000c32:	089b      	lsrs	r3, r3, #2
 8000c34:	3306      	adds	r3, #6
 8000c36:	009b      	lsls	r3, r3, #2
 8000c38:	18d3      	adds	r3, r2, r3
 8000c3a:	3304      	adds	r3, #4
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	1dfa      	adds	r2, r7, #7
 8000c40:	7812      	ldrb	r2, [r2, #0]
 8000c42:	0011      	movs	r1, r2
 8000c44:	2203      	movs	r2, #3
 8000c46:	400a      	ands	r2, r1
 8000c48:	00d2      	lsls	r2, r2, #3
 8000c4a:	21ff      	movs	r1, #255	; 0xff
 8000c4c:	4091      	lsls	r1, r2
 8000c4e:	000a      	movs	r2, r1
 8000c50:	43d2      	mvns	r2, r2
 8000c52:	401a      	ands	r2, r3
 8000c54:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	019b      	lsls	r3, r3, #6
 8000c5a:	22ff      	movs	r2, #255	; 0xff
 8000c5c:	401a      	ands	r2, r3
 8000c5e:	1dfb      	adds	r3, r7, #7
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	0018      	movs	r0, r3
 8000c64:	2303      	movs	r3, #3
 8000c66:	4003      	ands	r3, r0
 8000c68:	00db      	lsls	r3, r3, #3
 8000c6a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c6c:	4809      	ldr	r0, [pc, #36]	; (8000c94 <__NVIC_SetPriority+0xd8>)
 8000c6e:	1dfb      	adds	r3, r7, #7
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	001c      	movs	r4, r3
 8000c74:	230f      	movs	r3, #15
 8000c76:	4023      	ands	r3, r4
 8000c78:	3b08      	subs	r3, #8
 8000c7a:	089b      	lsrs	r3, r3, #2
 8000c7c:	430a      	orrs	r2, r1
 8000c7e:	3306      	adds	r3, #6
 8000c80:	009b      	lsls	r3, r3, #2
 8000c82:	18c3      	adds	r3, r0, r3
 8000c84:	3304      	adds	r3, #4
 8000c86:	601a      	str	r2, [r3, #0]
}
 8000c88:	46c0      	nop			; (mov r8, r8)
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	b003      	add	sp, #12
 8000c8e:	bd90      	pop	{r4, r7, pc}
 8000c90:	e000e100 	.word	0xe000e100
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	1e5a      	subs	r2, r3, #1
 8000ca4:	2380      	movs	r3, #128	; 0x80
 8000ca6:	045b      	lsls	r3, r3, #17
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	d301      	bcc.n	8000cb0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cac:	2301      	movs	r3, #1
 8000cae:	e010      	b.n	8000cd2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cb0:	4b0a      	ldr	r3, [pc, #40]	; (8000cdc <SysTick_Config+0x44>)
 8000cb2:	687a      	ldr	r2, [r7, #4]
 8000cb4:	3a01      	subs	r2, #1
 8000cb6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cb8:	2301      	movs	r3, #1
 8000cba:	425b      	negs	r3, r3
 8000cbc:	2103      	movs	r1, #3
 8000cbe:	0018      	movs	r0, r3
 8000cc0:	f7ff ff7c 	bl	8000bbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cc4:	4b05      	ldr	r3, [pc, #20]	; (8000cdc <SysTick_Config+0x44>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cca:	4b04      	ldr	r3, [pc, #16]	; (8000cdc <SysTick_Config+0x44>)
 8000ccc:	2207      	movs	r2, #7
 8000cce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cd0:	2300      	movs	r3, #0
}
 8000cd2:	0018      	movs	r0, r3
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	b002      	add	sp, #8
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	46c0      	nop			; (mov r8, r8)
 8000cdc:	e000e010 	.word	0xe000e010

08000ce0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	60b9      	str	r1, [r7, #8]
 8000ce8:	607a      	str	r2, [r7, #4]
 8000cea:	210f      	movs	r1, #15
 8000cec:	187b      	adds	r3, r7, r1
 8000cee:	1c02      	adds	r2, r0, #0
 8000cf0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000cf2:	68ba      	ldr	r2, [r7, #8]
 8000cf4:	187b      	adds	r3, r7, r1
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	b25b      	sxtb	r3, r3
 8000cfa:	0011      	movs	r1, r2
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	f7ff ff5d 	bl	8000bbc <__NVIC_SetPriority>
}
 8000d02:	46c0      	nop			; (mov r8, r8)
 8000d04:	46bd      	mov	sp, r7
 8000d06:	b004      	add	sp, #16
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b082      	sub	sp, #8
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	0002      	movs	r2, r0
 8000d12:	1dfb      	adds	r3, r7, #7
 8000d14:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d16:	1dfb      	adds	r3, r7, #7
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	b25b      	sxtb	r3, r3
 8000d1c:	0018      	movs	r0, r3
 8000d1e:	f7ff ff33 	bl	8000b88 <__NVIC_EnableIRQ>
}
 8000d22:	46c0      	nop			; (mov r8, r8)
 8000d24:	46bd      	mov	sp, r7
 8000d26:	b002      	add	sp, #8
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b082      	sub	sp, #8
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	0018      	movs	r0, r3
 8000d36:	f7ff ffaf 	bl	8000c98 <SysTick_Config>
 8000d3a:	0003      	movs	r3, r0
}
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	b002      	add	sp, #8
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b086      	sub	sp, #24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d52:	e14d      	b.n	8000ff0 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2101      	movs	r1, #1
 8000d5a:	697a      	ldr	r2, [r7, #20]
 8000d5c:	4091      	lsls	r1, r2
 8000d5e:	000a      	movs	r2, r1
 8000d60:	4013      	ands	r3, r2
 8000d62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d100      	bne.n	8000d6c <HAL_GPIO_Init+0x28>
 8000d6a:	e13e      	b.n	8000fea <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	2203      	movs	r2, #3
 8000d72:	4013      	ands	r3, r2
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d005      	beq.n	8000d84 <HAL_GPIO_Init+0x40>
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	2203      	movs	r2, #3
 8000d7e:	4013      	ands	r3, r2
 8000d80:	2b02      	cmp	r3, #2
 8000d82:	d130      	bne.n	8000de6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	689b      	ldr	r3, [r3, #8]
 8000d88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	2203      	movs	r2, #3
 8000d90:	409a      	lsls	r2, r3
 8000d92:	0013      	movs	r3, r2
 8000d94:	43da      	mvns	r2, r3
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	4013      	ands	r3, r2
 8000d9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	68da      	ldr	r2, [r3, #12]
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	409a      	lsls	r2, r3
 8000da6:	0013      	movs	r3, r2
 8000da8:	693a      	ldr	r2, [r7, #16]
 8000daa:	4313      	orrs	r3, r2
 8000dac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	693a      	ldr	r2, [r7, #16]
 8000db2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000dba:	2201      	movs	r2, #1
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	409a      	lsls	r2, r3
 8000dc0:	0013      	movs	r3, r2
 8000dc2:	43da      	mvns	r2, r3
 8000dc4:	693b      	ldr	r3, [r7, #16]
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	091b      	lsrs	r3, r3, #4
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	401a      	ands	r2, r3
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	409a      	lsls	r2, r3
 8000dd8:	0013      	movs	r3, r2
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	2203      	movs	r2, #3
 8000dec:	4013      	ands	r3, r2
 8000dee:	2b03      	cmp	r3, #3
 8000df0:	d017      	beq.n	8000e22 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	68db      	ldr	r3, [r3, #12]
 8000df6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	2203      	movs	r2, #3
 8000dfe:	409a      	lsls	r2, r3
 8000e00:	0013      	movs	r3, r2
 8000e02:	43da      	mvns	r2, r3
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	4013      	ands	r3, r2
 8000e08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	689a      	ldr	r2, [r3, #8]
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	409a      	lsls	r2, r3
 8000e14:	0013      	movs	r3, r2
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	2203      	movs	r2, #3
 8000e28:	4013      	ands	r3, r2
 8000e2a:	2b02      	cmp	r3, #2
 8000e2c:	d123      	bne.n	8000e76 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	08da      	lsrs	r2, r3, #3
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	3208      	adds	r2, #8
 8000e36:	0092      	lsls	r2, r2, #2
 8000e38:	58d3      	ldr	r3, [r2, r3]
 8000e3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	2207      	movs	r2, #7
 8000e40:	4013      	ands	r3, r2
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	220f      	movs	r2, #15
 8000e46:	409a      	lsls	r2, r3
 8000e48:	0013      	movs	r3, r2
 8000e4a:	43da      	mvns	r2, r3
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	4013      	ands	r3, r2
 8000e50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	691a      	ldr	r2, [r3, #16]
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	2107      	movs	r1, #7
 8000e5a:	400b      	ands	r3, r1
 8000e5c:	009b      	lsls	r3, r3, #2
 8000e5e:	409a      	lsls	r2, r3
 8000e60:	0013      	movs	r3, r2
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	08da      	lsrs	r2, r3, #3
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	3208      	adds	r2, #8
 8000e70:	0092      	lsls	r2, r2, #2
 8000e72:	6939      	ldr	r1, [r7, #16]
 8000e74:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	2203      	movs	r2, #3
 8000e82:	409a      	lsls	r2, r3
 8000e84:	0013      	movs	r3, r2
 8000e86:	43da      	mvns	r2, r3
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	2203      	movs	r2, #3
 8000e94:	401a      	ands	r2, r3
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	005b      	lsls	r3, r3, #1
 8000e9a:	409a      	lsls	r2, r3
 8000e9c:	0013      	movs	r3, r2
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685a      	ldr	r2, [r3, #4]
 8000eae:	23c0      	movs	r3, #192	; 0xc0
 8000eb0:	029b      	lsls	r3, r3, #10
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	d100      	bne.n	8000eb8 <HAL_GPIO_Init+0x174>
 8000eb6:	e098      	b.n	8000fea <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000eb8:	4a53      	ldr	r2, [pc, #332]	; (8001008 <HAL_GPIO_Init+0x2c4>)
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	089b      	lsrs	r3, r3, #2
 8000ebe:	3318      	adds	r3, #24
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	589b      	ldr	r3, [r3, r2]
 8000ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	2203      	movs	r2, #3
 8000eca:	4013      	ands	r3, r2
 8000ecc:	00db      	lsls	r3, r3, #3
 8000ece:	220f      	movs	r2, #15
 8000ed0:	409a      	lsls	r2, r3
 8000ed2:	0013      	movs	r3, r2
 8000ed4:	43da      	mvns	r2, r3
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	23a0      	movs	r3, #160	; 0xa0
 8000ee0:	05db      	lsls	r3, r3, #23
 8000ee2:	429a      	cmp	r2, r3
 8000ee4:	d019      	beq.n	8000f1a <HAL_GPIO_Init+0x1d6>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a48      	ldr	r2, [pc, #288]	; (800100c <HAL_GPIO_Init+0x2c8>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d013      	beq.n	8000f16 <HAL_GPIO_Init+0x1d2>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a47      	ldr	r2, [pc, #284]	; (8001010 <HAL_GPIO_Init+0x2cc>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d00d      	beq.n	8000f12 <HAL_GPIO_Init+0x1ce>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a46      	ldr	r2, [pc, #280]	; (8001014 <HAL_GPIO_Init+0x2d0>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d007      	beq.n	8000f0e <HAL_GPIO_Init+0x1ca>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a45      	ldr	r2, [pc, #276]	; (8001018 <HAL_GPIO_Init+0x2d4>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d101      	bne.n	8000f0a <HAL_GPIO_Init+0x1c6>
 8000f06:	2304      	movs	r3, #4
 8000f08:	e008      	b.n	8000f1c <HAL_GPIO_Init+0x1d8>
 8000f0a:	2305      	movs	r3, #5
 8000f0c:	e006      	b.n	8000f1c <HAL_GPIO_Init+0x1d8>
 8000f0e:	2303      	movs	r3, #3
 8000f10:	e004      	b.n	8000f1c <HAL_GPIO_Init+0x1d8>
 8000f12:	2302      	movs	r3, #2
 8000f14:	e002      	b.n	8000f1c <HAL_GPIO_Init+0x1d8>
 8000f16:	2301      	movs	r3, #1
 8000f18:	e000      	b.n	8000f1c <HAL_GPIO_Init+0x1d8>
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	697a      	ldr	r2, [r7, #20]
 8000f1e:	2103      	movs	r1, #3
 8000f20:	400a      	ands	r2, r1
 8000f22:	00d2      	lsls	r2, r2, #3
 8000f24:	4093      	lsls	r3, r2
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000f2c:	4936      	ldr	r1, [pc, #216]	; (8001008 <HAL_GPIO_Init+0x2c4>)
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	089b      	lsrs	r3, r3, #2
 8000f32:	3318      	adds	r3, #24
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000f3a:	4a33      	ldr	r2, [pc, #204]	; (8001008 <HAL_GPIO_Init+0x2c4>)
 8000f3c:	2380      	movs	r3, #128	; 0x80
 8000f3e:	58d3      	ldr	r3, [r2, r3]
 8000f40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	43da      	mvns	r2, r3
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685a      	ldr	r2, [r3, #4]
 8000f50:	2380      	movs	r3, #128	; 0x80
 8000f52:	025b      	lsls	r3, r3, #9
 8000f54:	4013      	ands	r3, r2
 8000f56:	d003      	beq.n	8000f60 <HAL_GPIO_Init+0x21c>
        {
          temp |= iocurrent;
 8000f58:	693a      	ldr	r2, [r7, #16]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f60:	4929      	ldr	r1, [pc, #164]	; (8001008 <HAL_GPIO_Init+0x2c4>)
 8000f62:	2280      	movs	r2, #128	; 0x80
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8000f68:	4a27      	ldr	r2, [pc, #156]	; (8001008 <HAL_GPIO_Init+0x2c4>)
 8000f6a:	2384      	movs	r3, #132	; 0x84
 8000f6c:	58d3      	ldr	r3, [r2, r3]
 8000f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	43da      	mvns	r2, r3
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	4013      	ands	r3, r2
 8000f78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685a      	ldr	r2, [r3, #4]
 8000f7e:	2380      	movs	r3, #128	; 0x80
 8000f80:	029b      	lsls	r3, r3, #10
 8000f82:	4013      	ands	r3, r2
 8000f84:	d003      	beq.n	8000f8e <HAL_GPIO_Init+0x24a>
        {
          temp |= iocurrent;
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f8e:	491e      	ldr	r1, [pc, #120]	; (8001008 <HAL_GPIO_Init+0x2c4>)
 8000f90:	2284      	movs	r2, #132	; 0x84
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f96:	4b1c      	ldr	r3, [pc, #112]	; (8001008 <HAL_GPIO_Init+0x2c4>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	43da      	mvns	r2, r3
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685a      	ldr	r2, [r3, #4]
 8000faa:	2380      	movs	r3, #128	; 0x80
 8000fac:	035b      	lsls	r3, r3, #13
 8000fae:	4013      	ands	r3, r2
 8000fb0:	d003      	beq.n	8000fba <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000fba:	4b13      	ldr	r3, [pc, #76]	; (8001008 <HAL_GPIO_Init+0x2c4>)
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000fc0:	4b11      	ldr	r3, [pc, #68]	; (8001008 <HAL_GPIO_Init+0x2c4>)
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	43da      	mvns	r2, r3
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685a      	ldr	r2, [r3, #4]
 8000fd4:	2380      	movs	r3, #128	; 0x80
 8000fd6:	039b      	lsls	r3, r3, #14
 8000fd8:	4013      	ands	r3, r2
 8000fda:	d003      	beq.n	8000fe4 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8000fdc:	693a      	ldr	r2, [r7, #16]
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000fe4:	4b08      	ldr	r3, [pc, #32]	; (8001008 <HAL_GPIO_Init+0x2c4>)
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	3301      	adds	r3, #1
 8000fee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	40da      	lsrs	r2, r3
 8000ff8:	1e13      	subs	r3, r2, #0
 8000ffa:	d000      	beq.n	8000ffe <HAL_GPIO_Init+0x2ba>
 8000ffc:	e6aa      	b.n	8000d54 <HAL_GPIO_Init+0x10>
  }
}
 8000ffe:	46c0      	nop			; (mov r8, r8)
 8001000:	46c0      	nop			; (mov r8, r8)
 8001002:	46bd      	mov	sp, r7
 8001004:	b006      	add	sp, #24
 8001006:	bd80      	pop	{r7, pc}
 8001008:	40021800 	.word	0x40021800
 800100c:	50000400 	.word	0x50000400
 8001010:	50000800 	.word	0x50000800
 8001014:	50000c00 	.word	0x50000c00
 8001018:	50001000 	.word	0x50001000

0800101c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	0008      	movs	r0, r1
 8001026:	0011      	movs	r1, r2
 8001028:	1cbb      	adds	r3, r7, #2
 800102a:	1c02      	adds	r2, r0, #0
 800102c:	801a      	strh	r2, [r3, #0]
 800102e:	1c7b      	adds	r3, r7, #1
 8001030:	1c0a      	adds	r2, r1, #0
 8001032:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001034:	1c7b      	adds	r3, r7, #1
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d004      	beq.n	8001046 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800103c:	1cbb      	adds	r3, r7, #2
 800103e:	881a      	ldrh	r2, [r3, #0]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001044:	e003      	b.n	800104e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001046:	1cbb      	adds	r3, r7, #2
 8001048:	881a      	ldrh	r2, [r3, #0]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800104e:	46c0      	nop			; (mov r8, r8)
 8001050:	46bd      	mov	sp, r7
 8001052:	b002      	add	sp, #8
 8001054:	bd80      	pop	{r7, pc}
	...

08001058 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	0002      	movs	r2, r0
 8001060:	1dbb      	adds	r3, r7, #6
 8001062:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8001064:	4b10      	ldr	r3, [pc, #64]	; (80010a8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	1dba      	adds	r2, r7, #6
 800106a:	8812      	ldrh	r2, [r2, #0]
 800106c:	4013      	ands	r3, r2
 800106e:	d008      	beq.n	8001082 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8001070:	4b0d      	ldr	r3, [pc, #52]	; (80010a8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001072:	1dba      	adds	r2, r7, #6
 8001074:	8812      	ldrh	r2, [r2, #0]
 8001076:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8001078:	1dbb      	adds	r3, r7, #6
 800107a:	881b      	ldrh	r3, [r3, #0]
 800107c:	0018      	movs	r0, r3
 800107e:	f7ff f8cd 	bl	800021c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8001082:	4b09      	ldr	r3, [pc, #36]	; (80010a8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001084:	691b      	ldr	r3, [r3, #16]
 8001086:	1dba      	adds	r2, r7, #6
 8001088:	8812      	ldrh	r2, [r2, #0]
 800108a:	4013      	ands	r3, r2
 800108c:	d008      	beq.n	80010a0 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800108e:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001090:	1dba      	adds	r2, r7, #6
 8001092:	8812      	ldrh	r2, [r2, #0]
 8001094:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8001096:	1dbb      	adds	r3, r7, #6
 8001098:	881b      	ldrh	r3, [r3, #0]
 800109a:	0018      	movs	r0, r3
 800109c:	f000 f806 	bl	80010ac <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80010a0:	46c0      	nop			; (mov r8, r8)
 80010a2:	46bd      	mov	sp, r7
 80010a4:	b002      	add	sp, #8
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	40021800 	.word	0x40021800

080010ac <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	0002      	movs	r2, r0
 80010b4:	1dbb      	adds	r3, r7, #6
 80010b6:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80010b8:	46c0      	nop			; (mov r8, r8)
 80010ba:	46bd      	mov	sp, r7
 80010bc:	b002      	add	sp, #8
 80010be:	bd80      	pop	{r7, pc}

080010c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80010c8:	4b19      	ldr	r3, [pc, #100]	; (8001130 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a19      	ldr	r2, [pc, #100]	; (8001134 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80010ce:	4013      	ands	r3, r2
 80010d0:	0019      	movs	r1, r3
 80010d2:	4b17      	ldr	r3, [pc, #92]	; (8001130 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80010d4:	687a      	ldr	r2, [r7, #4]
 80010d6:	430a      	orrs	r2, r1
 80010d8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	2380      	movs	r3, #128	; 0x80
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d11f      	bne.n	8001124 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80010e4:	4b14      	ldr	r3, [pc, #80]	; (8001138 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	0013      	movs	r3, r2
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	189b      	adds	r3, r3, r2
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	4912      	ldr	r1, [pc, #72]	; (800113c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80010f2:	0018      	movs	r0, r3
 80010f4:	f7ff f806 	bl	8000104 <__udivsi3>
 80010f8:	0003      	movs	r3, r0
 80010fa:	3301      	adds	r3, #1
 80010fc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010fe:	e008      	b.n	8001112 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d003      	beq.n	800110e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	3b01      	subs	r3, #1
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	e001      	b.n	8001112 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800110e:	2303      	movs	r3, #3
 8001110:	e009      	b.n	8001126 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001112:	4b07      	ldr	r3, [pc, #28]	; (8001130 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001114:	695a      	ldr	r2, [r3, #20]
 8001116:	2380      	movs	r3, #128	; 0x80
 8001118:	00db      	lsls	r3, r3, #3
 800111a:	401a      	ands	r2, r3
 800111c:	2380      	movs	r3, #128	; 0x80
 800111e:	00db      	lsls	r3, r3, #3
 8001120:	429a      	cmp	r2, r3
 8001122:	d0ed      	beq.n	8001100 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001124:	2300      	movs	r3, #0
}
 8001126:	0018      	movs	r0, r3
 8001128:	46bd      	mov	sp, r7
 800112a:	b004      	add	sp, #16
 800112c:	bd80      	pop	{r7, pc}
 800112e:	46c0      	nop			; (mov r8, r8)
 8001130:	40007000 	.word	0x40007000
 8001134:	fffff9ff 	.word	0xfffff9ff
 8001138:	20000000 	.word	0x20000000
 800113c:	000f4240 	.word	0x000f4240

08001140 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b088      	sub	sp, #32
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d102      	bne.n	8001154 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	f000 fb56 	bl	8001800 <HAL_RCC_OscConfig+0x6c0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2201      	movs	r2, #1
 800115a:	4013      	ands	r3, r2
 800115c:	d100      	bne.n	8001160 <HAL_RCC_OscConfig+0x20>
 800115e:	e07d      	b.n	800125c <HAL_RCC_OscConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001160:	4bc3      	ldr	r3, [pc, #780]	; (8001470 <HAL_RCC_OscConfig+0x330>)
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	2238      	movs	r2, #56	; 0x38
 8001166:	4013      	ands	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800116a:	4bc1      	ldr	r3, [pc, #772]	; (8001470 <HAL_RCC_OscConfig+0x330>)
 800116c:	68db      	ldr	r3, [r3, #12]
 800116e:	2203      	movs	r2, #3
 8001170:	4013      	ands	r3, r2
 8001172:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	2b10      	cmp	r3, #16
 8001178:	d102      	bne.n	8001180 <HAL_RCC_OscConfig+0x40>
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	2b03      	cmp	r3, #3
 800117e:	d002      	beq.n	8001186 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	2b08      	cmp	r3, #8
 8001184:	d10c      	bne.n	80011a0 <HAL_RCC_OscConfig+0x60>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001186:	4bba      	ldr	r3, [pc, #744]	; (8001470 <HAL_RCC_OscConfig+0x330>)
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	2380      	movs	r3, #128	; 0x80
 800118c:	029b      	lsls	r3, r3, #10
 800118e:	4013      	ands	r3, r2
 8001190:	d063      	beq.n	800125a <HAL_RCC_OscConfig+0x11a>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d15f      	bne.n	800125a <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	f000 fb30 	bl	8001800 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	685a      	ldr	r2, [r3, #4]
 80011a4:	2380      	movs	r3, #128	; 0x80
 80011a6:	025b      	lsls	r3, r3, #9
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d107      	bne.n	80011bc <HAL_RCC_OscConfig+0x7c>
 80011ac:	4bb0      	ldr	r3, [pc, #704]	; (8001470 <HAL_RCC_OscConfig+0x330>)
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	4baf      	ldr	r3, [pc, #700]	; (8001470 <HAL_RCC_OscConfig+0x330>)
 80011b2:	2180      	movs	r1, #128	; 0x80
 80011b4:	0249      	lsls	r1, r1, #9
 80011b6:	430a      	orrs	r2, r1
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	e020      	b.n	80011fe <HAL_RCC_OscConfig+0xbe>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	685a      	ldr	r2, [r3, #4]
 80011c0:	23a0      	movs	r3, #160	; 0xa0
 80011c2:	02db      	lsls	r3, r3, #11
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d10e      	bne.n	80011e6 <HAL_RCC_OscConfig+0xa6>
 80011c8:	4ba9      	ldr	r3, [pc, #676]	; (8001470 <HAL_RCC_OscConfig+0x330>)
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	4ba8      	ldr	r3, [pc, #672]	; (8001470 <HAL_RCC_OscConfig+0x330>)
 80011ce:	2180      	movs	r1, #128	; 0x80
 80011d0:	02c9      	lsls	r1, r1, #11
 80011d2:	430a      	orrs	r2, r1
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	4ba6      	ldr	r3, [pc, #664]	; (8001470 <HAL_RCC_OscConfig+0x330>)
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	4ba5      	ldr	r3, [pc, #660]	; (8001470 <HAL_RCC_OscConfig+0x330>)
 80011dc:	2180      	movs	r1, #128	; 0x80
 80011de:	0249      	lsls	r1, r1, #9
 80011e0:	430a      	orrs	r2, r1
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	e00b      	b.n	80011fe <HAL_RCC_OscConfig+0xbe>
 80011e6:	4ba2      	ldr	r3, [pc, #648]	; (8001470 <HAL_RCC_OscConfig+0x330>)
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	4ba1      	ldr	r3, [pc, #644]	; (8001470 <HAL_RCC_OscConfig+0x330>)
 80011ec:	49a1      	ldr	r1, [pc, #644]	; (8001474 <HAL_RCC_OscConfig+0x334>)
 80011ee:	400a      	ands	r2, r1
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	4b9f      	ldr	r3, [pc, #636]	; (8001470 <HAL_RCC_OscConfig+0x330>)
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	4b9e      	ldr	r3, [pc, #632]	; (8001470 <HAL_RCC_OscConfig+0x330>)
 80011f8:	499f      	ldr	r1, [pc, #636]	; (8001478 <HAL_RCC_OscConfig+0x338>)
 80011fa:	400a      	ands	r2, r1
 80011fc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d014      	beq.n	8001230 <HAL_RCC_OscConfig+0xf0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001206:	f7ff fc7b 	bl	8000b00 <HAL_GetTick>
 800120a:	0003      	movs	r3, r0
 800120c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800120e:	e008      	b.n	8001222 <HAL_RCC_OscConfig+0xe2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001210:	f7ff fc76 	bl	8000b00 <HAL_GetTick>
 8001214:	0002      	movs	r2, r0
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	2b64      	cmp	r3, #100	; 0x64
 800121c:	d901      	bls.n	8001222 <HAL_RCC_OscConfig+0xe2>
          {
            return HAL_TIMEOUT;
 800121e:	2303      	movs	r3, #3
 8001220:	e2ee      	b.n	8001800 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001222:	4b93      	ldr	r3, [pc, #588]	; (8001470 <HAL_RCC_OscConfig+0x330>)
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	2380      	movs	r3, #128	; 0x80
 8001228:	029b      	lsls	r3, r3, #10
 800122a:	4013      	ands	r3, r2
 800122c:	d0f0      	beq.n	8001210 <HAL_RCC_OscConfig+0xd0>
 800122e:	e015      	b.n	800125c <HAL_RCC_OscConfig+0x11c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001230:	f7ff fc66 	bl	8000b00 <HAL_GetTick>
 8001234:	0003      	movs	r3, r0
 8001236:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001238:	e008      	b.n	800124c <HAL_RCC_OscConfig+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800123a:	f7ff fc61 	bl	8000b00 <HAL_GetTick>
 800123e:	0002      	movs	r2, r0
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	1ad3      	subs	r3, r2, r3
 8001244:	2b64      	cmp	r3, #100	; 0x64
 8001246:	d901      	bls.n	800124c <HAL_RCC_OscConfig+0x10c>
          {
            return HAL_TIMEOUT;
 8001248:	2303      	movs	r3, #3
 800124a:	e2d9      	b.n	8001800 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800124c:	4b88      	ldr	r3, [pc, #544]	; (8001470 <HAL_RCC_OscConfig+0x330>)
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	2380      	movs	r3, #128	; 0x80
 8001252:	029b      	lsls	r3, r3, #10
 8001254:	4013      	ands	r3, r2
 8001256:	d1f0      	bne.n	800123a <HAL_RCC_OscConfig+0xfa>
 8001258:	e000      	b.n	800125c <HAL_RCC_OscConfig+0x11c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800125a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2202      	movs	r2, #2
 8001262:	4013      	ands	r3, r2
 8001264:	d100      	bne.n	8001268 <HAL_RCC_OscConfig+0x128>
 8001266:	e099      	b.n	800139c <HAL_RCC_OscConfig+0x25c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001268:	4b81      	ldr	r3, [pc, #516]	; (8001470 <HAL_RCC_OscConfig+0x330>)
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	2238      	movs	r2, #56	; 0x38
 800126e:	4013      	ands	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001272:	4b7f      	ldr	r3, [pc, #508]	; (8001470 <HAL_RCC_OscConfig+0x330>)
 8001274:	68db      	ldr	r3, [r3, #12]
 8001276:	2203      	movs	r2, #3
 8001278:	4013      	ands	r3, r2
 800127a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	2b10      	cmp	r3, #16
 8001280:	d102      	bne.n	8001288 <HAL_RCC_OscConfig+0x148>
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	2b02      	cmp	r3, #2
 8001286:	d002      	beq.n	800128e <HAL_RCC_OscConfig+0x14e>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d135      	bne.n	80012fa <HAL_RCC_OscConfig+0x1ba>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800128e:	4b78      	ldr	r3, [pc, #480]	; (8001470 <HAL_RCC_OscConfig+0x330>)
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	2380      	movs	r3, #128	; 0x80
 8001294:	00db      	lsls	r3, r3, #3
 8001296:	4013      	ands	r3, r2
 8001298:	d005      	beq.n	80012a6 <HAL_RCC_OscConfig+0x166>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	68db      	ldr	r3, [r3, #12]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d101      	bne.n	80012a6 <HAL_RCC_OscConfig+0x166>
      {
        return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e2ac      	b.n	8001800 <HAL_RCC_OscConfig+0x6c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012a6:	4b72      	ldr	r3, [pc, #456]	; (8001470 <HAL_RCC_OscConfig+0x330>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	4a74      	ldr	r2, [pc, #464]	; (800147c <HAL_RCC_OscConfig+0x33c>)
 80012ac:	4013      	ands	r3, r2
 80012ae:	0019      	movs	r1, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	695b      	ldr	r3, [r3, #20]
 80012b4:	021a      	lsls	r2, r3, #8
 80012b6:	4b6e      	ldr	r3, [pc, #440]	; (8001470 <HAL_RCC_OscConfig+0x330>)
 80012b8:	430a      	orrs	r2, r1
 80012ba:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d112      	bne.n	80012e8 <HAL_RCC_OscConfig+0x1a8>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80012c2:	4b6b      	ldr	r3, [pc, #428]	; (8001470 <HAL_RCC_OscConfig+0x330>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a6e      	ldr	r2, [pc, #440]	; (8001480 <HAL_RCC_OscConfig+0x340>)
 80012c8:	4013      	ands	r3, r2
 80012ca:	0019      	movs	r1, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	691a      	ldr	r2, [r3, #16]
 80012d0:	4b67      	ldr	r3, [pc, #412]	; (8001470 <HAL_RCC_OscConfig+0x330>)
 80012d2:	430a      	orrs	r2, r1
 80012d4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80012d6:	4b66      	ldr	r3, [pc, #408]	; (8001470 <HAL_RCC_OscConfig+0x330>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	0adb      	lsrs	r3, r3, #11
 80012dc:	2207      	movs	r2, #7
 80012de:	4013      	ands	r3, r2
 80012e0:	4a68      	ldr	r2, [pc, #416]	; (8001484 <HAL_RCC_OscConfig+0x344>)
 80012e2:	40da      	lsrs	r2, r3
 80012e4:	4b68      	ldr	r3, [pc, #416]	; (8001488 <HAL_RCC_OscConfig+0x348>)
 80012e6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80012e8:	4b68      	ldr	r3, [pc, #416]	; (800148c <HAL_RCC_OscConfig+0x34c>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	0018      	movs	r0, r3
 80012ee:	f7ff fbab 	bl	8000a48 <HAL_InitTick>
 80012f2:	1e03      	subs	r3, r0, #0
 80012f4:	d051      	beq.n	800139a <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e282      	b.n	8001800 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	68db      	ldr	r3, [r3, #12]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d030      	beq.n	8001364 <HAL_RCC_OscConfig+0x224>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001302:	4b5b      	ldr	r3, [pc, #364]	; (8001470 <HAL_RCC_OscConfig+0x330>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a5e      	ldr	r2, [pc, #376]	; (8001480 <HAL_RCC_OscConfig+0x340>)
 8001308:	4013      	ands	r3, r2
 800130a:	0019      	movs	r1, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	691a      	ldr	r2, [r3, #16]
 8001310:	4b57      	ldr	r3, [pc, #348]	; (8001470 <HAL_RCC_OscConfig+0x330>)
 8001312:	430a      	orrs	r2, r1
 8001314:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001316:	4b56      	ldr	r3, [pc, #344]	; (8001470 <HAL_RCC_OscConfig+0x330>)
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	4b55      	ldr	r3, [pc, #340]	; (8001470 <HAL_RCC_OscConfig+0x330>)
 800131c:	2180      	movs	r1, #128	; 0x80
 800131e:	0049      	lsls	r1, r1, #1
 8001320:	430a      	orrs	r2, r1
 8001322:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001324:	f7ff fbec 	bl	8000b00 <HAL_GetTick>
 8001328:	0003      	movs	r3, r0
 800132a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800132c:	e008      	b.n	8001340 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800132e:	f7ff fbe7 	bl	8000b00 <HAL_GetTick>
 8001332:	0002      	movs	r2, r0
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	2b02      	cmp	r3, #2
 800133a:	d901      	bls.n	8001340 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800133c:	2303      	movs	r3, #3
 800133e:	e25f      	b.n	8001800 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001340:	4b4b      	ldr	r3, [pc, #300]	; (8001470 <HAL_RCC_OscConfig+0x330>)
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	2380      	movs	r3, #128	; 0x80
 8001346:	00db      	lsls	r3, r3, #3
 8001348:	4013      	ands	r3, r2
 800134a:	d0f0      	beq.n	800132e <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800134c:	4b48      	ldr	r3, [pc, #288]	; (8001470 <HAL_RCC_OscConfig+0x330>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	4a4a      	ldr	r2, [pc, #296]	; (800147c <HAL_RCC_OscConfig+0x33c>)
 8001352:	4013      	ands	r3, r2
 8001354:	0019      	movs	r1, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	695b      	ldr	r3, [r3, #20]
 800135a:	021a      	lsls	r2, r3, #8
 800135c:	4b44      	ldr	r3, [pc, #272]	; (8001470 <HAL_RCC_OscConfig+0x330>)
 800135e:	430a      	orrs	r2, r1
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	e01b      	b.n	800139c <HAL_RCC_OscConfig+0x25c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001364:	4b42      	ldr	r3, [pc, #264]	; (8001470 <HAL_RCC_OscConfig+0x330>)
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	4b41      	ldr	r3, [pc, #260]	; (8001470 <HAL_RCC_OscConfig+0x330>)
 800136a:	4949      	ldr	r1, [pc, #292]	; (8001490 <HAL_RCC_OscConfig+0x350>)
 800136c:	400a      	ands	r2, r1
 800136e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001370:	f7ff fbc6 	bl	8000b00 <HAL_GetTick>
 8001374:	0003      	movs	r3, r0
 8001376:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001378:	e008      	b.n	800138c <HAL_RCC_OscConfig+0x24c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800137a:	f7ff fbc1 	bl	8000b00 <HAL_GetTick>
 800137e:	0002      	movs	r2, r0
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	2b02      	cmp	r3, #2
 8001386:	d901      	bls.n	800138c <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 8001388:	2303      	movs	r3, #3
 800138a:	e239      	b.n	8001800 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800138c:	4b38      	ldr	r3, [pc, #224]	; (8001470 <HAL_RCC_OscConfig+0x330>)
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	2380      	movs	r3, #128	; 0x80
 8001392:	00db      	lsls	r3, r3, #3
 8001394:	4013      	ands	r3, r2
 8001396:	d1f0      	bne.n	800137a <HAL_RCC_OscConfig+0x23a>
 8001398:	e000      	b.n	800139c <HAL_RCC_OscConfig+0x25c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800139a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2208      	movs	r2, #8
 80013a2:	4013      	ands	r3, r2
 80013a4:	d047      	beq.n	8001436 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80013a6:	4b32      	ldr	r3, [pc, #200]	; (8001470 <HAL_RCC_OscConfig+0x330>)
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	2238      	movs	r2, #56	; 0x38
 80013ac:	4013      	ands	r3, r2
 80013ae:	2b18      	cmp	r3, #24
 80013b0:	d10a      	bne.n	80013c8 <HAL_RCC_OscConfig+0x288>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80013b2:	4b2f      	ldr	r3, [pc, #188]	; (8001470 <HAL_RCC_OscConfig+0x330>)
 80013b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013b6:	2202      	movs	r2, #2
 80013b8:	4013      	ands	r3, r2
 80013ba:	d03c      	beq.n	8001436 <HAL_RCC_OscConfig+0x2f6>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	699b      	ldr	r3, [r3, #24]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d138      	bne.n	8001436 <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	e21b      	b.n	8001800 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d019      	beq.n	8001404 <HAL_RCC_OscConfig+0x2c4>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80013d0:	4b27      	ldr	r3, [pc, #156]	; (8001470 <HAL_RCC_OscConfig+0x330>)
 80013d2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80013d4:	4b26      	ldr	r3, [pc, #152]	; (8001470 <HAL_RCC_OscConfig+0x330>)
 80013d6:	2101      	movs	r1, #1
 80013d8:	430a      	orrs	r2, r1
 80013da:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013dc:	f7ff fb90 	bl	8000b00 <HAL_GetTick>
 80013e0:	0003      	movs	r3, r0
 80013e2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013e4:	e008      	b.n	80013f8 <HAL_RCC_OscConfig+0x2b8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013e6:	f7ff fb8b 	bl	8000b00 <HAL_GetTick>
 80013ea:	0002      	movs	r2, r0
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d901      	bls.n	80013f8 <HAL_RCC_OscConfig+0x2b8>
          {
            return HAL_TIMEOUT;
 80013f4:	2303      	movs	r3, #3
 80013f6:	e203      	b.n	8001800 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013f8:	4b1d      	ldr	r3, [pc, #116]	; (8001470 <HAL_RCC_OscConfig+0x330>)
 80013fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013fc:	2202      	movs	r2, #2
 80013fe:	4013      	ands	r3, r2
 8001400:	d0f1      	beq.n	80013e6 <HAL_RCC_OscConfig+0x2a6>
 8001402:	e018      	b.n	8001436 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001404:	4b1a      	ldr	r3, [pc, #104]	; (8001470 <HAL_RCC_OscConfig+0x330>)
 8001406:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001408:	4b19      	ldr	r3, [pc, #100]	; (8001470 <HAL_RCC_OscConfig+0x330>)
 800140a:	2101      	movs	r1, #1
 800140c:	438a      	bics	r2, r1
 800140e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001410:	f7ff fb76 	bl	8000b00 <HAL_GetTick>
 8001414:	0003      	movs	r3, r0
 8001416:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001418:	e008      	b.n	800142c <HAL_RCC_OscConfig+0x2ec>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800141a:	f7ff fb71 	bl	8000b00 <HAL_GetTick>
 800141e:	0002      	movs	r2, r0
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	2b02      	cmp	r3, #2
 8001426:	d901      	bls.n	800142c <HAL_RCC_OscConfig+0x2ec>
          {
            return HAL_TIMEOUT;
 8001428:	2303      	movs	r3, #3
 800142a:	e1e9      	b.n	8001800 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800142c:	4b10      	ldr	r3, [pc, #64]	; (8001470 <HAL_RCC_OscConfig+0x330>)
 800142e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001430:	2202      	movs	r2, #2
 8001432:	4013      	ands	r3, r2
 8001434:	d1f1      	bne.n	800141a <HAL_RCC_OscConfig+0x2da>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	2204      	movs	r2, #4
 800143c:	4013      	ands	r3, r2
 800143e:	d100      	bne.n	8001442 <HAL_RCC_OscConfig+0x302>
 8001440:	e0c6      	b.n	80015d0 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001442:	231f      	movs	r3, #31
 8001444:	18fb      	adds	r3, r7, r3
 8001446:	2200      	movs	r2, #0
 8001448:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800144a:	4b09      	ldr	r3, [pc, #36]	; (8001470 <HAL_RCC_OscConfig+0x330>)
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	2238      	movs	r2, #56	; 0x38
 8001450:	4013      	ands	r3, r2
 8001452:	2b20      	cmp	r3, #32
 8001454:	d11e      	bne.n	8001494 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001456:	4b06      	ldr	r3, [pc, #24]	; (8001470 <HAL_RCC_OscConfig+0x330>)
 8001458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800145a:	2202      	movs	r2, #2
 800145c:	4013      	ands	r3, r2
 800145e:	d100      	bne.n	8001462 <HAL_RCC_OscConfig+0x322>
 8001460:	e0b6      	b.n	80015d0 <HAL_RCC_OscConfig+0x490>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d000      	beq.n	800146c <HAL_RCC_OscConfig+0x32c>
 800146a:	e0b1      	b.n	80015d0 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e1c7      	b.n	8001800 <HAL_RCC_OscConfig+0x6c0>
 8001470:	40021000 	.word	0x40021000
 8001474:	fffeffff 	.word	0xfffeffff
 8001478:	fffbffff 	.word	0xfffbffff
 800147c:	ffff80ff 	.word	0xffff80ff
 8001480:	ffffc7ff 	.word	0xffffc7ff
 8001484:	00f42400 	.word	0x00f42400
 8001488:	20000000 	.word	0x20000000
 800148c:	20000004 	.word	0x20000004
 8001490:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001494:	4bb8      	ldr	r3, [pc, #736]	; (8001778 <HAL_RCC_OscConfig+0x638>)
 8001496:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001498:	2380      	movs	r3, #128	; 0x80
 800149a:	055b      	lsls	r3, r3, #21
 800149c:	4013      	ands	r3, r2
 800149e:	d101      	bne.n	80014a4 <HAL_RCC_OscConfig+0x364>
 80014a0:	2301      	movs	r3, #1
 80014a2:	e000      	b.n	80014a6 <HAL_RCC_OscConfig+0x366>
 80014a4:	2300      	movs	r3, #0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d011      	beq.n	80014ce <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80014aa:	4bb3      	ldr	r3, [pc, #716]	; (8001778 <HAL_RCC_OscConfig+0x638>)
 80014ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80014ae:	4bb2      	ldr	r3, [pc, #712]	; (8001778 <HAL_RCC_OscConfig+0x638>)
 80014b0:	2180      	movs	r1, #128	; 0x80
 80014b2:	0549      	lsls	r1, r1, #21
 80014b4:	430a      	orrs	r2, r1
 80014b6:	63da      	str	r2, [r3, #60]	; 0x3c
 80014b8:	4baf      	ldr	r3, [pc, #700]	; (8001778 <HAL_RCC_OscConfig+0x638>)
 80014ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80014bc:	2380      	movs	r3, #128	; 0x80
 80014be:	055b      	lsls	r3, r3, #21
 80014c0:	4013      	ands	r3, r2
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80014c6:	231f      	movs	r3, #31
 80014c8:	18fb      	adds	r3, r7, r3
 80014ca:	2201      	movs	r2, #1
 80014cc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014ce:	4bab      	ldr	r3, [pc, #684]	; (800177c <HAL_RCC_OscConfig+0x63c>)
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	2380      	movs	r3, #128	; 0x80
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	4013      	ands	r3, r2
 80014d8:	d11a      	bne.n	8001510 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014da:	4ba8      	ldr	r3, [pc, #672]	; (800177c <HAL_RCC_OscConfig+0x63c>)
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	4ba7      	ldr	r3, [pc, #668]	; (800177c <HAL_RCC_OscConfig+0x63c>)
 80014e0:	2180      	movs	r1, #128	; 0x80
 80014e2:	0049      	lsls	r1, r1, #1
 80014e4:	430a      	orrs	r2, r1
 80014e6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80014e8:	f7ff fb0a 	bl	8000b00 <HAL_GetTick>
 80014ec:	0003      	movs	r3, r0
 80014ee:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014f0:	e008      	b.n	8001504 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014f2:	f7ff fb05 	bl	8000b00 <HAL_GetTick>
 80014f6:	0002      	movs	r2, r0
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d901      	bls.n	8001504 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8001500:	2303      	movs	r3, #3
 8001502:	e17d      	b.n	8001800 <HAL_RCC_OscConfig+0x6c0>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001504:	4b9d      	ldr	r3, [pc, #628]	; (800177c <HAL_RCC_OscConfig+0x63c>)
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	2380      	movs	r3, #128	; 0x80
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	4013      	ands	r3, r2
 800150e:	d0f0      	beq.n	80014f2 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	2b01      	cmp	r3, #1
 8001516:	d106      	bne.n	8001526 <HAL_RCC_OscConfig+0x3e6>
 8001518:	4b97      	ldr	r3, [pc, #604]	; (8001778 <HAL_RCC_OscConfig+0x638>)
 800151a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800151c:	4b96      	ldr	r3, [pc, #600]	; (8001778 <HAL_RCC_OscConfig+0x638>)
 800151e:	2101      	movs	r1, #1
 8001520:	430a      	orrs	r2, r1
 8001522:	65da      	str	r2, [r3, #92]	; 0x5c
 8001524:	e01c      	b.n	8001560 <HAL_RCC_OscConfig+0x420>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	2b05      	cmp	r3, #5
 800152c:	d10c      	bne.n	8001548 <HAL_RCC_OscConfig+0x408>
 800152e:	4b92      	ldr	r3, [pc, #584]	; (8001778 <HAL_RCC_OscConfig+0x638>)
 8001530:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001532:	4b91      	ldr	r3, [pc, #580]	; (8001778 <HAL_RCC_OscConfig+0x638>)
 8001534:	2104      	movs	r1, #4
 8001536:	430a      	orrs	r2, r1
 8001538:	65da      	str	r2, [r3, #92]	; 0x5c
 800153a:	4b8f      	ldr	r3, [pc, #572]	; (8001778 <HAL_RCC_OscConfig+0x638>)
 800153c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800153e:	4b8e      	ldr	r3, [pc, #568]	; (8001778 <HAL_RCC_OscConfig+0x638>)
 8001540:	2101      	movs	r1, #1
 8001542:	430a      	orrs	r2, r1
 8001544:	65da      	str	r2, [r3, #92]	; 0x5c
 8001546:	e00b      	b.n	8001560 <HAL_RCC_OscConfig+0x420>
 8001548:	4b8b      	ldr	r3, [pc, #556]	; (8001778 <HAL_RCC_OscConfig+0x638>)
 800154a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800154c:	4b8a      	ldr	r3, [pc, #552]	; (8001778 <HAL_RCC_OscConfig+0x638>)
 800154e:	2101      	movs	r1, #1
 8001550:	438a      	bics	r2, r1
 8001552:	65da      	str	r2, [r3, #92]	; 0x5c
 8001554:	4b88      	ldr	r3, [pc, #544]	; (8001778 <HAL_RCC_OscConfig+0x638>)
 8001556:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001558:	4b87      	ldr	r3, [pc, #540]	; (8001778 <HAL_RCC_OscConfig+0x638>)
 800155a:	2104      	movs	r1, #4
 800155c:	438a      	bics	r2, r1
 800155e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d014      	beq.n	8001592 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001568:	f7ff faca 	bl	8000b00 <HAL_GetTick>
 800156c:	0003      	movs	r3, r0
 800156e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001570:	e009      	b.n	8001586 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001572:	f7ff fac5 	bl	8000b00 <HAL_GetTick>
 8001576:	0002      	movs	r2, r0
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	4a80      	ldr	r2, [pc, #512]	; (8001780 <HAL_RCC_OscConfig+0x640>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e13c      	b.n	8001800 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001586:	4b7c      	ldr	r3, [pc, #496]	; (8001778 <HAL_RCC_OscConfig+0x638>)
 8001588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800158a:	2202      	movs	r2, #2
 800158c:	4013      	ands	r3, r2
 800158e:	d0f0      	beq.n	8001572 <HAL_RCC_OscConfig+0x432>
 8001590:	e013      	b.n	80015ba <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001592:	f7ff fab5 	bl	8000b00 <HAL_GetTick>
 8001596:	0003      	movs	r3, r0
 8001598:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800159a:	e009      	b.n	80015b0 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800159c:	f7ff fab0 	bl	8000b00 <HAL_GetTick>
 80015a0:	0002      	movs	r2, r0
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	4a76      	ldr	r2, [pc, #472]	; (8001780 <HAL_RCC_OscConfig+0x640>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d901      	bls.n	80015b0 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e127      	b.n	8001800 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015b0:	4b71      	ldr	r3, [pc, #452]	; (8001778 <HAL_RCC_OscConfig+0x638>)
 80015b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015b4:	2202      	movs	r2, #2
 80015b6:	4013      	ands	r3, r2
 80015b8:	d1f0      	bne.n	800159c <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80015ba:	231f      	movs	r3, #31
 80015bc:	18fb      	adds	r3, r7, r3
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d105      	bne.n	80015d0 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80015c4:	4b6c      	ldr	r3, [pc, #432]	; (8001778 <HAL_RCC_OscConfig+0x638>)
 80015c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80015c8:	4b6b      	ldr	r3, [pc, #428]	; (8001778 <HAL_RCC_OscConfig+0x638>)
 80015ca:	496e      	ldr	r1, [pc, #440]	; (8001784 <HAL_RCC_OscConfig+0x644>)
 80015cc:	400a      	ands	r2, r1
 80015ce:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2220      	movs	r2, #32
 80015d6:	4013      	ands	r3, r2
 80015d8:	d039      	beq.n	800164e <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	69db      	ldr	r3, [r3, #28]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d01b      	beq.n	800161a <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80015e2:	4b65      	ldr	r3, [pc, #404]	; (8001778 <HAL_RCC_OscConfig+0x638>)
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	4b64      	ldr	r3, [pc, #400]	; (8001778 <HAL_RCC_OscConfig+0x638>)
 80015e8:	2180      	movs	r1, #128	; 0x80
 80015ea:	03c9      	lsls	r1, r1, #15
 80015ec:	430a      	orrs	r2, r1
 80015ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015f0:	f7ff fa86 	bl	8000b00 <HAL_GetTick>
 80015f4:	0003      	movs	r3, r0
 80015f6:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80015f8:	e008      	b.n	800160c <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015fa:	f7ff fa81 	bl	8000b00 <HAL_GetTick>
 80015fe:	0002      	movs	r2, r0
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	2b02      	cmp	r3, #2
 8001606:	d901      	bls.n	800160c <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8001608:	2303      	movs	r3, #3
 800160a:	e0f9      	b.n	8001800 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800160c:	4b5a      	ldr	r3, [pc, #360]	; (8001778 <HAL_RCC_OscConfig+0x638>)
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	2380      	movs	r3, #128	; 0x80
 8001612:	041b      	lsls	r3, r3, #16
 8001614:	4013      	ands	r3, r2
 8001616:	d0f0      	beq.n	80015fa <HAL_RCC_OscConfig+0x4ba>
 8001618:	e019      	b.n	800164e <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800161a:	4b57      	ldr	r3, [pc, #348]	; (8001778 <HAL_RCC_OscConfig+0x638>)
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	4b56      	ldr	r3, [pc, #344]	; (8001778 <HAL_RCC_OscConfig+0x638>)
 8001620:	4959      	ldr	r1, [pc, #356]	; (8001788 <HAL_RCC_OscConfig+0x648>)
 8001622:	400a      	ands	r2, r1
 8001624:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001626:	f7ff fa6b 	bl	8000b00 <HAL_GetTick>
 800162a:	0003      	movs	r3, r0
 800162c:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800162e:	e008      	b.n	8001642 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001630:	f7ff fa66 	bl	8000b00 <HAL_GetTick>
 8001634:	0002      	movs	r2, r0
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b02      	cmp	r3, #2
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e0de      	b.n	8001800 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001642:	4b4d      	ldr	r3, [pc, #308]	; (8001778 <HAL_RCC_OscConfig+0x638>)
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	2380      	movs	r3, #128	; 0x80
 8001648:	041b      	lsls	r3, r3, #16
 800164a:	4013      	ands	r3, r2
 800164c:	d1f0      	bne.n	8001630 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6a1b      	ldr	r3, [r3, #32]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d100      	bne.n	8001658 <HAL_RCC_OscConfig+0x518>
 8001656:	e0d2      	b.n	80017fe <HAL_RCC_OscConfig+0x6be>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001658:	4b47      	ldr	r3, [pc, #284]	; (8001778 <HAL_RCC_OscConfig+0x638>)
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	2238      	movs	r2, #56	; 0x38
 800165e:	4013      	ands	r3, r2
 8001660:	2b10      	cmp	r3, #16
 8001662:	d100      	bne.n	8001666 <HAL_RCC_OscConfig+0x526>
 8001664:	e081      	b.n	800176a <HAL_RCC_OscConfig+0x62a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6a1b      	ldr	r3, [r3, #32]
 800166a:	2b02      	cmp	r3, #2
 800166c:	d156      	bne.n	800171c <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800166e:	4b42      	ldr	r3, [pc, #264]	; (8001778 <HAL_RCC_OscConfig+0x638>)
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	4b41      	ldr	r3, [pc, #260]	; (8001778 <HAL_RCC_OscConfig+0x638>)
 8001674:	4945      	ldr	r1, [pc, #276]	; (800178c <HAL_RCC_OscConfig+0x64c>)
 8001676:	400a      	ands	r2, r1
 8001678:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800167a:	f7ff fa41 	bl	8000b00 <HAL_GetTick>
 800167e:	0003      	movs	r3, r0
 8001680:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001682:	e008      	b.n	8001696 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001684:	f7ff fa3c 	bl	8000b00 <HAL_GetTick>
 8001688:	0002      	movs	r2, r0
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b02      	cmp	r3, #2
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e0b4      	b.n	8001800 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001696:	4b38      	ldr	r3, [pc, #224]	; (8001778 <HAL_RCC_OscConfig+0x638>)
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	2380      	movs	r3, #128	; 0x80
 800169c:	049b      	lsls	r3, r3, #18
 800169e:	4013      	ands	r3, r2
 80016a0:	d1f0      	bne.n	8001684 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016a2:	4b35      	ldr	r3, [pc, #212]	; (8001778 <HAL_RCC_OscConfig+0x638>)
 80016a4:	68db      	ldr	r3, [r3, #12]
 80016a6:	4a3a      	ldr	r2, [pc, #232]	; (8001790 <HAL_RCC_OscConfig+0x650>)
 80016a8:	4013      	ands	r3, r2
 80016aa:	0019      	movs	r1, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b4:	431a      	orrs	r2, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ba:	021b      	lsls	r3, r3, #8
 80016bc:	431a      	orrs	r2, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	431a      	orrs	r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016c8:	431a      	orrs	r2, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016ce:	431a      	orrs	r2, r3
 80016d0:	4b29      	ldr	r3, [pc, #164]	; (8001778 <HAL_RCC_OscConfig+0x638>)
 80016d2:	430a      	orrs	r2, r1
 80016d4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016d6:	4b28      	ldr	r3, [pc, #160]	; (8001778 <HAL_RCC_OscConfig+0x638>)
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	4b27      	ldr	r3, [pc, #156]	; (8001778 <HAL_RCC_OscConfig+0x638>)
 80016dc:	2180      	movs	r1, #128	; 0x80
 80016de:	0449      	lsls	r1, r1, #17
 80016e0:	430a      	orrs	r2, r1
 80016e2:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80016e4:	4b24      	ldr	r3, [pc, #144]	; (8001778 <HAL_RCC_OscConfig+0x638>)
 80016e6:	68da      	ldr	r2, [r3, #12]
 80016e8:	4b23      	ldr	r3, [pc, #140]	; (8001778 <HAL_RCC_OscConfig+0x638>)
 80016ea:	2180      	movs	r1, #128	; 0x80
 80016ec:	0549      	lsls	r1, r1, #21
 80016ee:	430a      	orrs	r2, r1
 80016f0:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f2:	f7ff fa05 	bl	8000b00 <HAL_GetTick>
 80016f6:	0003      	movs	r3, r0
 80016f8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016fa:	e008      	b.n	800170e <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016fc:	f7ff fa00 	bl	8000b00 <HAL_GetTick>
 8001700:	0002      	movs	r2, r0
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b02      	cmp	r3, #2
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e078      	b.n	8001800 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800170e:	4b1a      	ldr	r3, [pc, #104]	; (8001778 <HAL_RCC_OscConfig+0x638>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	2380      	movs	r3, #128	; 0x80
 8001714:	049b      	lsls	r3, r3, #18
 8001716:	4013      	ands	r3, r2
 8001718:	d0f0      	beq.n	80016fc <HAL_RCC_OscConfig+0x5bc>
 800171a:	e070      	b.n	80017fe <HAL_RCC_OscConfig+0x6be>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800171c:	4b16      	ldr	r3, [pc, #88]	; (8001778 <HAL_RCC_OscConfig+0x638>)
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	4b15      	ldr	r3, [pc, #84]	; (8001778 <HAL_RCC_OscConfig+0x638>)
 8001722:	491a      	ldr	r1, [pc, #104]	; (800178c <HAL_RCC_OscConfig+0x64c>)
 8001724:	400a      	ands	r2, r1
 8001726:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001728:	4b13      	ldr	r3, [pc, #76]	; (8001778 <HAL_RCC_OscConfig+0x638>)
 800172a:	68da      	ldr	r2, [r3, #12]
 800172c:	4b12      	ldr	r3, [pc, #72]	; (8001778 <HAL_RCC_OscConfig+0x638>)
 800172e:	2103      	movs	r1, #3
 8001730:	438a      	bics	r2, r1
 8001732:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001734:	4b10      	ldr	r3, [pc, #64]	; (8001778 <HAL_RCC_OscConfig+0x638>)
 8001736:	68da      	ldr	r2, [r3, #12]
 8001738:	4b0f      	ldr	r3, [pc, #60]	; (8001778 <HAL_RCC_OscConfig+0x638>)
 800173a:	4916      	ldr	r1, [pc, #88]	; (8001794 <HAL_RCC_OscConfig+0x654>)
 800173c:	400a      	ands	r2, r1
 800173e:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001740:	f7ff f9de 	bl	8000b00 <HAL_GetTick>
 8001744:	0003      	movs	r3, r0
 8001746:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001748:	e008      	b.n	800175c <HAL_RCC_OscConfig+0x61c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800174a:	f7ff f9d9 	bl	8000b00 <HAL_GetTick>
 800174e:	0002      	movs	r2, r0
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d901      	bls.n	800175c <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e051      	b.n	8001800 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800175c:	4b06      	ldr	r3, [pc, #24]	; (8001778 <HAL_RCC_OscConfig+0x638>)
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	2380      	movs	r3, #128	; 0x80
 8001762:	049b      	lsls	r3, r3, #18
 8001764:	4013      	ands	r3, r2
 8001766:	d1f0      	bne.n	800174a <HAL_RCC_OscConfig+0x60a>
 8001768:	e049      	b.n	80017fe <HAL_RCC_OscConfig+0x6be>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6a1b      	ldr	r3, [r3, #32]
 800176e:	2b01      	cmp	r3, #1
 8001770:	d112      	bne.n	8001798 <HAL_RCC_OscConfig+0x658>
      {
        return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e044      	b.n	8001800 <HAL_RCC_OscConfig+0x6c0>
 8001776:	46c0      	nop			; (mov r8, r8)
 8001778:	40021000 	.word	0x40021000
 800177c:	40007000 	.word	0x40007000
 8001780:	00001388 	.word	0x00001388
 8001784:	efffffff 	.word	0xefffffff
 8001788:	ffbfffff 	.word	0xffbfffff
 800178c:	feffffff 	.word	0xfeffffff
 8001790:	11c1808c 	.word	0x11c1808c
 8001794:	eefeffff 	.word	0xeefeffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001798:	4b1b      	ldr	r3, [pc, #108]	; (8001808 <HAL_RCC_OscConfig+0x6c8>)
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	2203      	movs	r2, #3
 80017a2:	401a      	ands	r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d126      	bne.n	80017fa <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	2270      	movs	r2, #112	; 0x70
 80017b0:	401a      	ands	r2, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d11f      	bne.n	80017fa <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017ba:	697a      	ldr	r2, [r7, #20]
 80017bc:	23fe      	movs	r3, #254	; 0xfe
 80017be:	01db      	lsls	r3, r3, #7
 80017c0:	401a      	ands	r2, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d116      	bne.n	80017fa <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80017cc:	697a      	ldr	r2, [r7, #20]
 80017ce:	23f8      	movs	r3, #248	; 0xf8
 80017d0:	039b      	lsls	r3, r3, #14
 80017d2:	401a      	ands	r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017d8:	429a      	cmp	r2, r3
 80017da:	d10e      	bne.n	80017fa <HAL_RCC_OscConfig+0x6ba>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80017dc:	697a      	ldr	r2, [r7, #20]
 80017de:	23e0      	movs	r3, #224	; 0xe0
 80017e0:	051b      	lsls	r3, r3, #20
 80017e2:	401a      	ands	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d106      	bne.n	80017fa <HAL_RCC_OscConfig+0x6ba>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	0f5b      	lsrs	r3, r3, #29
 80017f0:	075a      	lsls	r2, r3, #29
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d001      	beq.n	80017fe <HAL_RCC_OscConfig+0x6be>
        {
          return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e000      	b.n	8001800 <HAL_RCC_OscConfig+0x6c0>
        }
      }
    }
  }
  return HAL_OK;
 80017fe:	2300      	movs	r3, #0
}
 8001800:	0018      	movs	r0, r3
 8001802:	46bd      	mov	sp, r7
 8001804:	b008      	add	sp, #32
 8001806:	bd80      	pop	{r7, pc}
 8001808:	40021000 	.word	0x40021000

0800180c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d101      	bne.n	8001820 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e0e9      	b.n	80019f4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001820:	4b76      	ldr	r3, [pc, #472]	; (80019fc <HAL_RCC_ClockConfig+0x1f0>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2207      	movs	r2, #7
 8001826:	4013      	ands	r3, r2
 8001828:	683a      	ldr	r2, [r7, #0]
 800182a:	429a      	cmp	r2, r3
 800182c:	d91e      	bls.n	800186c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800182e:	4b73      	ldr	r3, [pc, #460]	; (80019fc <HAL_RCC_ClockConfig+0x1f0>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2207      	movs	r2, #7
 8001834:	4393      	bics	r3, r2
 8001836:	0019      	movs	r1, r3
 8001838:	4b70      	ldr	r3, [pc, #448]	; (80019fc <HAL_RCC_ClockConfig+0x1f0>)
 800183a:	683a      	ldr	r2, [r7, #0]
 800183c:	430a      	orrs	r2, r1
 800183e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001840:	f7ff f95e 	bl	8000b00 <HAL_GetTick>
 8001844:	0003      	movs	r3, r0
 8001846:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001848:	e009      	b.n	800185e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800184a:	f7ff f959 	bl	8000b00 <HAL_GetTick>
 800184e:	0002      	movs	r2, r0
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	4a6a      	ldr	r2, [pc, #424]	; (8001a00 <HAL_RCC_ClockConfig+0x1f4>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d901      	bls.n	800185e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e0ca      	b.n	80019f4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800185e:	4b67      	ldr	r3, [pc, #412]	; (80019fc <HAL_RCC_ClockConfig+0x1f0>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2207      	movs	r2, #7
 8001864:	4013      	ands	r3, r2
 8001866:	683a      	ldr	r2, [r7, #0]
 8001868:	429a      	cmp	r2, r3
 800186a:	d1ee      	bne.n	800184a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2202      	movs	r2, #2
 8001872:	4013      	ands	r3, r2
 8001874:	d015      	beq.n	80018a2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2204      	movs	r2, #4
 800187c:	4013      	ands	r3, r2
 800187e:	d006      	beq.n	800188e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001880:	4b60      	ldr	r3, [pc, #384]	; (8001a04 <HAL_RCC_ClockConfig+0x1f8>)
 8001882:	689a      	ldr	r2, [r3, #8]
 8001884:	4b5f      	ldr	r3, [pc, #380]	; (8001a04 <HAL_RCC_ClockConfig+0x1f8>)
 8001886:	21e0      	movs	r1, #224	; 0xe0
 8001888:	01c9      	lsls	r1, r1, #7
 800188a:	430a      	orrs	r2, r1
 800188c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800188e:	4b5d      	ldr	r3, [pc, #372]	; (8001a04 <HAL_RCC_ClockConfig+0x1f8>)
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	4a5d      	ldr	r2, [pc, #372]	; (8001a08 <HAL_RCC_ClockConfig+0x1fc>)
 8001894:	4013      	ands	r3, r2
 8001896:	0019      	movs	r1, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	689a      	ldr	r2, [r3, #8]
 800189c:	4b59      	ldr	r3, [pc, #356]	; (8001a04 <HAL_RCC_ClockConfig+0x1f8>)
 800189e:	430a      	orrs	r2, r1
 80018a0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2201      	movs	r2, #1
 80018a8:	4013      	ands	r3, r2
 80018aa:	d057      	beq.n	800195c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d107      	bne.n	80018c4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018b4:	4b53      	ldr	r3, [pc, #332]	; (8001a04 <HAL_RCC_ClockConfig+0x1f8>)
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	2380      	movs	r3, #128	; 0x80
 80018ba:	029b      	lsls	r3, r3, #10
 80018bc:	4013      	ands	r3, r2
 80018be:	d12b      	bne.n	8001918 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e097      	b.n	80019f4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d107      	bne.n	80018dc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018cc:	4b4d      	ldr	r3, [pc, #308]	; (8001a04 <HAL_RCC_ClockConfig+0x1f8>)
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	2380      	movs	r3, #128	; 0x80
 80018d2:	049b      	lsls	r3, r3, #18
 80018d4:	4013      	ands	r3, r2
 80018d6:	d11f      	bne.n	8001918 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e08b      	b.n	80019f4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d107      	bne.n	80018f4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018e4:	4b47      	ldr	r3, [pc, #284]	; (8001a04 <HAL_RCC_ClockConfig+0x1f8>)
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	2380      	movs	r3, #128	; 0x80
 80018ea:	00db      	lsls	r3, r3, #3
 80018ec:	4013      	ands	r3, r2
 80018ee:	d113      	bne.n	8001918 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e07f      	b.n	80019f4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	2b03      	cmp	r3, #3
 80018fa:	d106      	bne.n	800190a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018fc:	4b41      	ldr	r3, [pc, #260]	; (8001a04 <HAL_RCC_ClockConfig+0x1f8>)
 80018fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001900:	2202      	movs	r2, #2
 8001902:	4013      	ands	r3, r2
 8001904:	d108      	bne.n	8001918 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e074      	b.n	80019f4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800190a:	4b3e      	ldr	r3, [pc, #248]	; (8001a04 <HAL_RCC_ClockConfig+0x1f8>)
 800190c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800190e:	2202      	movs	r2, #2
 8001910:	4013      	ands	r3, r2
 8001912:	d101      	bne.n	8001918 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e06d      	b.n	80019f4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001918:	4b3a      	ldr	r3, [pc, #232]	; (8001a04 <HAL_RCC_ClockConfig+0x1f8>)
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	2207      	movs	r2, #7
 800191e:	4393      	bics	r3, r2
 8001920:	0019      	movs	r1, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685a      	ldr	r2, [r3, #4]
 8001926:	4b37      	ldr	r3, [pc, #220]	; (8001a04 <HAL_RCC_ClockConfig+0x1f8>)
 8001928:	430a      	orrs	r2, r1
 800192a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800192c:	f7ff f8e8 	bl	8000b00 <HAL_GetTick>
 8001930:	0003      	movs	r3, r0
 8001932:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001934:	e009      	b.n	800194a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001936:	f7ff f8e3 	bl	8000b00 <HAL_GetTick>
 800193a:	0002      	movs	r2, r0
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	4a2f      	ldr	r2, [pc, #188]	; (8001a00 <HAL_RCC_ClockConfig+0x1f4>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d901      	bls.n	800194a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e054      	b.n	80019f4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800194a:	4b2e      	ldr	r3, [pc, #184]	; (8001a04 <HAL_RCC_ClockConfig+0x1f8>)
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	2238      	movs	r2, #56	; 0x38
 8001950:	401a      	ands	r2, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	429a      	cmp	r2, r3
 800195a:	d1ec      	bne.n	8001936 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800195c:	4b27      	ldr	r3, [pc, #156]	; (80019fc <HAL_RCC_ClockConfig+0x1f0>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2207      	movs	r2, #7
 8001962:	4013      	ands	r3, r2
 8001964:	683a      	ldr	r2, [r7, #0]
 8001966:	429a      	cmp	r2, r3
 8001968:	d21e      	bcs.n	80019a8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800196a:	4b24      	ldr	r3, [pc, #144]	; (80019fc <HAL_RCC_ClockConfig+0x1f0>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2207      	movs	r2, #7
 8001970:	4393      	bics	r3, r2
 8001972:	0019      	movs	r1, r3
 8001974:	4b21      	ldr	r3, [pc, #132]	; (80019fc <HAL_RCC_ClockConfig+0x1f0>)
 8001976:	683a      	ldr	r2, [r7, #0]
 8001978:	430a      	orrs	r2, r1
 800197a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800197c:	f7ff f8c0 	bl	8000b00 <HAL_GetTick>
 8001980:	0003      	movs	r3, r0
 8001982:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001984:	e009      	b.n	800199a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001986:	f7ff f8bb 	bl	8000b00 <HAL_GetTick>
 800198a:	0002      	movs	r2, r0
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	4a1b      	ldr	r2, [pc, #108]	; (8001a00 <HAL_RCC_ClockConfig+0x1f4>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d901      	bls.n	800199a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e02c      	b.n	80019f4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800199a:	4b18      	ldr	r3, [pc, #96]	; (80019fc <HAL_RCC_ClockConfig+0x1f0>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2207      	movs	r2, #7
 80019a0:	4013      	ands	r3, r2
 80019a2:	683a      	ldr	r2, [r7, #0]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d1ee      	bne.n	8001986 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2204      	movs	r2, #4
 80019ae:	4013      	ands	r3, r2
 80019b0:	d009      	beq.n	80019c6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80019b2:	4b14      	ldr	r3, [pc, #80]	; (8001a04 <HAL_RCC_ClockConfig+0x1f8>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	4a15      	ldr	r2, [pc, #84]	; (8001a0c <HAL_RCC_ClockConfig+0x200>)
 80019b8:	4013      	ands	r3, r2
 80019ba:	0019      	movs	r1, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	68da      	ldr	r2, [r3, #12]
 80019c0:	4b10      	ldr	r3, [pc, #64]	; (8001a04 <HAL_RCC_ClockConfig+0x1f8>)
 80019c2:	430a      	orrs	r2, r1
 80019c4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80019c6:	f000 f829 	bl	8001a1c <HAL_RCC_GetSysClockFreq>
 80019ca:	0001      	movs	r1, r0
 80019cc:	4b0d      	ldr	r3, [pc, #52]	; (8001a04 <HAL_RCC_ClockConfig+0x1f8>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	0a1b      	lsrs	r3, r3, #8
 80019d2:	220f      	movs	r2, #15
 80019d4:	401a      	ands	r2, r3
 80019d6:	4b0e      	ldr	r3, [pc, #56]	; (8001a10 <HAL_RCC_ClockConfig+0x204>)
 80019d8:	0092      	lsls	r2, r2, #2
 80019da:	58d3      	ldr	r3, [r2, r3]
 80019dc:	221f      	movs	r2, #31
 80019de:	4013      	ands	r3, r2
 80019e0:	000a      	movs	r2, r1
 80019e2:	40da      	lsrs	r2, r3
 80019e4:	4b0b      	ldr	r3, [pc, #44]	; (8001a14 <HAL_RCC_ClockConfig+0x208>)
 80019e6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80019e8:	4b0b      	ldr	r3, [pc, #44]	; (8001a18 <HAL_RCC_ClockConfig+0x20c>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	0018      	movs	r0, r3
 80019ee:	f7ff f82b 	bl	8000a48 <HAL_InitTick>
 80019f2:	0003      	movs	r3, r0
}
 80019f4:	0018      	movs	r0, r3
 80019f6:	46bd      	mov	sp, r7
 80019f8:	b004      	add	sp, #16
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	40022000 	.word	0x40022000
 8001a00:	00001388 	.word	0x00001388
 8001a04:	40021000 	.word	0x40021000
 8001a08:	fffff0ff 	.word	0xfffff0ff
 8001a0c:	ffff8fff 	.word	0xffff8fff
 8001a10:	08001bb8 	.word	0x08001bb8
 8001a14:	20000000 	.word	0x20000000
 8001a18:	20000004 	.word	0x20000004

08001a1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a22:	4b3c      	ldr	r3, [pc, #240]	; (8001b14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	2238      	movs	r2, #56	; 0x38
 8001a28:	4013      	ands	r3, r2
 8001a2a:	d10f      	bne.n	8001a4c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001a2c:	4b39      	ldr	r3, [pc, #228]	; (8001b14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	0adb      	lsrs	r3, r3, #11
 8001a32:	2207      	movs	r2, #7
 8001a34:	4013      	ands	r3, r2
 8001a36:	2201      	movs	r2, #1
 8001a38:	409a      	lsls	r2, r3
 8001a3a:	0013      	movs	r3, r2
 8001a3c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001a3e:	6839      	ldr	r1, [r7, #0]
 8001a40:	4835      	ldr	r0, [pc, #212]	; (8001b18 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001a42:	f7fe fb5f 	bl	8000104 <__udivsi3>
 8001a46:	0003      	movs	r3, r0
 8001a48:	613b      	str	r3, [r7, #16]
 8001a4a:	e05d      	b.n	8001b08 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a4c:	4b31      	ldr	r3, [pc, #196]	; (8001b14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	2238      	movs	r2, #56	; 0x38
 8001a52:	4013      	ands	r3, r2
 8001a54:	2b08      	cmp	r3, #8
 8001a56:	d102      	bne.n	8001a5e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001a58:	4b30      	ldr	r3, [pc, #192]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x100>)
 8001a5a:	613b      	str	r3, [r7, #16]
 8001a5c:	e054      	b.n	8001b08 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a5e:	4b2d      	ldr	r3, [pc, #180]	; (8001b14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	2238      	movs	r2, #56	; 0x38
 8001a64:	4013      	ands	r3, r2
 8001a66:	2b10      	cmp	r3, #16
 8001a68:	d138      	bne.n	8001adc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001a6a:	4b2a      	ldr	r3, [pc, #168]	; (8001b14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	2203      	movs	r2, #3
 8001a70:	4013      	ands	r3, r2
 8001a72:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a74:	4b27      	ldr	r3, [pc, #156]	; (8001b14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	091b      	lsrs	r3, r3, #4
 8001a7a:	2207      	movs	r2, #7
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	3301      	adds	r3, #1
 8001a80:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	2b03      	cmp	r3, #3
 8001a86:	d10d      	bne.n	8001aa4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a88:	68b9      	ldr	r1, [r7, #8]
 8001a8a:	4824      	ldr	r0, [pc, #144]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x100>)
 8001a8c:	f7fe fb3a 	bl	8000104 <__udivsi3>
 8001a90:	0003      	movs	r3, r0
 8001a92:	0019      	movs	r1, r3
 8001a94:	4b1f      	ldr	r3, [pc, #124]	; (8001b14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	0a1b      	lsrs	r3, r3, #8
 8001a9a:	227f      	movs	r2, #127	; 0x7f
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	434b      	muls	r3, r1
 8001aa0:	617b      	str	r3, [r7, #20]
        break;
 8001aa2:	e00d      	b.n	8001ac0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001aa4:	68b9      	ldr	r1, [r7, #8]
 8001aa6:	481c      	ldr	r0, [pc, #112]	; (8001b18 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001aa8:	f7fe fb2c 	bl	8000104 <__udivsi3>
 8001aac:	0003      	movs	r3, r0
 8001aae:	0019      	movs	r1, r3
 8001ab0:	4b18      	ldr	r3, [pc, #96]	; (8001b14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	0a1b      	lsrs	r3, r3, #8
 8001ab6:	227f      	movs	r2, #127	; 0x7f
 8001ab8:	4013      	ands	r3, r2
 8001aba:	434b      	muls	r3, r1
 8001abc:	617b      	str	r3, [r7, #20]
        break;
 8001abe:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001ac0:	4b14      	ldr	r3, [pc, #80]	; (8001b14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	0f5b      	lsrs	r3, r3, #29
 8001ac6:	2207      	movs	r2, #7
 8001ac8:	4013      	ands	r3, r2
 8001aca:	3301      	adds	r3, #1
 8001acc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001ace:	6879      	ldr	r1, [r7, #4]
 8001ad0:	6978      	ldr	r0, [r7, #20]
 8001ad2:	f7fe fb17 	bl	8000104 <__udivsi3>
 8001ad6:	0003      	movs	r3, r0
 8001ad8:	613b      	str	r3, [r7, #16]
 8001ada:	e015      	b.n	8001b08 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001adc:	4b0d      	ldr	r3, [pc, #52]	; (8001b14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	2238      	movs	r2, #56	; 0x38
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	2b20      	cmp	r3, #32
 8001ae6:	d103      	bne.n	8001af0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001ae8:	2380      	movs	r3, #128	; 0x80
 8001aea:	021b      	lsls	r3, r3, #8
 8001aec:	613b      	str	r3, [r7, #16]
 8001aee:	e00b      	b.n	8001b08 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001af0:	4b08      	ldr	r3, [pc, #32]	; (8001b14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	2238      	movs	r2, #56	; 0x38
 8001af6:	4013      	ands	r3, r2
 8001af8:	2b18      	cmp	r3, #24
 8001afa:	d103      	bne.n	8001b04 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001afc:	23fa      	movs	r3, #250	; 0xfa
 8001afe:	01db      	lsls	r3, r3, #7
 8001b00:	613b      	str	r3, [r7, #16]
 8001b02:	e001      	b.n	8001b08 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001b04:	2300      	movs	r3, #0
 8001b06:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001b08:	693b      	ldr	r3, [r7, #16]
}
 8001b0a:	0018      	movs	r0, r3
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	b006      	add	sp, #24
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	46c0      	nop			; (mov r8, r8)
 8001b14:	40021000 	.word	0x40021000
 8001b18:	00f42400 	.word	0x00f42400
 8001b1c:	007a1200 	.word	0x007a1200

08001b20 <__libc_init_array>:
 8001b20:	b570      	push	{r4, r5, r6, lr}
 8001b22:	2600      	movs	r6, #0
 8001b24:	4d0c      	ldr	r5, [pc, #48]	; (8001b58 <__libc_init_array+0x38>)
 8001b26:	4c0d      	ldr	r4, [pc, #52]	; (8001b5c <__libc_init_array+0x3c>)
 8001b28:	1b64      	subs	r4, r4, r5
 8001b2a:	10a4      	asrs	r4, r4, #2
 8001b2c:	42a6      	cmp	r6, r4
 8001b2e:	d109      	bne.n	8001b44 <__libc_init_array+0x24>
 8001b30:	2600      	movs	r6, #0
 8001b32:	f000 f821 	bl	8001b78 <_init>
 8001b36:	4d0a      	ldr	r5, [pc, #40]	; (8001b60 <__libc_init_array+0x40>)
 8001b38:	4c0a      	ldr	r4, [pc, #40]	; (8001b64 <__libc_init_array+0x44>)
 8001b3a:	1b64      	subs	r4, r4, r5
 8001b3c:	10a4      	asrs	r4, r4, #2
 8001b3e:	42a6      	cmp	r6, r4
 8001b40:	d105      	bne.n	8001b4e <__libc_init_array+0x2e>
 8001b42:	bd70      	pop	{r4, r5, r6, pc}
 8001b44:	00b3      	lsls	r3, r6, #2
 8001b46:	58eb      	ldr	r3, [r5, r3]
 8001b48:	4798      	blx	r3
 8001b4a:	3601      	adds	r6, #1
 8001b4c:	e7ee      	b.n	8001b2c <__libc_init_array+0xc>
 8001b4e:	00b3      	lsls	r3, r6, #2
 8001b50:	58eb      	ldr	r3, [r5, r3]
 8001b52:	4798      	blx	r3
 8001b54:	3601      	adds	r6, #1
 8001b56:	e7f2      	b.n	8001b3e <__libc_init_array+0x1e>
 8001b58:	08001bf8 	.word	0x08001bf8
 8001b5c:	08001bf8 	.word	0x08001bf8
 8001b60:	08001bf8 	.word	0x08001bf8
 8001b64:	08001bfc 	.word	0x08001bfc

08001b68 <memset>:
 8001b68:	0003      	movs	r3, r0
 8001b6a:	1882      	adds	r2, r0, r2
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d100      	bne.n	8001b72 <memset+0xa>
 8001b70:	4770      	bx	lr
 8001b72:	7019      	strb	r1, [r3, #0]
 8001b74:	3301      	adds	r3, #1
 8001b76:	e7f9      	b.n	8001b6c <memset+0x4>

08001b78 <_init>:
 8001b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b7a:	46c0      	nop			; (mov r8, r8)
 8001b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b7e:	bc08      	pop	{r3}
 8001b80:	469e      	mov	lr, r3
 8001b82:	4770      	bx	lr

08001b84 <_fini>:
 8001b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b86:	46c0      	nop			; (mov r8, r8)
 8001b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b8a:	bc08      	pop	{r3}
 8001b8c:	469e      	mov	lr, r3
 8001b8e:	4770      	bx	lr
