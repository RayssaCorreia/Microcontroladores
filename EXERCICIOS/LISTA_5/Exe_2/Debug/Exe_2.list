
Exe_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004828  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080048e4  080048e4  000148e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800496c  0800496c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800496c  0800496c  0001496c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004974  08004974  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004974  08004974  00014974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004978  08004978  00014978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800497c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000000c  08004988  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  08004988  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d228  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c25  00000000  00000000  0002d25c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000940  00000000  00000000  0002ee88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000898  00000000  00000000  0002f7c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a5fe  00000000  00000000  00030060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ba36  00000000  00000000  0004a65e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000abc8b  00000000  00000000  00056094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00101d1f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002014  00000000  00000000  00101d74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080048cc 	.word	0x080048cc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	080048cc 	.word	0x080048cc

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	1c08      	adds	r0, r1, #0
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	469b      	mov	fp, r3
 8000466:	d433      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000468:	465a      	mov	r2, fp
 800046a:	4653      	mov	r3, sl
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83a      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e078      	b.n	8000574 <__udivmoddi4+0x144>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e075      	b.n	800057a <__udivmoddi4+0x14a>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e028      	b.n	80004fa <__udivmoddi4+0xca>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	2320      	movs	r3, #32
 80004d4:	1a9b      	subs	r3, r3, r2
 80004d6:	4652      	mov	r2, sl
 80004d8:	40da      	lsrs	r2, r3
 80004da:	4641      	mov	r1, r8
 80004dc:	0013      	movs	r3, r2
 80004de:	464a      	mov	r2, r9
 80004e0:	408a      	lsls	r2, r1
 80004e2:	0017      	movs	r7, r2
 80004e4:	4642      	mov	r2, r8
 80004e6:	431f      	orrs	r7, r3
 80004e8:	4653      	mov	r3, sl
 80004ea:	4093      	lsls	r3, r2
 80004ec:	001e      	movs	r6, r3
 80004ee:	42af      	cmp	r7, r5
 80004f0:	d9c4      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f2:	2200      	movs	r2, #0
 80004f4:	2300      	movs	r3, #0
 80004f6:	9200      	str	r2, [sp, #0]
 80004f8:	9301      	str	r3, [sp, #4]
 80004fa:	4643      	mov	r3, r8
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d0d9      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000500:	07fb      	lsls	r3, r7, #31
 8000502:	0872      	lsrs	r2, r6, #1
 8000504:	431a      	orrs	r2, r3
 8000506:	4646      	mov	r6, r8
 8000508:	087b      	lsrs	r3, r7, #1
 800050a:	e00e      	b.n	800052a <__udivmoddi4+0xfa>
 800050c:	42ab      	cmp	r3, r5
 800050e:	d101      	bne.n	8000514 <__udivmoddi4+0xe4>
 8000510:	42a2      	cmp	r2, r4
 8000512:	d80c      	bhi.n	800052e <__udivmoddi4+0xfe>
 8000514:	1aa4      	subs	r4, r4, r2
 8000516:	419d      	sbcs	r5, r3
 8000518:	2001      	movs	r0, #1
 800051a:	1924      	adds	r4, r4, r4
 800051c:	416d      	adcs	r5, r5
 800051e:	2100      	movs	r1, #0
 8000520:	3e01      	subs	r6, #1
 8000522:	1824      	adds	r4, r4, r0
 8000524:	414d      	adcs	r5, r1
 8000526:	2e00      	cmp	r6, #0
 8000528:	d006      	beq.n	8000538 <__udivmoddi4+0x108>
 800052a:	42ab      	cmp	r3, r5
 800052c:	d9ee      	bls.n	800050c <__udivmoddi4+0xdc>
 800052e:	3e01      	subs	r6, #1
 8000530:	1924      	adds	r4, r4, r4
 8000532:	416d      	adcs	r5, r5
 8000534:	2e00      	cmp	r6, #0
 8000536:	d1f8      	bne.n	800052a <__udivmoddi4+0xfa>
 8000538:	9800      	ldr	r0, [sp, #0]
 800053a:	9901      	ldr	r1, [sp, #4]
 800053c:	465b      	mov	r3, fp
 800053e:	1900      	adds	r0, r0, r4
 8000540:	4169      	adcs	r1, r5
 8000542:	2b00      	cmp	r3, #0
 8000544:	db24      	blt.n	8000590 <__udivmoddi4+0x160>
 8000546:	002b      	movs	r3, r5
 8000548:	465a      	mov	r2, fp
 800054a:	4644      	mov	r4, r8
 800054c:	40d3      	lsrs	r3, r2
 800054e:	002a      	movs	r2, r5
 8000550:	40e2      	lsrs	r2, r4
 8000552:	001c      	movs	r4, r3
 8000554:	465b      	mov	r3, fp
 8000556:	0015      	movs	r5, r2
 8000558:	2b00      	cmp	r3, #0
 800055a:	db2a      	blt.n	80005b2 <__udivmoddi4+0x182>
 800055c:	0026      	movs	r6, r4
 800055e:	409e      	lsls	r6, r3
 8000560:	0033      	movs	r3, r6
 8000562:	0026      	movs	r6, r4
 8000564:	4647      	mov	r7, r8
 8000566:	40be      	lsls	r6, r7
 8000568:	0032      	movs	r2, r6
 800056a:	1a80      	subs	r0, r0, r2
 800056c:	4199      	sbcs	r1, r3
 800056e:	9000      	str	r0, [sp, #0]
 8000570:	9101      	str	r1, [sp, #4]
 8000572:	e79f      	b.n	80004b4 <__udivmoddi4+0x84>
 8000574:	42a3      	cmp	r3, r4
 8000576:	d8bc      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 8000578:	e783      	b.n	8000482 <__udivmoddi4+0x52>
 800057a:	4642      	mov	r2, r8
 800057c:	2320      	movs	r3, #32
 800057e:	2100      	movs	r1, #0
 8000580:	1a9b      	subs	r3, r3, r2
 8000582:	2200      	movs	r2, #0
 8000584:	9100      	str	r1, [sp, #0]
 8000586:	9201      	str	r2, [sp, #4]
 8000588:	2201      	movs	r2, #1
 800058a:	40da      	lsrs	r2, r3
 800058c:	9201      	str	r2, [sp, #4]
 800058e:	e786      	b.n	800049e <__udivmoddi4+0x6e>
 8000590:	4642      	mov	r2, r8
 8000592:	2320      	movs	r3, #32
 8000594:	1a9b      	subs	r3, r3, r2
 8000596:	002a      	movs	r2, r5
 8000598:	4646      	mov	r6, r8
 800059a:	409a      	lsls	r2, r3
 800059c:	0023      	movs	r3, r4
 800059e:	40f3      	lsrs	r3, r6
 80005a0:	4644      	mov	r4, r8
 80005a2:	4313      	orrs	r3, r2
 80005a4:	002a      	movs	r2, r5
 80005a6:	40e2      	lsrs	r2, r4
 80005a8:	001c      	movs	r4, r3
 80005aa:	465b      	mov	r3, fp
 80005ac:	0015      	movs	r5, r2
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	dad4      	bge.n	800055c <__udivmoddi4+0x12c>
 80005b2:	4642      	mov	r2, r8
 80005b4:	002f      	movs	r7, r5
 80005b6:	2320      	movs	r3, #32
 80005b8:	0026      	movs	r6, r4
 80005ba:	4097      	lsls	r7, r2
 80005bc:	1a9b      	subs	r3, r3, r2
 80005be:	40de      	lsrs	r6, r3
 80005c0:	003b      	movs	r3, r7
 80005c2:	4333      	orrs	r3, r6
 80005c4:	e7cd      	b.n	8000562 <__udivmoddi4+0x132>
 80005c6:	46c0      	nop			; (mov r8, r8)

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	1c08      	adds	r0, r1, #0
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			; (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	; (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
	flagRx = 1;
 8000624:	4b05      	ldr	r3, [pc, #20]	; (800063c <HAL_UART_RxCpltCallback+0x20>)
 8000626:	2201      	movs	r2, #1
 8000628:	701a      	strb	r2, [r3, #0]
	data = temp; // interrupção
 800062a:	4b05      	ldr	r3, [pc, #20]	; (8000640 <HAL_UART_RxCpltCallback+0x24>)
 800062c:	781a      	ldrb	r2, [r3, #0]
 800062e:	4b05      	ldr	r3, [pc, #20]	; (8000644 <HAL_UART_RxCpltCallback+0x28>)
 8000630:	701a      	strb	r2, [r3, #0]
}
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	46bd      	mov	sp, r7
 8000636:	b002      	add	sp, #8
 8000638:	bd80      	pop	{r7, pc}
 800063a:	46c0      	nop			; (mov r8, r8)
 800063c:	20000029 	.word	0x20000029
 8000640:	20000028 	.word	0x20000028
 8000644:	2000002a 	.word	0x2000002a

08000648 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800064c:	f000 fa0a 	bl	8000a64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000650:	f000 f838 	bl	80006c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000654:	f000 f8e6 	bl	8000824 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000658:	f000 f892 	bl	8000780 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
flagRx = 0;
 800065c:	4b15      	ldr	r3, [pc, #84]	; (80006b4 <main+0x6c>)
 800065e:	2200      	movs	r2, #0
 8000660:	701a      	strb	r2, [r3, #0]
data = 'C';
 8000662:	4b15      	ldr	r3, [pc, #84]	; (80006b8 <main+0x70>)
 8000664:	2243      	movs	r2, #67	; 0x43
 8000666:	701a      	strb	r2, [r3, #0]
HAL_UART_Transmit(&huart2, &data, 1, 100);
 8000668:	4913      	ldr	r1, [pc, #76]	; (80006b8 <main+0x70>)
 800066a:	4814      	ldr	r0, [pc, #80]	; (80006bc <main+0x74>)
 800066c:	2364      	movs	r3, #100	; 0x64
 800066e:	2201      	movs	r2, #1
 8000670:	f001 fdcc 	bl	800220c <HAL_UART_Transmit>
HAL_UART_Receive_IT(&huart2, &temp, sizeof(uint8_t)); // abilitando interrupção
 8000674:	4912      	ldr	r1, [pc, #72]	; (80006c0 <main+0x78>)
 8000676:	4b11      	ldr	r3, [pc, #68]	; (80006bc <main+0x74>)
 8000678:	2201      	movs	r2, #1
 800067a:	0018      	movs	r0, r3
 800067c:	f001 ff2e 	bl	80024dc <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (flagRx){ // se for diferente de 0
 8000680:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <main+0x6c>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d0fb      	beq.n	8000680 <main+0x38>
		  flagRx = 0;
 8000688:	4b0a      	ldr	r3, [pc, #40]	; (80006b4 <main+0x6c>)
 800068a:	2200      	movs	r2, #0
 800068c:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Receive_IT(&huart2, &temp, sizeof(uint8_t));
 800068e:	490c      	ldr	r1, [pc, #48]	; (80006c0 <main+0x78>)
 8000690:	4b0a      	ldr	r3, [pc, #40]	; (80006bc <main+0x74>)
 8000692:	2201      	movs	r2, #1
 8000694:	0018      	movs	r0, r3
 8000696:	f001 ff21 	bl	80024dc <HAL_UART_Receive_IT>

		  HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 800069a:	23a0      	movs	r3, #160	; 0xa0
 800069c:	05db      	lsls	r3, r3, #23
 800069e:	2120      	movs	r1, #32
 80006a0:	0018      	movs	r0, r3
 80006a2:	f000 fdaa 	bl	80011fa <HAL_GPIO_TogglePin>
		  HAL_UART_Transmit_IT(&huart2, &data, 1); //sizeof (uint8_t) = 1
 80006a6:	4904      	ldr	r1, [pc, #16]	; (80006b8 <main+0x70>)
 80006a8:	4b04      	ldr	r3, [pc, #16]	; (80006bc <main+0x74>)
 80006aa:	2201      	movs	r2, #1
 80006ac:	0018      	movs	r0, r3
 80006ae:	f001 fe59 	bl	8002364 <HAL_UART_Transmit_IT>
	  if (flagRx){ // se for diferente de 0
 80006b2:	e7e5      	b.n	8000680 <main+0x38>
 80006b4:	20000029 	.word	0x20000029
 80006b8:	2000002a 	.word	0x2000002a
 80006bc:	2000002c 	.word	0x2000002c
 80006c0:	20000028 	.word	0x20000028

080006c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c4:	b590      	push	{r4, r7, lr}
 80006c6:	b095      	sub	sp, #84	; 0x54
 80006c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ca:	2414      	movs	r4, #20
 80006cc:	193b      	adds	r3, r7, r4
 80006ce:	0018      	movs	r0, r3
 80006d0:	233c      	movs	r3, #60	; 0x3c
 80006d2:	001a      	movs	r2, r3
 80006d4:	2100      	movs	r1, #0
 80006d6:	f004 f8f1 	bl	80048bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006da:	1d3b      	adds	r3, r7, #4
 80006dc:	0018      	movs	r0, r3
 80006de:	2310      	movs	r3, #16
 80006e0:	001a      	movs	r2, r3
 80006e2:	2100      	movs	r1, #0
 80006e4:	f004 f8ea 	bl	80048bc <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006e8:	2380      	movs	r3, #128	; 0x80
 80006ea:	009b      	lsls	r3, r3, #2
 80006ec:	0018      	movs	r0, r3
 80006ee:	f000 fd9f 	bl	8001230 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f2:	193b      	adds	r3, r7, r4
 80006f4:	2202      	movs	r2, #2
 80006f6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f8:	193b      	adds	r3, r7, r4
 80006fa:	2280      	movs	r2, #128	; 0x80
 80006fc:	0052      	lsls	r2, r2, #1
 80006fe:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000700:	0021      	movs	r1, r4
 8000702:	187b      	adds	r3, r7, r1
 8000704:	2200      	movs	r2, #0
 8000706:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000708:	187b      	adds	r3, r7, r1
 800070a:	2240      	movs	r2, #64	; 0x40
 800070c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800070e:	187b      	adds	r3, r7, r1
 8000710:	2202      	movs	r2, #2
 8000712:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000714:	187b      	adds	r3, r7, r1
 8000716:	2202      	movs	r2, #2
 8000718:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800071a:	187b      	adds	r3, r7, r1
 800071c:	2200      	movs	r2, #0
 800071e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000720:	187b      	adds	r3, r7, r1
 8000722:	2208      	movs	r2, #8
 8000724:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000726:	187b      	adds	r3, r7, r1
 8000728:	2280      	movs	r2, #128	; 0x80
 800072a:	0292      	lsls	r2, r2, #10
 800072c:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800072e:	187b      	adds	r3, r7, r1
 8000730:	2280      	movs	r2, #128	; 0x80
 8000732:	0492      	lsls	r2, r2, #18
 8000734:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000736:	187b      	adds	r3, r7, r1
 8000738:	2280      	movs	r2, #128	; 0x80
 800073a:	0592      	lsls	r2, r2, #22
 800073c:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800073e:	187b      	adds	r3, r7, r1
 8000740:	0018      	movs	r0, r3
 8000742:	f000 fdc1 	bl	80012c8 <HAL_RCC_OscConfig>
 8000746:	1e03      	subs	r3, r0, #0
 8000748:	d001      	beq.n	800074e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800074a:	f000 f8a1 	bl	8000890 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800074e:	1d3b      	adds	r3, r7, #4
 8000750:	2207      	movs	r2, #7
 8000752:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000754:	1d3b      	adds	r3, r7, #4
 8000756:	2202      	movs	r2, #2
 8000758:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800075a:	1d3b      	adds	r3, r7, #4
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000760:	1d3b      	adds	r3, r7, #4
 8000762:	2200      	movs	r2, #0
 8000764:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000766:	1d3b      	adds	r3, r7, #4
 8000768:	2102      	movs	r1, #2
 800076a:	0018      	movs	r0, r3
 800076c:	f001 f912 	bl	8001994 <HAL_RCC_ClockConfig>
 8000770:	1e03      	subs	r3, r0, #0
 8000772:	d001      	beq.n	8000778 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000774:	f000 f88c 	bl	8000890 <Error_Handler>
  }
}
 8000778:	46c0      	nop			; (mov r8, r8)
 800077a:	46bd      	mov	sp, r7
 800077c:	b015      	add	sp, #84	; 0x54
 800077e:	bd90      	pop	{r4, r7, pc}

08000780 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000784:	4b25      	ldr	r3, [pc, #148]	; (800081c <MX_USART2_UART_Init+0x9c>)
 8000786:	4a26      	ldr	r2, [pc, #152]	; (8000820 <MX_USART2_UART_Init+0xa0>)
 8000788:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800078a:	4b24      	ldr	r3, [pc, #144]	; (800081c <MX_USART2_UART_Init+0x9c>)
 800078c:	22e1      	movs	r2, #225	; 0xe1
 800078e:	0252      	lsls	r2, r2, #9
 8000790:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000792:	4b22      	ldr	r3, [pc, #136]	; (800081c <MX_USART2_UART_Init+0x9c>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000798:	4b20      	ldr	r3, [pc, #128]	; (800081c <MX_USART2_UART_Init+0x9c>)
 800079a:	2200      	movs	r2, #0
 800079c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800079e:	4b1f      	ldr	r3, [pc, #124]	; (800081c <MX_USART2_UART_Init+0x9c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007a4:	4b1d      	ldr	r3, [pc, #116]	; (800081c <MX_USART2_UART_Init+0x9c>)
 80007a6:	220c      	movs	r2, #12
 80007a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007aa:	4b1c      	ldr	r3, [pc, #112]	; (800081c <MX_USART2_UART_Init+0x9c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b0:	4b1a      	ldr	r3, [pc, #104]	; (800081c <MX_USART2_UART_Init+0x9c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007b6:	4b19      	ldr	r3, [pc, #100]	; (800081c <MX_USART2_UART_Init+0x9c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007bc:	4b17      	ldr	r3, [pc, #92]	; (800081c <MX_USART2_UART_Init+0x9c>)
 80007be:	2200      	movs	r2, #0
 80007c0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 80007c2:	4b16      	ldr	r3, [pc, #88]	; (800081c <MX_USART2_UART_Init+0x9c>)
 80007c4:	2220      	movs	r2, #32
 80007c6:	629a      	str	r2, [r3, #40]	; 0x28
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 80007c8:	4b14      	ldr	r3, [pc, #80]	; (800081c <MX_USART2_UART_Init+0x9c>)
 80007ca:	2280      	movs	r2, #128	; 0x80
 80007cc:	0192      	lsls	r2, r2, #6
 80007ce:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007d0:	4b12      	ldr	r3, [pc, #72]	; (800081c <MX_USART2_UART_Init+0x9c>)
 80007d2:	0018      	movs	r0, r3
 80007d4:	f001 fcc4 	bl	8002160 <HAL_UART_Init>
 80007d8:	1e03      	subs	r3, r0, #0
 80007da:	d001      	beq.n	80007e0 <MX_USART2_UART_Init+0x60>
  {
    Error_Handler();
 80007dc:	f000 f858 	bl	8000890 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007e0:	4b0e      	ldr	r3, [pc, #56]	; (800081c <MX_USART2_UART_Init+0x9c>)
 80007e2:	2100      	movs	r1, #0
 80007e4:	0018      	movs	r0, r3
 80007e6:	f003 ff65 	bl	80046b4 <HAL_UARTEx_SetTxFifoThreshold>
 80007ea:	1e03      	subs	r3, r0, #0
 80007ec:	d001      	beq.n	80007f2 <MX_USART2_UART_Init+0x72>
  {
    Error_Handler();
 80007ee:	f000 f84f 	bl	8000890 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007f2:	4b0a      	ldr	r3, [pc, #40]	; (800081c <MX_USART2_UART_Init+0x9c>)
 80007f4:	2100      	movs	r1, #0
 80007f6:	0018      	movs	r0, r3
 80007f8:	f003 ff9c 	bl	8004734 <HAL_UARTEx_SetRxFifoThreshold>
 80007fc:	1e03      	subs	r3, r0, #0
 80007fe:	d001      	beq.n	8000804 <MX_USART2_UART_Init+0x84>
  {
    Error_Handler();
 8000800:	f000 f846 	bl	8000890 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000804:	4b05      	ldr	r3, [pc, #20]	; (800081c <MX_USART2_UART_Init+0x9c>)
 8000806:	0018      	movs	r0, r3
 8000808:	f003 ff1a 	bl	8004640 <HAL_UARTEx_DisableFifoMode>
 800080c:	1e03      	subs	r3, r0, #0
 800080e:	d001      	beq.n	8000814 <MX_USART2_UART_Init+0x94>
  {
    Error_Handler();
 8000810:	f000 f83e 	bl	8000890 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000814:	46c0      	nop			; (mov r8, r8)
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	46c0      	nop			; (mov r8, r8)
 800081c:	2000002c 	.word	0x2000002c
 8000820:	40004400 	.word	0x40004400

08000824 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b086      	sub	sp, #24
 8000828:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082a:	1d3b      	adds	r3, r7, #4
 800082c:	0018      	movs	r0, r3
 800082e:	2314      	movs	r3, #20
 8000830:	001a      	movs	r2, r3
 8000832:	2100      	movs	r1, #0
 8000834:	f004 f842 	bl	80048bc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000838:	4b14      	ldr	r3, [pc, #80]	; (800088c <MX_GPIO_Init+0x68>)
 800083a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800083c:	4b13      	ldr	r3, [pc, #76]	; (800088c <MX_GPIO_Init+0x68>)
 800083e:	2101      	movs	r1, #1
 8000840:	430a      	orrs	r2, r1
 8000842:	635a      	str	r2, [r3, #52]	; 0x34
 8000844:	4b11      	ldr	r3, [pc, #68]	; (800088c <MX_GPIO_Init+0x68>)
 8000846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000848:	2201      	movs	r2, #1
 800084a:	4013      	ands	r3, r2
 800084c:	603b      	str	r3, [r7, #0]
 800084e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000850:	23a0      	movs	r3, #160	; 0xa0
 8000852:	05db      	lsls	r3, r3, #23
 8000854:	2200      	movs	r2, #0
 8000856:	2120      	movs	r1, #32
 8000858:	0018      	movs	r0, r3
 800085a:	f000 fcb1 	bl	80011c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 800085e:	1d3b      	adds	r3, r7, #4
 8000860:	2220      	movs	r2, #32
 8000862:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000864:	1d3b      	adds	r3, r7, #4
 8000866:	2201      	movs	r2, #1
 8000868:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	1d3b      	adds	r3, r7, #4
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000870:	1d3b      	adds	r3, r7, #4
 8000872:	2200      	movs	r2, #0
 8000874:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8000876:	1d3a      	adds	r2, r7, #4
 8000878:	23a0      	movs	r3, #160	; 0xa0
 800087a:	05db      	lsls	r3, r3, #23
 800087c:	0011      	movs	r1, r2
 800087e:	0018      	movs	r0, r3
 8000880:	f000 fb32 	bl	8000ee8 <HAL_GPIO_Init>

}
 8000884:	46c0      	nop			; (mov r8, r8)
 8000886:	46bd      	mov	sp, r7
 8000888:	b006      	add	sp, #24
 800088a:	bd80      	pop	{r7, pc}
 800088c:	40021000 	.word	0x40021000

08000890 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000894:	b672      	cpsid	i
}
 8000896:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000898:	e7fe      	b.n	8000898 <Error_Handler+0x8>
	...

0800089c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008a2:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <HAL_MspInit+0x4c>)
 80008a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008a6:	4b10      	ldr	r3, [pc, #64]	; (80008e8 <HAL_MspInit+0x4c>)
 80008a8:	2101      	movs	r1, #1
 80008aa:	430a      	orrs	r2, r1
 80008ac:	641a      	str	r2, [r3, #64]	; 0x40
 80008ae:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <HAL_MspInit+0x4c>)
 80008b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b2:	2201      	movs	r2, #1
 80008b4:	4013      	ands	r3, r2
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ba:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <HAL_MspInit+0x4c>)
 80008bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008be:	4b0a      	ldr	r3, [pc, #40]	; (80008e8 <HAL_MspInit+0x4c>)
 80008c0:	2180      	movs	r1, #128	; 0x80
 80008c2:	0549      	lsls	r1, r1, #21
 80008c4:	430a      	orrs	r2, r1
 80008c6:	63da      	str	r2, [r3, #60]	; 0x3c
 80008c8:	4b07      	ldr	r3, [pc, #28]	; (80008e8 <HAL_MspInit+0x4c>)
 80008ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008cc:	2380      	movs	r3, #128	; 0x80
 80008ce:	055b      	lsls	r3, r3, #21
 80008d0:	4013      	ands	r3, r2
 80008d2:	603b      	str	r3, [r7, #0]
 80008d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80008d6:	23c0      	movs	r3, #192	; 0xc0
 80008d8:	00db      	lsls	r3, r3, #3
 80008da:	0018      	movs	r0, r3
 80008dc:	f000 f948 	bl	8000b70 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e0:	46c0      	nop			; (mov r8, r8)
 80008e2:	46bd      	mov	sp, r7
 80008e4:	b002      	add	sp, #8
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40021000 	.word	0x40021000

080008ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008ec:	b590      	push	{r4, r7, lr}
 80008ee:	b09d      	sub	sp, #116	; 0x74
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f4:	235c      	movs	r3, #92	; 0x5c
 80008f6:	18fb      	adds	r3, r7, r3
 80008f8:	0018      	movs	r0, r3
 80008fa:	2314      	movs	r3, #20
 80008fc:	001a      	movs	r2, r3
 80008fe:	2100      	movs	r1, #0
 8000900:	f003 ffdc 	bl	80048bc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000904:	2410      	movs	r4, #16
 8000906:	193b      	adds	r3, r7, r4
 8000908:	0018      	movs	r0, r3
 800090a:	234c      	movs	r3, #76	; 0x4c
 800090c:	001a      	movs	r2, r3
 800090e:	2100      	movs	r1, #0
 8000910:	f003 ffd4 	bl	80048bc <memset>
  if(huart->Instance==USART2)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a26      	ldr	r2, [pc, #152]	; (80009b4 <HAL_UART_MspInit+0xc8>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d146      	bne.n	80009ac <HAL_UART_MspInit+0xc0>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800091e:	193b      	adds	r3, r7, r4
 8000920:	2202      	movs	r2, #2
 8000922:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000924:	193b      	adds	r3, r7, r4
 8000926:	2200      	movs	r2, #0
 8000928:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800092a:	193b      	adds	r3, r7, r4
 800092c:	0018      	movs	r0, r3
 800092e:	f001 f9db 	bl	8001ce8 <HAL_RCCEx_PeriphCLKConfig>
 8000932:	1e03      	subs	r3, r0, #0
 8000934:	d001      	beq.n	800093a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000936:	f7ff ffab 	bl	8000890 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800093a:	4b1f      	ldr	r3, [pc, #124]	; (80009b8 <HAL_UART_MspInit+0xcc>)
 800093c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800093e:	4b1e      	ldr	r3, [pc, #120]	; (80009b8 <HAL_UART_MspInit+0xcc>)
 8000940:	2180      	movs	r1, #128	; 0x80
 8000942:	0289      	lsls	r1, r1, #10
 8000944:	430a      	orrs	r2, r1
 8000946:	63da      	str	r2, [r3, #60]	; 0x3c
 8000948:	4b1b      	ldr	r3, [pc, #108]	; (80009b8 <HAL_UART_MspInit+0xcc>)
 800094a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800094c:	2380      	movs	r3, #128	; 0x80
 800094e:	029b      	lsls	r3, r3, #10
 8000950:	4013      	ands	r3, r2
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000956:	4b18      	ldr	r3, [pc, #96]	; (80009b8 <HAL_UART_MspInit+0xcc>)
 8000958:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800095a:	4b17      	ldr	r3, [pc, #92]	; (80009b8 <HAL_UART_MspInit+0xcc>)
 800095c:	2101      	movs	r1, #1
 800095e:	430a      	orrs	r2, r1
 8000960:	635a      	str	r2, [r3, #52]	; 0x34
 8000962:	4b15      	ldr	r3, [pc, #84]	; (80009b8 <HAL_UART_MspInit+0xcc>)
 8000964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000966:	2201      	movs	r2, #1
 8000968:	4013      	ands	r3, r2
 800096a:	60bb      	str	r3, [r7, #8]
 800096c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800096e:	215c      	movs	r1, #92	; 0x5c
 8000970:	187b      	adds	r3, r7, r1
 8000972:	220c      	movs	r2, #12
 8000974:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000976:	187b      	adds	r3, r7, r1
 8000978:	2202      	movs	r2, #2
 800097a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	187b      	adds	r3, r7, r1
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	187b      	adds	r3, r7, r1
 8000984:	2200      	movs	r2, #0
 8000986:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000988:	187b      	adds	r3, r7, r1
 800098a:	2201      	movs	r2, #1
 800098c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098e:	187a      	adds	r2, r7, r1
 8000990:	23a0      	movs	r3, #160	; 0xa0
 8000992:	05db      	lsls	r3, r3, #23
 8000994:	0011      	movs	r1, r2
 8000996:	0018      	movs	r0, r3
 8000998:	f000 faa6 	bl	8000ee8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_LPUART2_IRQn, 0, 0);
 800099c:	2200      	movs	r2, #0
 800099e:	2100      	movs	r1, #0
 80009a0:	201c      	movs	r0, #28
 80009a2:	f000 f9a7 	bl	8000cf4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_LPUART2_IRQn);
 80009a6:	201c      	movs	r0, #28
 80009a8:	f000 f9b9 	bl	8000d1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009ac:	46c0      	nop			; (mov r8, r8)
 80009ae:	46bd      	mov	sp, r7
 80009b0:	b01d      	add	sp, #116	; 0x74
 80009b2:	bd90      	pop	{r4, r7, pc}
 80009b4:	40004400 	.word	0x40004400
 80009b8:	40021000 	.word	0x40021000

080009bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <NMI_Handler+0x4>

080009c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009c2:	b580      	push	{r7, lr}
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009c6:	e7fe      	b.n	80009c6 <HardFault_Handler+0x4>

080009c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009cc:	46c0      	nop			; (mov r8, r8)
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}

080009d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009d2:	b580      	push	{r7, lr}
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009d6:	46c0      	nop			; (mov r8, r8)
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}

080009dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009e0:	f000 f8aa 	bl	8000b38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009e4:	46c0      	nop			; (mov r8, r8)
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
	...

080009ec <USART2_LPUART2_IRQHandler>:

/**
  * @brief This function handles USART2 + LPUART2 Interrupt.
  */
void USART2_LPUART2_IRQHandler(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_LPUART2_IRQn 0 */

  /* USER CODE END USART2_LPUART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009f0:	4b03      	ldr	r3, [pc, #12]	; (8000a00 <USART2_LPUART2_IRQHandler+0x14>)
 80009f2:	0018      	movs	r0, r3
 80009f4:	f001 fde2 	bl	80025bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_LPUART2_IRQn 1 */

  /* USER CODE END USART2_LPUART2_IRQn 1 */
}
 80009f8:	46c0      	nop			; (mov r8, r8)
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	2000002c 	.word	0x2000002c

08000a04 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a08:	46c0      	nop			; (mov r8, r8)
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
	...

08000a10 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a10:	480d      	ldr	r0, [pc, #52]	; (8000a48 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a12:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a14:	f7ff fff6 	bl	8000a04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a18:	480c      	ldr	r0, [pc, #48]	; (8000a4c <LoopForever+0x6>)
  ldr r1, =_edata
 8000a1a:	490d      	ldr	r1, [pc, #52]	; (8000a50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a1c:	4a0d      	ldr	r2, [pc, #52]	; (8000a54 <LoopForever+0xe>)
  movs r3, #0
 8000a1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a20:	e002      	b.n	8000a28 <LoopCopyDataInit>

08000a22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a26:	3304      	adds	r3, #4

08000a28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a2c:	d3f9      	bcc.n	8000a22 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a2e:	4a0a      	ldr	r2, [pc, #40]	; (8000a58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a30:	4c0a      	ldr	r4, [pc, #40]	; (8000a5c <LoopForever+0x16>)
  movs r3, #0
 8000a32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a34:	e001      	b.n	8000a3a <LoopFillZerobss>

08000a36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a38:	3204      	adds	r2, #4

08000a3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a3c:	d3fb      	bcc.n	8000a36 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a3e:	f003 ff19 	bl	8004874 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000a42:	f7ff fe01 	bl	8000648 <main>

08000a46 <LoopForever>:

LoopForever:
  b LoopForever
 8000a46:	e7fe      	b.n	8000a46 <LoopForever>
  ldr   r0, =_estack
 8000a48:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000a4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a50:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a54:	0800497c 	.word	0x0800497c
  ldr r2, =_sbss
 8000a58:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a5c:	200000c0 	.word	0x200000c0

08000a60 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a60:	e7fe      	b.n	8000a60 <ADC1_COMP_IRQHandler>
	...

08000a64 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a6a:	1dfb      	adds	r3, r7, #7
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a70:	4b0b      	ldr	r3, [pc, #44]	; (8000aa0 <HAL_Init+0x3c>)
 8000a72:	681a      	ldr	r2, [r3, #0]
 8000a74:	4b0a      	ldr	r3, [pc, #40]	; (8000aa0 <HAL_Init+0x3c>)
 8000a76:	2180      	movs	r1, #128	; 0x80
 8000a78:	0049      	lsls	r1, r1, #1
 8000a7a:	430a      	orrs	r2, r1
 8000a7c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a7e:	2003      	movs	r0, #3
 8000a80:	f000 f810 	bl	8000aa4 <HAL_InitTick>
 8000a84:	1e03      	subs	r3, r0, #0
 8000a86:	d003      	beq.n	8000a90 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000a88:	1dfb      	adds	r3, r7, #7
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	701a      	strb	r2, [r3, #0]
 8000a8e:	e001      	b.n	8000a94 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000a90:	f7ff ff04 	bl	800089c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a94:	1dfb      	adds	r3, r7, #7
 8000a96:	781b      	ldrb	r3, [r3, #0]
}
 8000a98:	0018      	movs	r0, r3
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	b002      	add	sp, #8
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	40022000 	.word	0x40022000

08000aa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aa4:	b590      	push	{r4, r7, lr}
 8000aa6:	b085      	sub	sp, #20
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000aac:	230f      	movs	r3, #15
 8000aae:	18fb      	adds	r3, r7, r3
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000ab4:	4b1d      	ldr	r3, [pc, #116]	; (8000b2c <HAL_InitTick+0x88>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d02b      	beq.n	8000b14 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000abc:	4b1c      	ldr	r3, [pc, #112]	; (8000b30 <HAL_InitTick+0x8c>)
 8000abe:	681c      	ldr	r4, [r3, #0]
 8000ac0:	4b1a      	ldr	r3, [pc, #104]	; (8000b2c <HAL_InitTick+0x88>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	0019      	movs	r1, r3
 8000ac6:	23fa      	movs	r3, #250	; 0xfa
 8000ac8:	0098      	lsls	r0, r3, #2
 8000aca:	f7ff fb1b 	bl	8000104 <__udivsi3>
 8000ace:	0003      	movs	r3, r0
 8000ad0:	0019      	movs	r1, r3
 8000ad2:	0020      	movs	r0, r4
 8000ad4:	f7ff fb16 	bl	8000104 <__udivsi3>
 8000ad8:	0003      	movs	r3, r0
 8000ada:	0018      	movs	r0, r3
 8000adc:	f000 f92f 	bl	8000d3e <HAL_SYSTICK_Config>
 8000ae0:	1e03      	subs	r3, r0, #0
 8000ae2:	d112      	bne.n	8000b0a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2b03      	cmp	r3, #3
 8000ae8:	d80a      	bhi.n	8000b00 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aea:	6879      	ldr	r1, [r7, #4]
 8000aec:	2301      	movs	r3, #1
 8000aee:	425b      	negs	r3, r3
 8000af0:	2200      	movs	r2, #0
 8000af2:	0018      	movs	r0, r3
 8000af4:	f000 f8fe 	bl	8000cf4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000af8:	4b0e      	ldr	r3, [pc, #56]	; (8000b34 <HAL_InitTick+0x90>)
 8000afa:	687a      	ldr	r2, [r7, #4]
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	e00d      	b.n	8000b1c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000b00:	230f      	movs	r3, #15
 8000b02:	18fb      	adds	r3, r7, r3
 8000b04:	2201      	movs	r2, #1
 8000b06:	701a      	strb	r2, [r3, #0]
 8000b08:	e008      	b.n	8000b1c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b0a:	230f      	movs	r3, #15
 8000b0c:	18fb      	adds	r3, r7, r3
 8000b0e:	2201      	movs	r2, #1
 8000b10:	701a      	strb	r2, [r3, #0]
 8000b12:	e003      	b.n	8000b1c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b14:	230f      	movs	r3, #15
 8000b16:	18fb      	adds	r3, r7, r3
 8000b18:	2201      	movs	r2, #1
 8000b1a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000b1c:	230f      	movs	r3, #15
 8000b1e:	18fb      	adds	r3, r7, r3
 8000b20:	781b      	ldrb	r3, [r3, #0]
}
 8000b22:	0018      	movs	r0, r3
 8000b24:	46bd      	mov	sp, r7
 8000b26:	b005      	add	sp, #20
 8000b28:	bd90      	pop	{r4, r7, pc}
 8000b2a:	46c0      	nop			; (mov r8, r8)
 8000b2c:	20000008 	.word	0x20000008
 8000b30:	20000000 	.word	0x20000000
 8000b34:	20000004 	.word	0x20000004

08000b38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b3c:	4b05      	ldr	r3, [pc, #20]	; (8000b54 <HAL_IncTick+0x1c>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	001a      	movs	r2, r3
 8000b42:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <HAL_IncTick+0x20>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	18d2      	adds	r2, r2, r3
 8000b48:	4b03      	ldr	r3, [pc, #12]	; (8000b58 <HAL_IncTick+0x20>)
 8000b4a:	601a      	str	r2, [r3, #0]
}
 8000b4c:	46c0      	nop			; (mov r8, r8)
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	46c0      	nop			; (mov r8, r8)
 8000b54:	20000008 	.word	0x20000008
 8000b58:	200000bc 	.word	0x200000bc

08000b5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b60:	4b02      	ldr	r3, [pc, #8]	; (8000b6c <HAL_GetTick+0x10>)
 8000b62:	681b      	ldr	r3, [r3, #0]
}
 8000b64:	0018      	movs	r0, r3
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	46c0      	nop			; (mov r8, r8)
 8000b6c:	200000bc 	.word	0x200000bc

08000b70 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000b78:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a06      	ldr	r2, [pc, #24]	; (8000b98 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000b7e:	4013      	ands	r3, r2
 8000b80:	0019      	movs	r1, r3
 8000b82:	4b04      	ldr	r3, [pc, #16]	; (8000b94 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000b84:	687a      	ldr	r2, [r7, #4]
 8000b86:	430a      	orrs	r2, r1
 8000b88:	601a      	str	r2, [r3, #0]
}
 8000b8a:	46c0      	nop			; (mov r8, r8)
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	b002      	add	sp, #8
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	46c0      	nop			; (mov r8, r8)
 8000b94:	40010000 	.word	0x40010000
 8000b98:	fffff9ff 	.word	0xfffff9ff

08000b9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	0002      	movs	r2, r0
 8000ba4:	1dfb      	adds	r3, r7, #7
 8000ba6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ba8:	1dfb      	adds	r3, r7, #7
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	2b7f      	cmp	r3, #127	; 0x7f
 8000bae:	d809      	bhi.n	8000bc4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bb0:	1dfb      	adds	r3, r7, #7
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	001a      	movs	r2, r3
 8000bb6:	231f      	movs	r3, #31
 8000bb8:	401a      	ands	r2, r3
 8000bba:	4b04      	ldr	r3, [pc, #16]	; (8000bcc <__NVIC_EnableIRQ+0x30>)
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	4091      	lsls	r1, r2
 8000bc0:	000a      	movs	r2, r1
 8000bc2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000bc4:	46c0      	nop			; (mov r8, r8)
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	b002      	add	sp, #8
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	e000e100 	.word	0xe000e100

08000bd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bd0:	b590      	push	{r4, r7, lr}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	0002      	movs	r2, r0
 8000bd8:	6039      	str	r1, [r7, #0]
 8000bda:	1dfb      	adds	r3, r7, #7
 8000bdc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bde:	1dfb      	adds	r3, r7, #7
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	2b7f      	cmp	r3, #127	; 0x7f
 8000be4:	d828      	bhi.n	8000c38 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000be6:	4a2f      	ldr	r2, [pc, #188]	; (8000ca4 <__NVIC_SetPriority+0xd4>)
 8000be8:	1dfb      	adds	r3, r7, #7
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	b25b      	sxtb	r3, r3
 8000bee:	089b      	lsrs	r3, r3, #2
 8000bf0:	33c0      	adds	r3, #192	; 0xc0
 8000bf2:	009b      	lsls	r3, r3, #2
 8000bf4:	589b      	ldr	r3, [r3, r2]
 8000bf6:	1dfa      	adds	r2, r7, #7
 8000bf8:	7812      	ldrb	r2, [r2, #0]
 8000bfa:	0011      	movs	r1, r2
 8000bfc:	2203      	movs	r2, #3
 8000bfe:	400a      	ands	r2, r1
 8000c00:	00d2      	lsls	r2, r2, #3
 8000c02:	21ff      	movs	r1, #255	; 0xff
 8000c04:	4091      	lsls	r1, r2
 8000c06:	000a      	movs	r2, r1
 8000c08:	43d2      	mvns	r2, r2
 8000c0a:	401a      	ands	r2, r3
 8000c0c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	019b      	lsls	r3, r3, #6
 8000c12:	22ff      	movs	r2, #255	; 0xff
 8000c14:	401a      	ands	r2, r3
 8000c16:	1dfb      	adds	r3, r7, #7
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	2303      	movs	r3, #3
 8000c1e:	4003      	ands	r3, r0
 8000c20:	00db      	lsls	r3, r3, #3
 8000c22:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c24:	481f      	ldr	r0, [pc, #124]	; (8000ca4 <__NVIC_SetPriority+0xd4>)
 8000c26:	1dfb      	adds	r3, r7, #7
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	b25b      	sxtb	r3, r3
 8000c2c:	089b      	lsrs	r3, r3, #2
 8000c2e:	430a      	orrs	r2, r1
 8000c30:	33c0      	adds	r3, #192	; 0xc0
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c36:	e031      	b.n	8000c9c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c38:	4a1b      	ldr	r2, [pc, #108]	; (8000ca8 <__NVIC_SetPriority+0xd8>)
 8000c3a:	1dfb      	adds	r3, r7, #7
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	0019      	movs	r1, r3
 8000c40:	230f      	movs	r3, #15
 8000c42:	400b      	ands	r3, r1
 8000c44:	3b08      	subs	r3, #8
 8000c46:	089b      	lsrs	r3, r3, #2
 8000c48:	3306      	adds	r3, #6
 8000c4a:	009b      	lsls	r3, r3, #2
 8000c4c:	18d3      	adds	r3, r2, r3
 8000c4e:	3304      	adds	r3, #4
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	1dfa      	adds	r2, r7, #7
 8000c54:	7812      	ldrb	r2, [r2, #0]
 8000c56:	0011      	movs	r1, r2
 8000c58:	2203      	movs	r2, #3
 8000c5a:	400a      	ands	r2, r1
 8000c5c:	00d2      	lsls	r2, r2, #3
 8000c5e:	21ff      	movs	r1, #255	; 0xff
 8000c60:	4091      	lsls	r1, r2
 8000c62:	000a      	movs	r2, r1
 8000c64:	43d2      	mvns	r2, r2
 8000c66:	401a      	ands	r2, r3
 8000c68:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	019b      	lsls	r3, r3, #6
 8000c6e:	22ff      	movs	r2, #255	; 0xff
 8000c70:	401a      	ands	r2, r3
 8000c72:	1dfb      	adds	r3, r7, #7
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	0018      	movs	r0, r3
 8000c78:	2303      	movs	r3, #3
 8000c7a:	4003      	ands	r3, r0
 8000c7c:	00db      	lsls	r3, r3, #3
 8000c7e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c80:	4809      	ldr	r0, [pc, #36]	; (8000ca8 <__NVIC_SetPriority+0xd8>)
 8000c82:	1dfb      	adds	r3, r7, #7
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	001c      	movs	r4, r3
 8000c88:	230f      	movs	r3, #15
 8000c8a:	4023      	ands	r3, r4
 8000c8c:	3b08      	subs	r3, #8
 8000c8e:	089b      	lsrs	r3, r3, #2
 8000c90:	430a      	orrs	r2, r1
 8000c92:	3306      	adds	r3, #6
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	18c3      	adds	r3, r0, r3
 8000c98:	3304      	adds	r3, #4
 8000c9a:	601a      	str	r2, [r3, #0]
}
 8000c9c:	46c0      	nop			; (mov r8, r8)
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	b003      	add	sp, #12
 8000ca2:	bd90      	pop	{r4, r7, pc}
 8000ca4:	e000e100 	.word	0xe000e100
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	1e5a      	subs	r2, r3, #1
 8000cb8:	2380      	movs	r3, #128	; 0x80
 8000cba:	045b      	lsls	r3, r3, #17
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d301      	bcc.n	8000cc4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	e010      	b.n	8000ce6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cc4:	4b0a      	ldr	r3, [pc, #40]	; (8000cf0 <SysTick_Config+0x44>)
 8000cc6:	687a      	ldr	r2, [r7, #4]
 8000cc8:	3a01      	subs	r2, #1
 8000cca:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ccc:	2301      	movs	r3, #1
 8000cce:	425b      	negs	r3, r3
 8000cd0:	2103      	movs	r1, #3
 8000cd2:	0018      	movs	r0, r3
 8000cd4:	f7ff ff7c 	bl	8000bd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cd8:	4b05      	ldr	r3, [pc, #20]	; (8000cf0 <SysTick_Config+0x44>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cde:	4b04      	ldr	r3, [pc, #16]	; (8000cf0 <SysTick_Config+0x44>)
 8000ce0:	2207      	movs	r2, #7
 8000ce2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ce4:	2300      	movs	r3, #0
}
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	b002      	add	sp, #8
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	46c0      	nop			; (mov r8, r8)
 8000cf0:	e000e010 	.word	0xe000e010

08000cf4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60b9      	str	r1, [r7, #8]
 8000cfc:	607a      	str	r2, [r7, #4]
 8000cfe:	210f      	movs	r1, #15
 8000d00:	187b      	adds	r3, r7, r1
 8000d02:	1c02      	adds	r2, r0, #0
 8000d04:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000d06:	68ba      	ldr	r2, [r7, #8]
 8000d08:	187b      	adds	r3, r7, r1
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	b25b      	sxtb	r3, r3
 8000d0e:	0011      	movs	r1, r2
 8000d10:	0018      	movs	r0, r3
 8000d12:	f7ff ff5d 	bl	8000bd0 <__NVIC_SetPriority>
}
 8000d16:	46c0      	nop			; (mov r8, r8)
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	b004      	add	sp, #16
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b082      	sub	sp, #8
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	0002      	movs	r2, r0
 8000d26:	1dfb      	adds	r3, r7, #7
 8000d28:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d2a:	1dfb      	adds	r3, r7, #7
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	b25b      	sxtb	r3, r3
 8000d30:	0018      	movs	r0, r3
 8000d32:	f7ff ff33 	bl	8000b9c <__NVIC_EnableIRQ>
}
 8000d36:	46c0      	nop			; (mov r8, r8)
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	b002      	add	sp, #8
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b082      	sub	sp, #8
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	0018      	movs	r0, r3
 8000d4a:	f7ff ffaf 	bl	8000cac <SysTick_Config>
 8000d4e:	0003      	movs	r3, r0
}
 8000d50:	0018      	movs	r0, r3
 8000d52:	46bd      	mov	sp, r7
 8000d54:	b002      	add	sp, #8
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d101      	bne.n	8000d6a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
 8000d68:	e04f      	b.n	8000e0a <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2225      	movs	r2, #37	; 0x25
 8000d6e:	5c9b      	ldrb	r3, [r3, r2]
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	2b02      	cmp	r3, #2
 8000d74:	d008      	beq.n	8000d88 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2204      	movs	r2, #4
 8000d7a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2224      	movs	r2, #36	; 0x24
 8000d80:	2100      	movs	r1, #0
 8000d82:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000d84:	2301      	movs	r3, #1
 8000d86:	e040      	b.n	8000e0a <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	210e      	movs	r1, #14
 8000d94:	438a      	bics	r2, r1
 8000d96:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000da2:	491c      	ldr	r1, [pc, #112]	; (8000e14 <HAL_DMA_Abort+0xbc>)
 8000da4:	400a      	ands	r2, r1
 8000da6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	2101      	movs	r1, #1
 8000db4:	438a      	bics	r2, r1
 8000db6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dbc:	221c      	movs	r2, #28
 8000dbe:	401a      	ands	r2, r3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	4091      	lsls	r1, r2
 8000dc8:	000a      	movs	r2, r1
 8000dca:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd0:	687a      	ldr	r2, [r7, #4]
 8000dd2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000dd4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d00c      	beq.n	8000df8 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000de8:	490a      	ldr	r1, [pc, #40]	; (8000e14 <HAL_DMA_Abort+0xbc>)
 8000dea:	400a      	ands	r2, r1
 8000dec:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000df2:	687a      	ldr	r2, [r7, #4]
 8000df4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000df6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2225      	movs	r2, #37	; 0x25
 8000dfc:	2101      	movs	r1, #1
 8000dfe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2224      	movs	r2, #36	; 0x24
 8000e04:	2100      	movs	r1, #0
 8000e06:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8000e08:	2300      	movs	r3, #0
}
 8000e0a:	0018      	movs	r0, r3
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	b002      	add	sp, #8
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	46c0      	nop			; (mov r8, r8)
 8000e14:	fffffeff 	.word	0xfffffeff

08000e18 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e20:	210f      	movs	r1, #15
 8000e22:	187b      	adds	r3, r7, r1
 8000e24:	2200      	movs	r2, #0
 8000e26:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2225      	movs	r2, #37	; 0x25
 8000e2c:	5c9b      	ldrb	r3, [r3, r2]
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	2b02      	cmp	r3, #2
 8000e32:	d006      	beq.n	8000e42 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2204      	movs	r2, #4
 8000e38:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000e3a:	187b      	adds	r3, r7, r1
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	701a      	strb	r2, [r3, #0]
 8000e40:	e048      	b.n	8000ed4 <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	210e      	movs	r1, #14
 8000e4e:	438a      	bics	r2, r1
 8000e50:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	438a      	bics	r2, r1
 8000e60:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e6c:	491d      	ldr	r1, [pc, #116]	; (8000ee4 <HAL_DMA_Abort_IT+0xcc>)
 8000e6e:	400a      	ands	r2, r1
 8000e70:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e76:	221c      	movs	r2, #28
 8000e78:	401a      	ands	r2, r3
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7e:	2101      	movs	r1, #1
 8000e80:	4091      	lsls	r1, r2
 8000e82:	000a      	movs	r2, r1
 8000e84:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000e8e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d00c      	beq.n	8000eb2 <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ea2:	4910      	ldr	r1, [pc, #64]	; (8000ee4 <HAL_DMA_Abort_IT+0xcc>)
 8000ea4:	400a      	ands	r2, r1
 8000ea6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eac:	687a      	ldr	r2, [r7, #4]
 8000eae:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000eb0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2225      	movs	r2, #37	; 0x25
 8000eb6:	2101      	movs	r1, #1
 8000eb8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2224      	movs	r2, #36	; 0x24
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d004      	beq.n	8000ed4 <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ece:	687a      	ldr	r2, [r7, #4]
 8000ed0:	0010      	movs	r0, r2
 8000ed2:	4798      	blx	r3
    }
  }
  return status;
 8000ed4:	230f      	movs	r3, #15
 8000ed6:	18fb      	adds	r3, r7, r3
 8000ed8:	781b      	ldrb	r3, [r3, #0]
}
 8000eda:	0018      	movs	r0, r3
 8000edc:	46bd      	mov	sp, r7
 8000ede:	b004      	add	sp, #16
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	46c0      	nop			; (mov r8, r8)
 8000ee4:	fffffeff 	.word	0xfffffeff

08000ee8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b086      	sub	sp, #24
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ef6:	e14d      	b.n	8001194 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2101      	movs	r1, #1
 8000efe:	697a      	ldr	r2, [r7, #20]
 8000f00:	4091      	lsls	r1, r2
 8000f02:	000a      	movs	r2, r1
 8000f04:	4013      	ands	r3, r2
 8000f06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d100      	bne.n	8000f10 <HAL_GPIO_Init+0x28>
 8000f0e:	e13e      	b.n	800118e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	2203      	movs	r2, #3
 8000f16:	4013      	ands	r3, r2
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d005      	beq.n	8000f28 <HAL_GPIO_Init+0x40>
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	2203      	movs	r2, #3
 8000f22:	4013      	ands	r3, r2
 8000f24:	2b02      	cmp	r3, #2
 8000f26:	d130      	bne.n	8000f8a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	689b      	ldr	r3, [r3, #8]
 8000f2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	2203      	movs	r2, #3
 8000f34:	409a      	lsls	r2, r3
 8000f36:	0013      	movs	r3, r2
 8000f38:	43da      	mvns	r2, r3
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	68da      	ldr	r2, [r3, #12]
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	409a      	lsls	r2, r3
 8000f4a:	0013      	movs	r3, r2
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	693a      	ldr	r2, [r7, #16]
 8000f56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f5e:	2201      	movs	r2, #1
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	409a      	lsls	r2, r3
 8000f64:	0013      	movs	r3, r2
 8000f66:	43da      	mvns	r2, r3
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	091b      	lsrs	r3, r3, #4
 8000f74:	2201      	movs	r2, #1
 8000f76:	401a      	ands	r2, r3
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	409a      	lsls	r2, r3
 8000f7c:	0013      	movs	r3, r2
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	2203      	movs	r2, #3
 8000f90:	4013      	ands	r3, r2
 8000f92:	2b03      	cmp	r3, #3
 8000f94:	d017      	beq.n	8000fc6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	68db      	ldr	r3, [r3, #12]
 8000f9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	2203      	movs	r2, #3
 8000fa2:	409a      	lsls	r2, r3
 8000fa4:	0013      	movs	r3, r2
 8000fa6:	43da      	mvns	r2, r3
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	4013      	ands	r3, r2
 8000fac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	689a      	ldr	r2, [r3, #8]
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	409a      	lsls	r2, r3
 8000fb8:	0013      	movs	r3, r2
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	2203      	movs	r2, #3
 8000fcc:	4013      	ands	r3, r2
 8000fce:	2b02      	cmp	r3, #2
 8000fd0:	d123      	bne.n	800101a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	08da      	lsrs	r2, r3, #3
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	3208      	adds	r2, #8
 8000fda:	0092      	lsls	r2, r2, #2
 8000fdc:	58d3      	ldr	r3, [r2, r3]
 8000fde:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	2207      	movs	r2, #7
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	220f      	movs	r2, #15
 8000fea:	409a      	lsls	r2, r3
 8000fec:	0013      	movs	r3, r2
 8000fee:	43da      	mvns	r2, r3
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	691a      	ldr	r2, [r3, #16]
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	2107      	movs	r1, #7
 8000ffe:	400b      	ands	r3, r1
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	409a      	lsls	r2, r3
 8001004:	0013      	movs	r3, r2
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	4313      	orrs	r3, r2
 800100a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	08da      	lsrs	r2, r3, #3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3208      	adds	r2, #8
 8001014:	0092      	lsls	r2, r2, #2
 8001016:	6939      	ldr	r1, [r7, #16]
 8001018:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	2203      	movs	r2, #3
 8001026:	409a      	lsls	r2, r3
 8001028:	0013      	movs	r3, r2
 800102a:	43da      	mvns	r2, r3
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	4013      	ands	r3, r2
 8001030:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	2203      	movs	r2, #3
 8001038:	401a      	ands	r2, r3
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	409a      	lsls	r2, r3
 8001040:	0013      	movs	r3, r2
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	4313      	orrs	r3, r2
 8001046:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685a      	ldr	r2, [r3, #4]
 8001052:	23c0      	movs	r3, #192	; 0xc0
 8001054:	029b      	lsls	r3, r3, #10
 8001056:	4013      	ands	r3, r2
 8001058:	d100      	bne.n	800105c <HAL_GPIO_Init+0x174>
 800105a:	e098      	b.n	800118e <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800105c:	4a53      	ldr	r2, [pc, #332]	; (80011ac <HAL_GPIO_Init+0x2c4>)
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	089b      	lsrs	r3, r3, #2
 8001062:	3318      	adds	r3, #24
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	589b      	ldr	r3, [r3, r2]
 8001068:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	2203      	movs	r2, #3
 800106e:	4013      	ands	r3, r2
 8001070:	00db      	lsls	r3, r3, #3
 8001072:	220f      	movs	r2, #15
 8001074:	409a      	lsls	r2, r3
 8001076:	0013      	movs	r3, r2
 8001078:	43da      	mvns	r2, r3
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	4013      	ands	r3, r2
 800107e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	23a0      	movs	r3, #160	; 0xa0
 8001084:	05db      	lsls	r3, r3, #23
 8001086:	429a      	cmp	r2, r3
 8001088:	d019      	beq.n	80010be <HAL_GPIO_Init+0x1d6>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a48      	ldr	r2, [pc, #288]	; (80011b0 <HAL_GPIO_Init+0x2c8>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d013      	beq.n	80010ba <HAL_GPIO_Init+0x1d2>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a47      	ldr	r2, [pc, #284]	; (80011b4 <HAL_GPIO_Init+0x2cc>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d00d      	beq.n	80010b6 <HAL_GPIO_Init+0x1ce>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a46      	ldr	r2, [pc, #280]	; (80011b8 <HAL_GPIO_Init+0x2d0>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d007      	beq.n	80010b2 <HAL_GPIO_Init+0x1ca>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a45      	ldr	r2, [pc, #276]	; (80011bc <HAL_GPIO_Init+0x2d4>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d101      	bne.n	80010ae <HAL_GPIO_Init+0x1c6>
 80010aa:	2304      	movs	r3, #4
 80010ac:	e008      	b.n	80010c0 <HAL_GPIO_Init+0x1d8>
 80010ae:	2305      	movs	r3, #5
 80010b0:	e006      	b.n	80010c0 <HAL_GPIO_Init+0x1d8>
 80010b2:	2303      	movs	r3, #3
 80010b4:	e004      	b.n	80010c0 <HAL_GPIO_Init+0x1d8>
 80010b6:	2302      	movs	r3, #2
 80010b8:	e002      	b.n	80010c0 <HAL_GPIO_Init+0x1d8>
 80010ba:	2301      	movs	r3, #1
 80010bc:	e000      	b.n	80010c0 <HAL_GPIO_Init+0x1d8>
 80010be:	2300      	movs	r3, #0
 80010c0:	697a      	ldr	r2, [r7, #20]
 80010c2:	2103      	movs	r1, #3
 80010c4:	400a      	ands	r2, r1
 80010c6:	00d2      	lsls	r2, r2, #3
 80010c8:	4093      	lsls	r3, r2
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80010d0:	4936      	ldr	r1, [pc, #216]	; (80011ac <HAL_GPIO_Init+0x2c4>)
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	089b      	lsrs	r3, r3, #2
 80010d6:	3318      	adds	r3, #24
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80010de:	4a33      	ldr	r2, [pc, #204]	; (80011ac <HAL_GPIO_Init+0x2c4>)
 80010e0:	2380      	movs	r3, #128	; 0x80
 80010e2:	58d3      	ldr	r3, [r2, r3]
 80010e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	43da      	mvns	r2, r3
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	4013      	ands	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685a      	ldr	r2, [r3, #4]
 80010f4:	2380      	movs	r3, #128	; 0x80
 80010f6:	025b      	lsls	r3, r3, #9
 80010f8:	4013      	ands	r3, r2
 80010fa:	d003      	beq.n	8001104 <HAL_GPIO_Init+0x21c>
        {
          temp |= iocurrent;
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	4313      	orrs	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001104:	4929      	ldr	r1, [pc, #164]	; (80011ac <HAL_GPIO_Init+0x2c4>)
 8001106:	2280      	movs	r2, #128	; 0x80
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 800110c:	4a27      	ldr	r2, [pc, #156]	; (80011ac <HAL_GPIO_Init+0x2c4>)
 800110e:	2384      	movs	r3, #132	; 0x84
 8001110:	58d3      	ldr	r3, [r2, r3]
 8001112:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	43da      	mvns	r2, r3
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	4013      	ands	r3, r2
 800111c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685a      	ldr	r2, [r3, #4]
 8001122:	2380      	movs	r3, #128	; 0x80
 8001124:	029b      	lsls	r3, r3, #10
 8001126:	4013      	ands	r3, r2
 8001128:	d003      	beq.n	8001132 <HAL_GPIO_Init+0x24a>
        {
          temp |= iocurrent;
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	4313      	orrs	r3, r2
 8001130:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001132:	491e      	ldr	r1, [pc, #120]	; (80011ac <HAL_GPIO_Init+0x2c4>)
 8001134:	2284      	movs	r2, #132	; 0x84
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800113a:	4b1c      	ldr	r3, [pc, #112]	; (80011ac <HAL_GPIO_Init+0x2c4>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	43da      	mvns	r2, r3
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	4013      	ands	r3, r2
 8001148:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685a      	ldr	r2, [r3, #4]
 800114e:	2380      	movs	r3, #128	; 0x80
 8001150:	035b      	lsls	r3, r3, #13
 8001152:	4013      	ands	r3, r2
 8001154:	d003      	beq.n	800115e <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	4313      	orrs	r3, r2
 800115c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800115e:	4b13      	ldr	r3, [pc, #76]	; (80011ac <HAL_GPIO_Init+0x2c4>)
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001164:	4b11      	ldr	r3, [pc, #68]	; (80011ac <HAL_GPIO_Init+0x2c4>)
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	43da      	mvns	r2, r3
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	4013      	ands	r3, r2
 8001172:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685a      	ldr	r2, [r3, #4]
 8001178:	2380      	movs	r3, #128	; 0x80
 800117a:	039b      	lsls	r3, r3, #14
 800117c:	4013      	ands	r3, r2
 800117e:	d003      	beq.n	8001188 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	4313      	orrs	r3, r2
 8001186:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001188:	4b08      	ldr	r3, [pc, #32]	; (80011ac <HAL_GPIO_Init+0x2c4>)
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	3301      	adds	r3, #1
 8001192:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	40da      	lsrs	r2, r3
 800119c:	1e13      	subs	r3, r2, #0
 800119e:	d000      	beq.n	80011a2 <HAL_GPIO_Init+0x2ba>
 80011a0:	e6aa      	b.n	8000ef8 <HAL_GPIO_Init+0x10>
  }
}
 80011a2:	46c0      	nop			; (mov r8, r8)
 80011a4:	46c0      	nop			; (mov r8, r8)
 80011a6:	46bd      	mov	sp, r7
 80011a8:	b006      	add	sp, #24
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	40021800 	.word	0x40021800
 80011b0:	50000400 	.word	0x50000400
 80011b4:	50000800 	.word	0x50000800
 80011b8:	50000c00 	.word	0x50000c00
 80011bc:	50001000 	.word	0x50001000

080011c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	0008      	movs	r0, r1
 80011ca:	0011      	movs	r1, r2
 80011cc:	1cbb      	adds	r3, r7, #2
 80011ce:	1c02      	adds	r2, r0, #0
 80011d0:	801a      	strh	r2, [r3, #0]
 80011d2:	1c7b      	adds	r3, r7, #1
 80011d4:	1c0a      	adds	r2, r1, #0
 80011d6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011d8:	1c7b      	adds	r3, r7, #1
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d004      	beq.n	80011ea <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011e0:	1cbb      	adds	r3, r7, #2
 80011e2:	881a      	ldrh	r2, [r3, #0]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011e8:	e003      	b.n	80011f2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011ea:	1cbb      	adds	r3, r7, #2
 80011ec:	881a      	ldrh	r2, [r3, #0]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011f2:	46c0      	nop			; (mov r8, r8)
 80011f4:	46bd      	mov	sp, r7
 80011f6:	b002      	add	sp, #8
 80011f8:	bd80      	pop	{r7, pc}

080011fa <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b084      	sub	sp, #16
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
 8001202:	000a      	movs	r2, r1
 8001204:	1cbb      	adds	r3, r7, #2
 8001206:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	695b      	ldr	r3, [r3, #20]
 800120c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800120e:	1cbb      	adds	r3, r7, #2
 8001210:	881b      	ldrh	r3, [r3, #0]
 8001212:	68fa      	ldr	r2, [r7, #12]
 8001214:	4013      	ands	r3, r2
 8001216:	041a      	lsls	r2, r3, #16
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	43db      	mvns	r3, r3
 800121c:	1cb9      	adds	r1, r7, #2
 800121e:	8809      	ldrh	r1, [r1, #0]
 8001220:	400b      	ands	r3, r1
 8001222:	431a      	orrs	r2, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	619a      	str	r2, [r3, #24]
}
 8001228:	46c0      	nop			; (mov r8, r8)
 800122a:	46bd      	mov	sp, r7
 800122c:	b004      	add	sp, #16
 800122e:	bd80      	pop	{r7, pc}

08001230 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001238:	4b19      	ldr	r3, [pc, #100]	; (80012a0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a19      	ldr	r2, [pc, #100]	; (80012a4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800123e:	4013      	ands	r3, r2
 8001240:	0019      	movs	r1, r3
 8001242:	4b17      	ldr	r3, [pc, #92]	; (80012a0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	430a      	orrs	r2, r1
 8001248:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	2380      	movs	r3, #128	; 0x80
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	429a      	cmp	r2, r3
 8001252:	d11f      	bne.n	8001294 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001254:	4b14      	ldr	r3, [pc, #80]	; (80012a8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	0013      	movs	r3, r2
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	189b      	adds	r3, r3, r2
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	4912      	ldr	r1, [pc, #72]	; (80012ac <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001262:	0018      	movs	r0, r3
 8001264:	f7fe ff4e 	bl	8000104 <__udivsi3>
 8001268:	0003      	movs	r3, r0
 800126a:	3301      	adds	r3, #1
 800126c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800126e:	e008      	b.n	8001282 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d003      	beq.n	800127e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	3b01      	subs	r3, #1
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	e001      	b.n	8001282 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	e009      	b.n	8001296 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001282:	4b07      	ldr	r3, [pc, #28]	; (80012a0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001284:	695a      	ldr	r2, [r3, #20]
 8001286:	2380      	movs	r3, #128	; 0x80
 8001288:	00db      	lsls	r3, r3, #3
 800128a:	401a      	ands	r2, r3
 800128c:	2380      	movs	r3, #128	; 0x80
 800128e:	00db      	lsls	r3, r3, #3
 8001290:	429a      	cmp	r2, r3
 8001292:	d0ed      	beq.n	8001270 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001294:	2300      	movs	r3, #0
}
 8001296:	0018      	movs	r0, r3
 8001298:	46bd      	mov	sp, r7
 800129a:	b004      	add	sp, #16
 800129c:	bd80      	pop	{r7, pc}
 800129e:	46c0      	nop			; (mov r8, r8)
 80012a0:	40007000 	.word	0x40007000
 80012a4:	fffff9ff 	.word	0xfffff9ff
 80012a8:	20000000 	.word	0x20000000
 80012ac:	000f4240 	.word	0x000f4240

080012b0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80012b4:	4b03      	ldr	r3, [pc, #12]	; (80012c4 <LL_RCC_GetAPB1Prescaler+0x14>)
 80012b6:	689a      	ldr	r2, [r3, #8]
 80012b8:	23e0      	movs	r3, #224	; 0xe0
 80012ba:	01db      	lsls	r3, r3, #7
 80012bc:	4013      	ands	r3, r2
}
 80012be:	0018      	movs	r0, r3
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	40021000 	.word	0x40021000

080012c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b088      	sub	sp, #32
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d102      	bne.n	80012dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	f000 fb56 	bl	8001988 <HAL_RCC_OscConfig+0x6c0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2201      	movs	r2, #1
 80012e2:	4013      	ands	r3, r2
 80012e4:	d100      	bne.n	80012e8 <HAL_RCC_OscConfig+0x20>
 80012e6:	e07d      	b.n	80013e4 <HAL_RCC_OscConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012e8:	4bc3      	ldr	r3, [pc, #780]	; (80015f8 <HAL_RCC_OscConfig+0x330>)
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	2238      	movs	r2, #56	; 0x38
 80012ee:	4013      	ands	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012f2:	4bc1      	ldr	r3, [pc, #772]	; (80015f8 <HAL_RCC_OscConfig+0x330>)
 80012f4:	68db      	ldr	r3, [r3, #12]
 80012f6:	2203      	movs	r2, #3
 80012f8:	4013      	ands	r3, r2
 80012fa:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	2b10      	cmp	r3, #16
 8001300:	d102      	bne.n	8001308 <HAL_RCC_OscConfig+0x40>
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	2b03      	cmp	r3, #3
 8001306:	d002      	beq.n	800130e <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	2b08      	cmp	r3, #8
 800130c:	d10c      	bne.n	8001328 <HAL_RCC_OscConfig+0x60>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800130e:	4bba      	ldr	r3, [pc, #744]	; (80015f8 <HAL_RCC_OscConfig+0x330>)
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	2380      	movs	r3, #128	; 0x80
 8001314:	029b      	lsls	r3, r3, #10
 8001316:	4013      	ands	r3, r2
 8001318:	d063      	beq.n	80013e2 <HAL_RCC_OscConfig+0x11a>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d15f      	bne.n	80013e2 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	f000 fb30 	bl	8001988 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	685a      	ldr	r2, [r3, #4]
 800132c:	2380      	movs	r3, #128	; 0x80
 800132e:	025b      	lsls	r3, r3, #9
 8001330:	429a      	cmp	r2, r3
 8001332:	d107      	bne.n	8001344 <HAL_RCC_OscConfig+0x7c>
 8001334:	4bb0      	ldr	r3, [pc, #704]	; (80015f8 <HAL_RCC_OscConfig+0x330>)
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	4baf      	ldr	r3, [pc, #700]	; (80015f8 <HAL_RCC_OscConfig+0x330>)
 800133a:	2180      	movs	r1, #128	; 0x80
 800133c:	0249      	lsls	r1, r1, #9
 800133e:	430a      	orrs	r2, r1
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	e020      	b.n	8001386 <HAL_RCC_OscConfig+0xbe>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685a      	ldr	r2, [r3, #4]
 8001348:	23a0      	movs	r3, #160	; 0xa0
 800134a:	02db      	lsls	r3, r3, #11
 800134c:	429a      	cmp	r2, r3
 800134e:	d10e      	bne.n	800136e <HAL_RCC_OscConfig+0xa6>
 8001350:	4ba9      	ldr	r3, [pc, #676]	; (80015f8 <HAL_RCC_OscConfig+0x330>)
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	4ba8      	ldr	r3, [pc, #672]	; (80015f8 <HAL_RCC_OscConfig+0x330>)
 8001356:	2180      	movs	r1, #128	; 0x80
 8001358:	02c9      	lsls	r1, r1, #11
 800135a:	430a      	orrs	r2, r1
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	4ba6      	ldr	r3, [pc, #664]	; (80015f8 <HAL_RCC_OscConfig+0x330>)
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	4ba5      	ldr	r3, [pc, #660]	; (80015f8 <HAL_RCC_OscConfig+0x330>)
 8001364:	2180      	movs	r1, #128	; 0x80
 8001366:	0249      	lsls	r1, r1, #9
 8001368:	430a      	orrs	r2, r1
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	e00b      	b.n	8001386 <HAL_RCC_OscConfig+0xbe>
 800136e:	4ba2      	ldr	r3, [pc, #648]	; (80015f8 <HAL_RCC_OscConfig+0x330>)
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	4ba1      	ldr	r3, [pc, #644]	; (80015f8 <HAL_RCC_OscConfig+0x330>)
 8001374:	49a1      	ldr	r1, [pc, #644]	; (80015fc <HAL_RCC_OscConfig+0x334>)
 8001376:	400a      	ands	r2, r1
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	4b9f      	ldr	r3, [pc, #636]	; (80015f8 <HAL_RCC_OscConfig+0x330>)
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	4b9e      	ldr	r3, [pc, #632]	; (80015f8 <HAL_RCC_OscConfig+0x330>)
 8001380:	499f      	ldr	r1, [pc, #636]	; (8001600 <HAL_RCC_OscConfig+0x338>)
 8001382:	400a      	ands	r2, r1
 8001384:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d014      	beq.n	80013b8 <HAL_RCC_OscConfig+0xf0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800138e:	f7ff fbe5 	bl	8000b5c <HAL_GetTick>
 8001392:	0003      	movs	r3, r0
 8001394:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001396:	e008      	b.n	80013aa <HAL_RCC_OscConfig+0xe2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001398:	f7ff fbe0 	bl	8000b5c <HAL_GetTick>
 800139c:	0002      	movs	r2, r0
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	2b64      	cmp	r3, #100	; 0x64
 80013a4:	d901      	bls.n	80013aa <HAL_RCC_OscConfig+0xe2>
          {
            return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e2ee      	b.n	8001988 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013aa:	4b93      	ldr	r3, [pc, #588]	; (80015f8 <HAL_RCC_OscConfig+0x330>)
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	2380      	movs	r3, #128	; 0x80
 80013b0:	029b      	lsls	r3, r3, #10
 80013b2:	4013      	ands	r3, r2
 80013b4:	d0f0      	beq.n	8001398 <HAL_RCC_OscConfig+0xd0>
 80013b6:	e015      	b.n	80013e4 <HAL_RCC_OscConfig+0x11c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b8:	f7ff fbd0 	bl	8000b5c <HAL_GetTick>
 80013bc:	0003      	movs	r3, r0
 80013be:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013c0:	e008      	b.n	80013d4 <HAL_RCC_OscConfig+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013c2:	f7ff fbcb 	bl	8000b5c <HAL_GetTick>
 80013c6:	0002      	movs	r2, r0
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	2b64      	cmp	r3, #100	; 0x64
 80013ce:	d901      	bls.n	80013d4 <HAL_RCC_OscConfig+0x10c>
          {
            return HAL_TIMEOUT;
 80013d0:	2303      	movs	r3, #3
 80013d2:	e2d9      	b.n	8001988 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013d4:	4b88      	ldr	r3, [pc, #544]	; (80015f8 <HAL_RCC_OscConfig+0x330>)
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	2380      	movs	r3, #128	; 0x80
 80013da:	029b      	lsls	r3, r3, #10
 80013dc:	4013      	ands	r3, r2
 80013de:	d1f0      	bne.n	80013c2 <HAL_RCC_OscConfig+0xfa>
 80013e0:	e000      	b.n	80013e4 <HAL_RCC_OscConfig+0x11c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013e2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2202      	movs	r2, #2
 80013ea:	4013      	ands	r3, r2
 80013ec:	d100      	bne.n	80013f0 <HAL_RCC_OscConfig+0x128>
 80013ee:	e099      	b.n	8001524 <HAL_RCC_OscConfig+0x25c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013f0:	4b81      	ldr	r3, [pc, #516]	; (80015f8 <HAL_RCC_OscConfig+0x330>)
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	2238      	movs	r2, #56	; 0x38
 80013f6:	4013      	ands	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013fa:	4b7f      	ldr	r3, [pc, #508]	; (80015f8 <HAL_RCC_OscConfig+0x330>)
 80013fc:	68db      	ldr	r3, [r3, #12]
 80013fe:	2203      	movs	r2, #3
 8001400:	4013      	ands	r3, r2
 8001402:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	2b10      	cmp	r3, #16
 8001408:	d102      	bne.n	8001410 <HAL_RCC_OscConfig+0x148>
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	2b02      	cmp	r3, #2
 800140e:	d002      	beq.n	8001416 <HAL_RCC_OscConfig+0x14e>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d135      	bne.n	8001482 <HAL_RCC_OscConfig+0x1ba>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001416:	4b78      	ldr	r3, [pc, #480]	; (80015f8 <HAL_RCC_OscConfig+0x330>)
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	2380      	movs	r3, #128	; 0x80
 800141c:	00db      	lsls	r3, r3, #3
 800141e:	4013      	ands	r3, r2
 8001420:	d005      	beq.n	800142e <HAL_RCC_OscConfig+0x166>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	68db      	ldr	r3, [r3, #12]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d101      	bne.n	800142e <HAL_RCC_OscConfig+0x166>
      {
        return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e2ac      	b.n	8001988 <HAL_RCC_OscConfig+0x6c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800142e:	4b72      	ldr	r3, [pc, #456]	; (80015f8 <HAL_RCC_OscConfig+0x330>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	4a74      	ldr	r2, [pc, #464]	; (8001604 <HAL_RCC_OscConfig+0x33c>)
 8001434:	4013      	ands	r3, r2
 8001436:	0019      	movs	r1, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	695b      	ldr	r3, [r3, #20]
 800143c:	021a      	lsls	r2, r3, #8
 800143e:	4b6e      	ldr	r3, [pc, #440]	; (80015f8 <HAL_RCC_OscConfig+0x330>)
 8001440:	430a      	orrs	r2, r1
 8001442:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d112      	bne.n	8001470 <HAL_RCC_OscConfig+0x1a8>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800144a:	4b6b      	ldr	r3, [pc, #428]	; (80015f8 <HAL_RCC_OscConfig+0x330>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a6e      	ldr	r2, [pc, #440]	; (8001608 <HAL_RCC_OscConfig+0x340>)
 8001450:	4013      	ands	r3, r2
 8001452:	0019      	movs	r1, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	691a      	ldr	r2, [r3, #16]
 8001458:	4b67      	ldr	r3, [pc, #412]	; (80015f8 <HAL_RCC_OscConfig+0x330>)
 800145a:	430a      	orrs	r2, r1
 800145c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800145e:	4b66      	ldr	r3, [pc, #408]	; (80015f8 <HAL_RCC_OscConfig+0x330>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	0adb      	lsrs	r3, r3, #11
 8001464:	2207      	movs	r2, #7
 8001466:	4013      	ands	r3, r2
 8001468:	4a68      	ldr	r2, [pc, #416]	; (800160c <HAL_RCC_OscConfig+0x344>)
 800146a:	40da      	lsrs	r2, r3
 800146c:	4b68      	ldr	r3, [pc, #416]	; (8001610 <HAL_RCC_OscConfig+0x348>)
 800146e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001470:	4b68      	ldr	r3, [pc, #416]	; (8001614 <HAL_RCC_OscConfig+0x34c>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	0018      	movs	r0, r3
 8001476:	f7ff fb15 	bl	8000aa4 <HAL_InitTick>
 800147a:	1e03      	subs	r3, r0, #0
 800147c:	d051      	beq.n	8001522 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e282      	b.n	8001988 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	68db      	ldr	r3, [r3, #12]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d030      	beq.n	80014ec <HAL_RCC_OscConfig+0x224>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800148a:	4b5b      	ldr	r3, [pc, #364]	; (80015f8 <HAL_RCC_OscConfig+0x330>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a5e      	ldr	r2, [pc, #376]	; (8001608 <HAL_RCC_OscConfig+0x340>)
 8001490:	4013      	ands	r3, r2
 8001492:	0019      	movs	r1, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	691a      	ldr	r2, [r3, #16]
 8001498:	4b57      	ldr	r3, [pc, #348]	; (80015f8 <HAL_RCC_OscConfig+0x330>)
 800149a:	430a      	orrs	r2, r1
 800149c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800149e:	4b56      	ldr	r3, [pc, #344]	; (80015f8 <HAL_RCC_OscConfig+0x330>)
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	4b55      	ldr	r3, [pc, #340]	; (80015f8 <HAL_RCC_OscConfig+0x330>)
 80014a4:	2180      	movs	r1, #128	; 0x80
 80014a6:	0049      	lsls	r1, r1, #1
 80014a8:	430a      	orrs	r2, r1
 80014aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ac:	f7ff fb56 	bl	8000b5c <HAL_GetTick>
 80014b0:	0003      	movs	r3, r0
 80014b2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014b4:	e008      	b.n	80014c8 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014b6:	f7ff fb51 	bl	8000b5c <HAL_GetTick>
 80014ba:	0002      	movs	r2, r0
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d901      	bls.n	80014c8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e25f      	b.n	8001988 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014c8:	4b4b      	ldr	r3, [pc, #300]	; (80015f8 <HAL_RCC_OscConfig+0x330>)
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	2380      	movs	r3, #128	; 0x80
 80014ce:	00db      	lsls	r3, r3, #3
 80014d0:	4013      	ands	r3, r2
 80014d2:	d0f0      	beq.n	80014b6 <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014d4:	4b48      	ldr	r3, [pc, #288]	; (80015f8 <HAL_RCC_OscConfig+0x330>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	4a4a      	ldr	r2, [pc, #296]	; (8001604 <HAL_RCC_OscConfig+0x33c>)
 80014da:	4013      	ands	r3, r2
 80014dc:	0019      	movs	r1, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	695b      	ldr	r3, [r3, #20]
 80014e2:	021a      	lsls	r2, r3, #8
 80014e4:	4b44      	ldr	r3, [pc, #272]	; (80015f8 <HAL_RCC_OscConfig+0x330>)
 80014e6:	430a      	orrs	r2, r1
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	e01b      	b.n	8001524 <HAL_RCC_OscConfig+0x25c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80014ec:	4b42      	ldr	r3, [pc, #264]	; (80015f8 <HAL_RCC_OscConfig+0x330>)
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	4b41      	ldr	r3, [pc, #260]	; (80015f8 <HAL_RCC_OscConfig+0x330>)
 80014f2:	4949      	ldr	r1, [pc, #292]	; (8001618 <HAL_RCC_OscConfig+0x350>)
 80014f4:	400a      	ands	r2, r1
 80014f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f8:	f7ff fb30 	bl	8000b5c <HAL_GetTick>
 80014fc:	0003      	movs	r3, r0
 80014fe:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001500:	e008      	b.n	8001514 <HAL_RCC_OscConfig+0x24c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001502:	f7ff fb2b 	bl	8000b5c <HAL_GetTick>
 8001506:	0002      	movs	r2, r0
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	2b02      	cmp	r3, #2
 800150e:	d901      	bls.n	8001514 <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	e239      	b.n	8001988 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001514:	4b38      	ldr	r3, [pc, #224]	; (80015f8 <HAL_RCC_OscConfig+0x330>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	2380      	movs	r3, #128	; 0x80
 800151a:	00db      	lsls	r3, r3, #3
 800151c:	4013      	ands	r3, r2
 800151e:	d1f0      	bne.n	8001502 <HAL_RCC_OscConfig+0x23a>
 8001520:	e000      	b.n	8001524 <HAL_RCC_OscConfig+0x25c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001522:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2208      	movs	r2, #8
 800152a:	4013      	ands	r3, r2
 800152c:	d047      	beq.n	80015be <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800152e:	4b32      	ldr	r3, [pc, #200]	; (80015f8 <HAL_RCC_OscConfig+0x330>)
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	2238      	movs	r2, #56	; 0x38
 8001534:	4013      	ands	r3, r2
 8001536:	2b18      	cmp	r3, #24
 8001538:	d10a      	bne.n	8001550 <HAL_RCC_OscConfig+0x288>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800153a:	4b2f      	ldr	r3, [pc, #188]	; (80015f8 <HAL_RCC_OscConfig+0x330>)
 800153c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800153e:	2202      	movs	r2, #2
 8001540:	4013      	ands	r3, r2
 8001542:	d03c      	beq.n	80015be <HAL_RCC_OscConfig+0x2f6>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	699b      	ldr	r3, [r3, #24]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d138      	bne.n	80015be <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e21b      	b.n	8001988 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	699b      	ldr	r3, [r3, #24]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d019      	beq.n	800158c <HAL_RCC_OscConfig+0x2c4>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001558:	4b27      	ldr	r3, [pc, #156]	; (80015f8 <HAL_RCC_OscConfig+0x330>)
 800155a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800155c:	4b26      	ldr	r3, [pc, #152]	; (80015f8 <HAL_RCC_OscConfig+0x330>)
 800155e:	2101      	movs	r1, #1
 8001560:	430a      	orrs	r2, r1
 8001562:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001564:	f7ff fafa 	bl	8000b5c <HAL_GetTick>
 8001568:	0003      	movs	r3, r0
 800156a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800156c:	e008      	b.n	8001580 <HAL_RCC_OscConfig+0x2b8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800156e:	f7ff faf5 	bl	8000b5c <HAL_GetTick>
 8001572:	0002      	movs	r2, r0
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	2b02      	cmp	r3, #2
 800157a:	d901      	bls.n	8001580 <HAL_RCC_OscConfig+0x2b8>
          {
            return HAL_TIMEOUT;
 800157c:	2303      	movs	r3, #3
 800157e:	e203      	b.n	8001988 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001580:	4b1d      	ldr	r3, [pc, #116]	; (80015f8 <HAL_RCC_OscConfig+0x330>)
 8001582:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001584:	2202      	movs	r2, #2
 8001586:	4013      	ands	r3, r2
 8001588:	d0f1      	beq.n	800156e <HAL_RCC_OscConfig+0x2a6>
 800158a:	e018      	b.n	80015be <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800158c:	4b1a      	ldr	r3, [pc, #104]	; (80015f8 <HAL_RCC_OscConfig+0x330>)
 800158e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001590:	4b19      	ldr	r3, [pc, #100]	; (80015f8 <HAL_RCC_OscConfig+0x330>)
 8001592:	2101      	movs	r1, #1
 8001594:	438a      	bics	r2, r1
 8001596:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001598:	f7ff fae0 	bl	8000b5c <HAL_GetTick>
 800159c:	0003      	movs	r3, r0
 800159e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015a0:	e008      	b.n	80015b4 <HAL_RCC_OscConfig+0x2ec>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015a2:	f7ff fadb 	bl	8000b5c <HAL_GetTick>
 80015a6:	0002      	movs	r2, r0
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d901      	bls.n	80015b4 <HAL_RCC_OscConfig+0x2ec>
          {
            return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e1e9      	b.n	8001988 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015b4:	4b10      	ldr	r3, [pc, #64]	; (80015f8 <HAL_RCC_OscConfig+0x330>)
 80015b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015b8:	2202      	movs	r2, #2
 80015ba:	4013      	ands	r3, r2
 80015bc:	d1f1      	bne.n	80015a2 <HAL_RCC_OscConfig+0x2da>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2204      	movs	r2, #4
 80015c4:	4013      	ands	r3, r2
 80015c6:	d100      	bne.n	80015ca <HAL_RCC_OscConfig+0x302>
 80015c8:	e0c6      	b.n	8001758 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015ca:	231f      	movs	r3, #31
 80015cc:	18fb      	adds	r3, r7, r3
 80015ce:	2200      	movs	r2, #0
 80015d0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80015d2:	4b09      	ldr	r3, [pc, #36]	; (80015f8 <HAL_RCC_OscConfig+0x330>)
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	2238      	movs	r2, #56	; 0x38
 80015d8:	4013      	ands	r3, r2
 80015da:	2b20      	cmp	r3, #32
 80015dc:	d11e      	bne.n	800161c <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80015de:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <HAL_RCC_OscConfig+0x330>)
 80015e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015e2:	2202      	movs	r2, #2
 80015e4:	4013      	ands	r3, r2
 80015e6:	d100      	bne.n	80015ea <HAL_RCC_OscConfig+0x322>
 80015e8:	e0b6      	b.n	8001758 <HAL_RCC_OscConfig+0x490>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d000      	beq.n	80015f4 <HAL_RCC_OscConfig+0x32c>
 80015f2:	e0b1      	b.n	8001758 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e1c7      	b.n	8001988 <HAL_RCC_OscConfig+0x6c0>
 80015f8:	40021000 	.word	0x40021000
 80015fc:	fffeffff 	.word	0xfffeffff
 8001600:	fffbffff 	.word	0xfffbffff
 8001604:	ffff80ff 	.word	0xffff80ff
 8001608:	ffffc7ff 	.word	0xffffc7ff
 800160c:	00f42400 	.word	0x00f42400
 8001610:	20000000 	.word	0x20000000
 8001614:	20000004 	.word	0x20000004
 8001618:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800161c:	4bb8      	ldr	r3, [pc, #736]	; (8001900 <HAL_RCC_OscConfig+0x638>)
 800161e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001620:	2380      	movs	r3, #128	; 0x80
 8001622:	055b      	lsls	r3, r3, #21
 8001624:	4013      	ands	r3, r2
 8001626:	d101      	bne.n	800162c <HAL_RCC_OscConfig+0x364>
 8001628:	2301      	movs	r3, #1
 800162a:	e000      	b.n	800162e <HAL_RCC_OscConfig+0x366>
 800162c:	2300      	movs	r3, #0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d011      	beq.n	8001656 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001632:	4bb3      	ldr	r3, [pc, #716]	; (8001900 <HAL_RCC_OscConfig+0x638>)
 8001634:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001636:	4bb2      	ldr	r3, [pc, #712]	; (8001900 <HAL_RCC_OscConfig+0x638>)
 8001638:	2180      	movs	r1, #128	; 0x80
 800163a:	0549      	lsls	r1, r1, #21
 800163c:	430a      	orrs	r2, r1
 800163e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001640:	4baf      	ldr	r3, [pc, #700]	; (8001900 <HAL_RCC_OscConfig+0x638>)
 8001642:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001644:	2380      	movs	r3, #128	; 0x80
 8001646:	055b      	lsls	r3, r3, #21
 8001648:	4013      	ands	r3, r2
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800164e:	231f      	movs	r3, #31
 8001650:	18fb      	adds	r3, r7, r3
 8001652:	2201      	movs	r2, #1
 8001654:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001656:	4bab      	ldr	r3, [pc, #684]	; (8001904 <HAL_RCC_OscConfig+0x63c>)
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	2380      	movs	r3, #128	; 0x80
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	4013      	ands	r3, r2
 8001660:	d11a      	bne.n	8001698 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001662:	4ba8      	ldr	r3, [pc, #672]	; (8001904 <HAL_RCC_OscConfig+0x63c>)
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	4ba7      	ldr	r3, [pc, #668]	; (8001904 <HAL_RCC_OscConfig+0x63c>)
 8001668:	2180      	movs	r1, #128	; 0x80
 800166a:	0049      	lsls	r1, r1, #1
 800166c:	430a      	orrs	r2, r1
 800166e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001670:	f7ff fa74 	bl	8000b5c <HAL_GetTick>
 8001674:	0003      	movs	r3, r0
 8001676:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001678:	e008      	b.n	800168c <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800167a:	f7ff fa6f 	bl	8000b5c <HAL_GetTick>
 800167e:	0002      	movs	r2, r0
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	2b02      	cmp	r3, #2
 8001686:	d901      	bls.n	800168c <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8001688:	2303      	movs	r3, #3
 800168a:	e17d      	b.n	8001988 <HAL_RCC_OscConfig+0x6c0>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800168c:	4b9d      	ldr	r3, [pc, #628]	; (8001904 <HAL_RCC_OscConfig+0x63c>)
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	2380      	movs	r3, #128	; 0x80
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	4013      	ands	r3, r2
 8001696:	d0f0      	beq.n	800167a <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d106      	bne.n	80016ae <HAL_RCC_OscConfig+0x3e6>
 80016a0:	4b97      	ldr	r3, [pc, #604]	; (8001900 <HAL_RCC_OscConfig+0x638>)
 80016a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016a4:	4b96      	ldr	r3, [pc, #600]	; (8001900 <HAL_RCC_OscConfig+0x638>)
 80016a6:	2101      	movs	r1, #1
 80016a8:	430a      	orrs	r2, r1
 80016aa:	65da      	str	r2, [r3, #92]	; 0x5c
 80016ac:	e01c      	b.n	80016e8 <HAL_RCC_OscConfig+0x420>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	2b05      	cmp	r3, #5
 80016b4:	d10c      	bne.n	80016d0 <HAL_RCC_OscConfig+0x408>
 80016b6:	4b92      	ldr	r3, [pc, #584]	; (8001900 <HAL_RCC_OscConfig+0x638>)
 80016b8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016ba:	4b91      	ldr	r3, [pc, #580]	; (8001900 <HAL_RCC_OscConfig+0x638>)
 80016bc:	2104      	movs	r1, #4
 80016be:	430a      	orrs	r2, r1
 80016c0:	65da      	str	r2, [r3, #92]	; 0x5c
 80016c2:	4b8f      	ldr	r3, [pc, #572]	; (8001900 <HAL_RCC_OscConfig+0x638>)
 80016c4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016c6:	4b8e      	ldr	r3, [pc, #568]	; (8001900 <HAL_RCC_OscConfig+0x638>)
 80016c8:	2101      	movs	r1, #1
 80016ca:	430a      	orrs	r2, r1
 80016cc:	65da      	str	r2, [r3, #92]	; 0x5c
 80016ce:	e00b      	b.n	80016e8 <HAL_RCC_OscConfig+0x420>
 80016d0:	4b8b      	ldr	r3, [pc, #556]	; (8001900 <HAL_RCC_OscConfig+0x638>)
 80016d2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016d4:	4b8a      	ldr	r3, [pc, #552]	; (8001900 <HAL_RCC_OscConfig+0x638>)
 80016d6:	2101      	movs	r1, #1
 80016d8:	438a      	bics	r2, r1
 80016da:	65da      	str	r2, [r3, #92]	; 0x5c
 80016dc:	4b88      	ldr	r3, [pc, #544]	; (8001900 <HAL_RCC_OscConfig+0x638>)
 80016de:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016e0:	4b87      	ldr	r3, [pc, #540]	; (8001900 <HAL_RCC_OscConfig+0x638>)
 80016e2:	2104      	movs	r1, #4
 80016e4:	438a      	bics	r2, r1
 80016e6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d014      	beq.n	800171a <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f0:	f7ff fa34 	bl	8000b5c <HAL_GetTick>
 80016f4:	0003      	movs	r3, r0
 80016f6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016f8:	e009      	b.n	800170e <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016fa:	f7ff fa2f 	bl	8000b5c <HAL_GetTick>
 80016fe:	0002      	movs	r2, r0
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	4a80      	ldr	r2, [pc, #512]	; (8001908 <HAL_RCC_OscConfig+0x640>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e13c      	b.n	8001988 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800170e:	4b7c      	ldr	r3, [pc, #496]	; (8001900 <HAL_RCC_OscConfig+0x638>)
 8001710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001712:	2202      	movs	r2, #2
 8001714:	4013      	ands	r3, r2
 8001716:	d0f0      	beq.n	80016fa <HAL_RCC_OscConfig+0x432>
 8001718:	e013      	b.n	8001742 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800171a:	f7ff fa1f 	bl	8000b5c <HAL_GetTick>
 800171e:	0003      	movs	r3, r0
 8001720:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001722:	e009      	b.n	8001738 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001724:	f7ff fa1a 	bl	8000b5c <HAL_GetTick>
 8001728:	0002      	movs	r2, r0
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	4a76      	ldr	r2, [pc, #472]	; (8001908 <HAL_RCC_OscConfig+0x640>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d901      	bls.n	8001738 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e127      	b.n	8001988 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001738:	4b71      	ldr	r3, [pc, #452]	; (8001900 <HAL_RCC_OscConfig+0x638>)
 800173a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800173c:	2202      	movs	r2, #2
 800173e:	4013      	ands	r3, r2
 8001740:	d1f0      	bne.n	8001724 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001742:	231f      	movs	r3, #31
 8001744:	18fb      	adds	r3, r7, r3
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d105      	bne.n	8001758 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800174c:	4b6c      	ldr	r3, [pc, #432]	; (8001900 <HAL_RCC_OscConfig+0x638>)
 800174e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001750:	4b6b      	ldr	r3, [pc, #428]	; (8001900 <HAL_RCC_OscConfig+0x638>)
 8001752:	496e      	ldr	r1, [pc, #440]	; (800190c <HAL_RCC_OscConfig+0x644>)
 8001754:	400a      	ands	r2, r1
 8001756:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2220      	movs	r2, #32
 800175e:	4013      	ands	r3, r2
 8001760:	d039      	beq.n	80017d6 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	69db      	ldr	r3, [r3, #28]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d01b      	beq.n	80017a2 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800176a:	4b65      	ldr	r3, [pc, #404]	; (8001900 <HAL_RCC_OscConfig+0x638>)
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	4b64      	ldr	r3, [pc, #400]	; (8001900 <HAL_RCC_OscConfig+0x638>)
 8001770:	2180      	movs	r1, #128	; 0x80
 8001772:	03c9      	lsls	r1, r1, #15
 8001774:	430a      	orrs	r2, r1
 8001776:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001778:	f7ff f9f0 	bl	8000b5c <HAL_GetTick>
 800177c:	0003      	movs	r3, r0
 800177e:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001780:	e008      	b.n	8001794 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001782:	f7ff f9eb 	bl	8000b5c <HAL_GetTick>
 8001786:	0002      	movs	r2, r0
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	2b02      	cmp	r3, #2
 800178e:	d901      	bls.n	8001794 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8001790:	2303      	movs	r3, #3
 8001792:	e0f9      	b.n	8001988 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001794:	4b5a      	ldr	r3, [pc, #360]	; (8001900 <HAL_RCC_OscConfig+0x638>)
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	2380      	movs	r3, #128	; 0x80
 800179a:	041b      	lsls	r3, r3, #16
 800179c:	4013      	ands	r3, r2
 800179e:	d0f0      	beq.n	8001782 <HAL_RCC_OscConfig+0x4ba>
 80017a0:	e019      	b.n	80017d6 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80017a2:	4b57      	ldr	r3, [pc, #348]	; (8001900 <HAL_RCC_OscConfig+0x638>)
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	4b56      	ldr	r3, [pc, #344]	; (8001900 <HAL_RCC_OscConfig+0x638>)
 80017a8:	4959      	ldr	r1, [pc, #356]	; (8001910 <HAL_RCC_OscConfig+0x648>)
 80017aa:	400a      	ands	r2, r1
 80017ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ae:	f7ff f9d5 	bl	8000b5c <HAL_GetTick>
 80017b2:	0003      	movs	r3, r0
 80017b4:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80017b6:	e008      	b.n	80017ca <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017b8:	f7ff f9d0 	bl	8000b5c <HAL_GetTick>
 80017bc:	0002      	movs	r2, r0
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e0de      	b.n	8001988 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80017ca:	4b4d      	ldr	r3, [pc, #308]	; (8001900 <HAL_RCC_OscConfig+0x638>)
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	2380      	movs	r3, #128	; 0x80
 80017d0:	041b      	lsls	r3, r3, #16
 80017d2:	4013      	ands	r3, r2
 80017d4:	d1f0      	bne.n	80017b8 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a1b      	ldr	r3, [r3, #32]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d100      	bne.n	80017e0 <HAL_RCC_OscConfig+0x518>
 80017de:	e0d2      	b.n	8001986 <HAL_RCC_OscConfig+0x6be>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017e0:	4b47      	ldr	r3, [pc, #284]	; (8001900 <HAL_RCC_OscConfig+0x638>)
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	2238      	movs	r2, #56	; 0x38
 80017e6:	4013      	ands	r3, r2
 80017e8:	2b10      	cmp	r3, #16
 80017ea:	d100      	bne.n	80017ee <HAL_RCC_OscConfig+0x526>
 80017ec:	e081      	b.n	80018f2 <HAL_RCC_OscConfig+0x62a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6a1b      	ldr	r3, [r3, #32]
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d156      	bne.n	80018a4 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017f6:	4b42      	ldr	r3, [pc, #264]	; (8001900 <HAL_RCC_OscConfig+0x638>)
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	4b41      	ldr	r3, [pc, #260]	; (8001900 <HAL_RCC_OscConfig+0x638>)
 80017fc:	4945      	ldr	r1, [pc, #276]	; (8001914 <HAL_RCC_OscConfig+0x64c>)
 80017fe:	400a      	ands	r2, r1
 8001800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001802:	f7ff f9ab 	bl	8000b5c <HAL_GetTick>
 8001806:	0003      	movs	r3, r0
 8001808:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800180a:	e008      	b.n	800181e <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800180c:	f7ff f9a6 	bl	8000b5c <HAL_GetTick>
 8001810:	0002      	movs	r2, r0
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	2b02      	cmp	r3, #2
 8001818:	d901      	bls.n	800181e <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e0b4      	b.n	8001988 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800181e:	4b38      	ldr	r3, [pc, #224]	; (8001900 <HAL_RCC_OscConfig+0x638>)
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	2380      	movs	r3, #128	; 0x80
 8001824:	049b      	lsls	r3, r3, #18
 8001826:	4013      	ands	r3, r2
 8001828:	d1f0      	bne.n	800180c <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800182a:	4b35      	ldr	r3, [pc, #212]	; (8001900 <HAL_RCC_OscConfig+0x638>)
 800182c:	68db      	ldr	r3, [r3, #12]
 800182e:	4a3a      	ldr	r2, [pc, #232]	; (8001918 <HAL_RCC_OscConfig+0x650>)
 8001830:	4013      	ands	r3, r2
 8001832:	0019      	movs	r1, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800183c:	431a      	orrs	r2, r3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001842:	021b      	lsls	r3, r3, #8
 8001844:	431a      	orrs	r2, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	431a      	orrs	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001850:	431a      	orrs	r2, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001856:	431a      	orrs	r2, r3
 8001858:	4b29      	ldr	r3, [pc, #164]	; (8001900 <HAL_RCC_OscConfig+0x638>)
 800185a:	430a      	orrs	r2, r1
 800185c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800185e:	4b28      	ldr	r3, [pc, #160]	; (8001900 <HAL_RCC_OscConfig+0x638>)
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	4b27      	ldr	r3, [pc, #156]	; (8001900 <HAL_RCC_OscConfig+0x638>)
 8001864:	2180      	movs	r1, #128	; 0x80
 8001866:	0449      	lsls	r1, r1, #17
 8001868:	430a      	orrs	r2, r1
 800186a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800186c:	4b24      	ldr	r3, [pc, #144]	; (8001900 <HAL_RCC_OscConfig+0x638>)
 800186e:	68da      	ldr	r2, [r3, #12]
 8001870:	4b23      	ldr	r3, [pc, #140]	; (8001900 <HAL_RCC_OscConfig+0x638>)
 8001872:	2180      	movs	r1, #128	; 0x80
 8001874:	0549      	lsls	r1, r1, #21
 8001876:	430a      	orrs	r2, r1
 8001878:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800187a:	f7ff f96f 	bl	8000b5c <HAL_GetTick>
 800187e:	0003      	movs	r3, r0
 8001880:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001882:	e008      	b.n	8001896 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001884:	f7ff f96a 	bl	8000b5c <HAL_GetTick>
 8001888:	0002      	movs	r2, r0
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b02      	cmp	r3, #2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e078      	b.n	8001988 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001896:	4b1a      	ldr	r3, [pc, #104]	; (8001900 <HAL_RCC_OscConfig+0x638>)
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	2380      	movs	r3, #128	; 0x80
 800189c:	049b      	lsls	r3, r3, #18
 800189e:	4013      	ands	r3, r2
 80018a0:	d0f0      	beq.n	8001884 <HAL_RCC_OscConfig+0x5bc>
 80018a2:	e070      	b.n	8001986 <HAL_RCC_OscConfig+0x6be>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018a4:	4b16      	ldr	r3, [pc, #88]	; (8001900 <HAL_RCC_OscConfig+0x638>)
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	4b15      	ldr	r3, [pc, #84]	; (8001900 <HAL_RCC_OscConfig+0x638>)
 80018aa:	491a      	ldr	r1, [pc, #104]	; (8001914 <HAL_RCC_OscConfig+0x64c>)
 80018ac:	400a      	ands	r2, r1
 80018ae:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80018b0:	4b13      	ldr	r3, [pc, #76]	; (8001900 <HAL_RCC_OscConfig+0x638>)
 80018b2:	68da      	ldr	r2, [r3, #12]
 80018b4:	4b12      	ldr	r3, [pc, #72]	; (8001900 <HAL_RCC_OscConfig+0x638>)
 80018b6:	2103      	movs	r1, #3
 80018b8:	438a      	bics	r2, r1
 80018ba:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80018bc:	4b10      	ldr	r3, [pc, #64]	; (8001900 <HAL_RCC_OscConfig+0x638>)
 80018be:	68da      	ldr	r2, [r3, #12]
 80018c0:	4b0f      	ldr	r3, [pc, #60]	; (8001900 <HAL_RCC_OscConfig+0x638>)
 80018c2:	4916      	ldr	r1, [pc, #88]	; (800191c <HAL_RCC_OscConfig+0x654>)
 80018c4:	400a      	ands	r2, r1
 80018c6:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c8:	f7ff f948 	bl	8000b5c <HAL_GetTick>
 80018cc:	0003      	movs	r3, r0
 80018ce:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018d0:	e008      	b.n	80018e4 <HAL_RCC_OscConfig+0x61c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018d2:	f7ff f943 	bl	8000b5c <HAL_GetTick>
 80018d6:	0002      	movs	r2, r0
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d901      	bls.n	80018e4 <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e051      	b.n	8001988 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018e4:	4b06      	ldr	r3, [pc, #24]	; (8001900 <HAL_RCC_OscConfig+0x638>)
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	2380      	movs	r3, #128	; 0x80
 80018ea:	049b      	lsls	r3, r3, #18
 80018ec:	4013      	ands	r3, r2
 80018ee:	d1f0      	bne.n	80018d2 <HAL_RCC_OscConfig+0x60a>
 80018f0:	e049      	b.n	8001986 <HAL_RCC_OscConfig+0x6be>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6a1b      	ldr	r3, [r3, #32]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d112      	bne.n	8001920 <HAL_RCC_OscConfig+0x658>
      {
        return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e044      	b.n	8001988 <HAL_RCC_OscConfig+0x6c0>
 80018fe:	46c0      	nop			; (mov r8, r8)
 8001900:	40021000 	.word	0x40021000
 8001904:	40007000 	.word	0x40007000
 8001908:	00001388 	.word	0x00001388
 800190c:	efffffff 	.word	0xefffffff
 8001910:	ffbfffff 	.word	0xffbfffff
 8001914:	feffffff 	.word	0xfeffffff
 8001918:	11c1808c 	.word	0x11c1808c
 800191c:	eefeffff 	.word	0xeefeffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001920:	4b1b      	ldr	r3, [pc, #108]	; (8001990 <HAL_RCC_OscConfig+0x6c8>)
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	2203      	movs	r2, #3
 800192a:	401a      	ands	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001930:	429a      	cmp	r2, r3
 8001932:	d126      	bne.n	8001982 <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	2270      	movs	r2, #112	; 0x70
 8001938:	401a      	ands	r2, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800193e:	429a      	cmp	r2, r3
 8001940:	d11f      	bne.n	8001982 <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001942:	697a      	ldr	r2, [r7, #20]
 8001944:	23fe      	movs	r3, #254	; 0xfe
 8001946:	01db      	lsls	r3, r3, #7
 8001948:	401a      	ands	r2, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800194e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001950:	429a      	cmp	r2, r3
 8001952:	d116      	bne.n	8001982 <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001954:	697a      	ldr	r2, [r7, #20]
 8001956:	23f8      	movs	r3, #248	; 0xf8
 8001958:	039b      	lsls	r3, r3, #14
 800195a:	401a      	ands	r2, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001960:	429a      	cmp	r2, r3
 8001962:	d10e      	bne.n	8001982 <HAL_RCC_OscConfig+0x6ba>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001964:	697a      	ldr	r2, [r7, #20]
 8001966:	23e0      	movs	r3, #224	; 0xe0
 8001968:	051b      	lsls	r3, r3, #20
 800196a:	401a      	ands	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001970:	429a      	cmp	r2, r3
 8001972:	d106      	bne.n	8001982 <HAL_RCC_OscConfig+0x6ba>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	0f5b      	lsrs	r3, r3, #29
 8001978:	075a      	lsls	r2, r3, #29
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800197e:	429a      	cmp	r2, r3
 8001980:	d001      	beq.n	8001986 <HAL_RCC_OscConfig+0x6be>
        {
          return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e000      	b.n	8001988 <HAL_RCC_OscConfig+0x6c0>
        }
      }
    }
  }
  return HAL_OK;
 8001986:	2300      	movs	r3, #0
}
 8001988:	0018      	movs	r0, r3
 800198a:	46bd      	mov	sp, r7
 800198c:	b008      	add	sp, #32
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40021000 	.word	0x40021000

08001994 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d101      	bne.n	80019a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e0e9      	b.n	8001b7c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019a8:	4b76      	ldr	r3, [pc, #472]	; (8001b84 <HAL_RCC_ClockConfig+0x1f0>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2207      	movs	r2, #7
 80019ae:	4013      	ands	r3, r2
 80019b0:	683a      	ldr	r2, [r7, #0]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d91e      	bls.n	80019f4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019b6:	4b73      	ldr	r3, [pc, #460]	; (8001b84 <HAL_RCC_ClockConfig+0x1f0>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2207      	movs	r2, #7
 80019bc:	4393      	bics	r3, r2
 80019be:	0019      	movs	r1, r3
 80019c0:	4b70      	ldr	r3, [pc, #448]	; (8001b84 <HAL_RCC_ClockConfig+0x1f0>)
 80019c2:	683a      	ldr	r2, [r7, #0]
 80019c4:	430a      	orrs	r2, r1
 80019c6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80019c8:	f7ff f8c8 	bl	8000b5c <HAL_GetTick>
 80019cc:	0003      	movs	r3, r0
 80019ce:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80019d0:	e009      	b.n	80019e6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019d2:	f7ff f8c3 	bl	8000b5c <HAL_GetTick>
 80019d6:	0002      	movs	r2, r0
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	4a6a      	ldr	r2, [pc, #424]	; (8001b88 <HAL_RCC_ClockConfig+0x1f4>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e0ca      	b.n	8001b7c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80019e6:	4b67      	ldr	r3, [pc, #412]	; (8001b84 <HAL_RCC_ClockConfig+0x1f0>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2207      	movs	r2, #7
 80019ec:	4013      	ands	r3, r2
 80019ee:	683a      	ldr	r2, [r7, #0]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d1ee      	bne.n	80019d2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2202      	movs	r2, #2
 80019fa:	4013      	ands	r3, r2
 80019fc:	d015      	beq.n	8001a2a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2204      	movs	r2, #4
 8001a04:	4013      	ands	r3, r2
 8001a06:	d006      	beq.n	8001a16 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001a08:	4b60      	ldr	r3, [pc, #384]	; (8001b8c <HAL_RCC_ClockConfig+0x1f8>)
 8001a0a:	689a      	ldr	r2, [r3, #8]
 8001a0c:	4b5f      	ldr	r3, [pc, #380]	; (8001b8c <HAL_RCC_ClockConfig+0x1f8>)
 8001a0e:	21e0      	movs	r1, #224	; 0xe0
 8001a10:	01c9      	lsls	r1, r1, #7
 8001a12:	430a      	orrs	r2, r1
 8001a14:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a16:	4b5d      	ldr	r3, [pc, #372]	; (8001b8c <HAL_RCC_ClockConfig+0x1f8>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	4a5d      	ldr	r2, [pc, #372]	; (8001b90 <HAL_RCC_ClockConfig+0x1fc>)
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	0019      	movs	r1, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	689a      	ldr	r2, [r3, #8]
 8001a24:	4b59      	ldr	r3, [pc, #356]	; (8001b8c <HAL_RCC_ClockConfig+0x1f8>)
 8001a26:	430a      	orrs	r2, r1
 8001a28:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	4013      	ands	r3, r2
 8001a32:	d057      	beq.n	8001ae4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d107      	bne.n	8001a4c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a3c:	4b53      	ldr	r3, [pc, #332]	; (8001b8c <HAL_RCC_ClockConfig+0x1f8>)
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	2380      	movs	r3, #128	; 0x80
 8001a42:	029b      	lsls	r3, r3, #10
 8001a44:	4013      	ands	r3, r2
 8001a46:	d12b      	bne.n	8001aa0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e097      	b.n	8001b7c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d107      	bne.n	8001a64 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a54:	4b4d      	ldr	r3, [pc, #308]	; (8001b8c <HAL_RCC_ClockConfig+0x1f8>)
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	2380      	movs	r3, #128	; 0x80
 8001a5a:	049b      	lsls	r3, r3, #18
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	d11f      	bne.n	8001aa0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e08b      	b.n	8001b7c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d107      	bne.n	8001a7c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a6c:	4b47      	ldr	r3, [pc, #284]	; (8001b8c <HAL_RCC_ClockConfig+0x1f8>)
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	2380      	movs	r3, #128	; 0x80
 8001a72:	00db      	lsls	r3, r3, #3
 8001a74:	4013      	ands	r3, r2
 8001a76:	d113      	bne.n	8001aa0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e07f      	b.n	8001b7c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	2b03      	cmp	r3, #3
 8001a82:	d106      	bne.n	8001a92 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a84:	4b41      	ldr	r3, [pc, #260]	; (8001b8c <HAL_RCC_ClockConfig+0x1f8>)
 8001a86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a88:	2202      	movs	r2, #2
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	d108      	bne.n	8001aa0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e074      	b.n	8001b7c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a92:	4b3e      	ldr	r3, [pc, #248]	; (8001b8c <HAL_RCC_ClockConfig+0x1f8>)
 8001a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a96:	2202      	movs	r2, #2
 8001a98:	4013      	ands	r3, r2
 8001a9a:	d101      	bne.n	8001aa0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e06d      	b.n	8001b7c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001aa0:	4b3a      	ldr	r3, [pc, #232]	; (8001b8c <HAL_RCC_ClockConfig+0x1f8>)
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	2207      	movs	r2, #7
 8001aa6:	4393      	bics	r3, r2
 8001aa8:	0019      	movs	r1, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685a      	ldr	r2, [r3, #4]
 8001aae:	4b37      	ldr	r3, [pc, #220]	; (8001b8c <HAL_RCC_ClockConfig+0x1f8>)
 8001ab0:	430a      	orrs	r2, r1
 8001ab2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ab4:	f7ff f852 	bl	8000b5c <HAL_GetTick>
 8001ab8:	0003      	movs	r3, r0
 8001aba:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001abc:	e009      	b.n	8001ad2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001abe:	f7ff f84d 	bl	8000b5c <HAL_GetTick>
 8001ac2:	0002      	movs	r2, r0
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	4a2f      	ldr	r2, [pc, #188]	; (8001b88 <HAL_RCC_ClockConfig+0x1f4>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e054      	b.n	8001b7c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ad2:	4b2e      	ldr	r3, [pc, #184]	; (8001b8c <HAL_RCC_ClockConfig+0x1f8>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	2238      	movs	r2, #56	; 0x38
 8001ad8:	401a      	ands	r2, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	00db      	lsls	r3, r3, #3
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d1ec      	bne.n	8001abe <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ae4:	4b27      	ldr	r3, [pc, #156]	; (8001b84 <HAL_RCC_ClockConfig+0x1f0>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2207      	movs	r2, #7
 8001aea:	4013      	ands	r3, r2
 8001aec:	683a      	ldr	r2, [r7, #0]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d21e      	bcs.n	8001b30 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001af2:	4b24      	ldr	r3, [pc, #144]	; (8001b84 <HAL_RCC_ClockConfig+0x1f0>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2207      	movs	r2, #7
 8001af8:	4393      	bics	r3, r2
 8001afa:	0019      	movs	r1, r3
 8001afc:	4b21      	ldr	r3, [pc, #132]	; (8001b84 <HAL_RCC_ClockConfig+0x1f0>)
 8001afe:	683a      	ldr	r2, [r7, #0]
 8001b00:	430a      	orrs	r2, r1
 8001b02:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b04:	f7ff f82a 	bl	8000b5c <HAL_GetTick>
 8001b08:	0003      	movs	r3, r0
 8001b0a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b0c:	e009      	b.n	8001b22 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b0e:	f7ff f825 	bl	8000b5c <HAL_GetTick>
 8001b12:	0002      	movs	r2, r0
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	4a1b      	ldr	r2, [pc, #108]	; (8001b88 <HAL_RCC_ClockConfig+0x1f4>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e02c      	b.n	8001b7c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b22:	4b18      	ldr	r3, [pc, #96]	; (8001b84 <HAL_RCC_ClockConfig+0x1f0>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2207      	movs	r2, #7
 8001b28:	4013      	ands	r3, r2
 8001b2a:	683a      	ldr	r2, [r7, #0]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d1ee      	bne.n	8001b0e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2204      	movs	r2, #4
 8001b36:	4013      	ands	r3, r2
 8001b38:	d009      	beq.n	8001b4e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001b3a:	4b14      	ldr	r3, [pc, #80]	; (8001b8c <HAL_RCC_ClockConfig+0x1f8>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	4a15      	ldr	r2, [pc, #84]	; (8001b94 <HAL_RCC_ClockConfig+0x200>)
 8001b40:	4013      	ands	r3, r2
 8001b42:	0019      	movs	r1, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	68da      	ldr	r2, [r3, #12]
 8001b48:	4b10      	ldr	r3, [pc, #64]	; (8001b8c <HAL_RCC_ClockConfig+0x1f8>)
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001b4e:	f000 f829 	bl	8001ba4 <HAL_RCC_GetSysClockFreq>
 8001b52:	0001      	movs	r1, r0
 8001b54:	4b0d      	ldr	r3, [pc, #52]	; (8001b8c <HAL_RCC_ClockConfig+0x1f8>)
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	0a1b      	lsrs	r3, r3, #8
 8001b5a:	220f      	movs	r2, #15
 8001b5c:	401a      	ands	r2, r3
 8001b5e:	4b0e      	ldr	r3, [pc, #56]	; (8001b98 <HAL_RCC_ClockConfig+0x204>)
 8001b60:	0092      	lsls	r2, r2, #2
 8001b62:	58d3      	ldr	r3, [r2, r3]
 8001b64:	221f      	movs	r2, #31
 8001b66:	4013      	ands	r3, r2
 8001b68:	000a      	movs	r2, r1
 8001b6a:	40da      	lsrs	r2, r3
 8001b6c:	4b0b      	ldr	r3, [pc, #44]	; (8001b9c <HAL_RCC_ClockConfig+0x208>)
 8001b6e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001b70:	4b0b      	ldr	r3, [pc, #44]	; (8001ba0 <HAL_RCC_ClockConfig+0x20c>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	0018      	movs	r0, r3
 8001b76:	f7fe ff95 	bl	8000aa4 <HAL_InitTick>
 8001b7a:	0003      	movs	r3, r0
}
 8001b7c:	0018      	movs	r0, r3
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	b004      	add	sp, #16
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40022000 	.word	0x40022000
 8001b88:	00001388 	.word	0x00001388
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	fffff0ff 	.word	0xfffff0ff
 8001b94:	ffff8fff 	.word	0xffff8fff
 8001b98:	080048e4 	.word	0x080048e4
 8001b9c:	20000000 	.word	0x20000000
 8001ba0:	20000004 	.word	0x20000004

08001ba4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b086      	sub	sp, #24
 8001ba8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001baa:	4b3c      	ldr	r3, [pc, #240]	; (8001c9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	2238      	movs	r2, #56	; 0x38
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	d10f      	bne.n	8001bd4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001bb4:	4b39      	ldr	r3, [pc, #228]	; (8001c9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	0adb      	lsrs	r3, r3, #11
 8001bba:	2207      	movs	r2, #7
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	409a      	lsls	r2, r3
 8001bc2:	0013      	movs	r3, r2
 8001bc4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001bc6:	6839      	ldr	r1, [r7, #0]
 8001bc8:	4835      	ldr	r0, [pc, #212]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001bca:	f7fe fa9b 	bl	8000104 <__udivsi3>
 8001bce:	0003      	movs	r3, r0
 8001bd0:	613b      	str	r3, [r7, #16]
 8001bd2:	e05d      	b.n	8001c90 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bd4:	4b31      	ldr	r3, [pc, #196]	; (8001c9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	2238      	movs	r2, #56	; 0x38
 8001bda:	4013      	ands	r3, r2
 8001bdc:	2b08      	cmp	r3, #8
 8001bde:	d102      	bne.n	8001be6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001be0:	4b30      	ldr	r3, [pc, #192]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0x100>)
 8001be2:	613b      	str	r3, [r7, #16]
 8001be4:	e054      	b.n	8001c90 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001be6:	4b2d      	ldr	r3, [pc, #180]	; (8001c9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	2238      	movs	r2, #56	; 0x38
 8001bec:	4013      	ands	r3, r2
 8001bee:	2b10      	cmp	r3, #16
 8001bf0:	d138      	bne.n	8001c64 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001bf2:	4b2a      	ldr	r3, [pc, #168]	; (8001c9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	2203      	movs	r2, #3
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001bfc:	4b27      	ldr	r3, [pc, #156]	; (8001c9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	091b      	lsrs	r3, r3, #4
 8001c02:	2207      	movs	r2, #7
 8001c04:	4013      	ands	r3, r2
 8001c06:	3301      	adds	r3, #1
 8001c08:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2b03      	cmp	r3, #3
 8001c0e:	d10d      	bne.n	8001c2c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c10:	68b9      	ldr	r1, [r7, #8]
 8001c12:	4824      	ldr	r0, [pc, #144]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0x100>)
 8001c14:	f7fe fa76 	bl	8000104 <__udivsi3>
 8001c18:	0003      	movs	r3, r0
 8001c1a:	0019      	movs	r1, r3
 8001c1c:	4b1f      	ldr	r3, [pc, #124]	; (8001c9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	0a1b      	lsrs	r3, r3, #8
 8001c22:	227f      	movs	r2, #127	; 0x7f
 8001c24:	4013      	ands	r3, r2
 8001c26:	434b      	muls	r3, r1
 8001c28:	617b      	str	r3, [r7, #20]
        break;
 8001c2a:	e00d      	b.n	8001c48 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001c2c:	68b9      	ldr	r1, [r7, #8]
 8001c2e:	481c      	ldr	r0, [pc, #112]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001c30:	f7fe fa68 	bl	8000104 <__udivsi3>
 8001c34:	0003      	movs	r3, r0
 8001c36:	0019      	movs	r1, r3
 8001c38:	4b18      	ldr	r3, [pc, #96]	; (8001c9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	0a1b      	lsrs	r3, r3, #8
 8001c3e:	227f      	movs	r2, #127	; 0x7f
 8001c40:	4013      	ands	r3, r2
 8001c42:	434b      	muls	r3, r1
 8001c44:	617b      	str	r3, [r7, #20]
        break;
 8001c46:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001c48:	4b14      	ldr	r3, [pc, #80]	; (8001c9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	0f5b      	lsrs	r3, r3, #29
 8001c4e:	2207      	movs	r2, #7
 8001c50:	4013      	ands	r3, r2
 8001c52:	3301      	adds	r3, #1
 8001c54:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001c56:	6879      	ldr	r1, [r7, #4]
 8001c58:	6978      	ldr	r0, [r7, #20]
 8001c5a:	f7fe fa53 	bl	8000104 <__udivsi3>
 8001c5e:	0003      	movs	r3, r0
 8001c60:	613b      	str	r3, [r7, #16]
 8001c62:	e015      	b.n	8001c90 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001c64:	4b0d      	ldr	r3, [pc, #52]	; (8001c9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	2238      	movs	r2, #56	; 0x38
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	2b20      	cmp	r3, #32
 8001c6e:	d103      	bne.n	8001c78 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001c70:	2380      	movs	r3, #128	; 0x80
 8001c72:	021b      	lsls	r3, r3, #8
 8001c74:	613b      	str	r3, [r7, #16]
 8001c76:	e00b      	b.n	8001c90 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001c78:	4b08      	ldr	r3, [pc, #32]	; (8001c9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	2238      	movs	r2, #56	; 0x38
 8001c7e:	4013      	ands	r3, r2
 8001c80:	2b18      	cmp	r3, #24
 8001c82:	d103      	bne.n	8001c8c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001c84:	23fa      	movs	r3, #250	; 0xfa
 8001c86:	01db      	lsls	r3, r3, #7
 8001c88:	613b      	str	r3, [r7, #16]
 8001c8a:	e001      	b.n	8001c90 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001c90:	693b      	ldr	r3, [r7, #16]
}
 8001c92:	0018      	movs	r0, r3
 8001c94:	46bd      	mov	sp, r7
 8001c96:	b006      	add	sp, #24
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	46c0      	nop			; (mov r8, r8)
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	00f42400 	.word	0x00f42400
 8001ca4:	007a1200 	.word	0x007a1200

08001ca8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cac:	4b02      	ldr	r3, [pc, #8]	; (8001cb8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001cae:	681b      	ldr	r3, [r3, #0]
}
 8001cb0:	0018      	movs	r0, r3
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	46c0      	nop			; (mov r8, r8)
 8001cb8:	20000000 	.word	0x20000000

08001cbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cbc:	b5b0      	push	{r4, r5, r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001cc0:	f7ff fff2 	bl	8001ca8 <HAL_RCC_GetHCLKFreq>
 8001cc4:	0004      	movs	r4, r0
 8001cc6:	f7ff faf3 	bl	80012b0 <LL_RCC_GetAPB1Prescaler>
 8001cca:	0003      	movs	r3, r0
 8001ccc:	0b1a      	lsrs	r2, r3, #12
 8001cce:	4b05      	ldr	r3, [pc, #20]	; (8001ce4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001cd0:	0092      	lsls	r2, r2, #2
 8001cd2:	58d3      	ldr	r3, [r2, r3]
 8001cd4:	221f      	movs	r2, #31
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	40dc      	lsrs	r4, r3
 8001cda:	0023      	movs	r3, r4
}
 8001cdc:	0018      	movs	r0, r3
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bdb0      	pop	{r4, r5, r7, pc}
 8001ce2:	46c0      	nop			; (mov r8, r8)
 8001ce4:	08004924 	.word	0x08004924

08001ce8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001cf0:	2313      	movs	r3, #19
 8001cf2:	18fb      	adds	r3, r7, r3
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001cf8:	2312      	movs	r3, #18
 8001cfa:	18fb      	adds	r3, r7, r3
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	2380      	movs	r3, #128	; 0x80
 8001d06:	029b      	lsls	r3, r3, #10
 8001d08:	4013      	ands	r3, r2
 8001d0a:	d100      	bne.n	8001d0e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001d0c:	e0ad      	b.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d0e:	2011      	movs	r0, #17
 8001d10:	183b      	adds	r3, r7, r0
 8001d12:	2200      	movs	r2, #0
 8001d14:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d16:	4b47      	ldr	r3, [pc, #284]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d1a:	2380      	movs	r3, #128	; 0x80
 8001d1c:	055b      	lsls	r3, r3, #21
 8001d1e:	4013      	ands	r3, r2
 8001d20:	d110      	bne.n	8001d44 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d22:	4b44      	ldr	r3, [pc, #272]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d26:	4b43      	ldr	r3, [pc, #268]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d28:	2180      	movs	r1, #128	; 0x80
 8001d2a:	0549      	lsls	r1, r1, #21
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d30:	4b40      	ldr	r3, [pc, #256]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d34:	2380      	movs	r3, #128	; 0x80
 8001d36:	055b      	lsls	r3, r3, #21
 8001d38:	4013      	ands	r3, r2
 8001d3a:	60bb      	str	r3, [r7, #8]
 8001d3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d3e:	183b      	adds	r3, r7, r0
 8001d40:	2201      	movs	r2, #1
 8001d42:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d44:	4b3c      	ldr	r3, [pc, #240]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	4b3b      	ldr	r3, [pc, #236]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001d4a:	2180      	movs	r1, #128	; 0x80
 8001d4c:	0049      	lsls	r1, r1, #1
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001d52:	f7fe ff03 	bl	8000b5c <HAL_GetTick>
 8001d56:	0003      	movs	r3, r0
 8001d58:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d5a:	e00b      	b.n	8001d74 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d5c:	f7fe fefe 	bl	8000b5c <HAL_GetTick>
 8001d60:	0002      	movs	r2, r0
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d904      	bls.n	8001d74 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001d6a:	2313      	movs	r3, #19
 8001d6c:	18fb      	adds	r3, r7, r3
 8001d6e:	2203      	movs	r2, #3
 8001d70:	701a      	strb	r2, [r3, #0]
        break;
 8001d72:	e005      	b.n	8001d80 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d74:	4b30      	ldr	r3, [pc, #192]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	2380      	movs	r3, #128	; 0x80
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	d0ed      	beq.n	8001d5c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001d80:	2313      	movs	r3, #19
 8001d82:	18fb      	adds	r3, r7, r3
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d15e      	bne.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001d8a:	4b2a      	ldr	r3, [pc, #168]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d8c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d8e:	23c0      	movs	r3, #192	; 0xc0
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	4013      	ands	r3, r2
 8001d94:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d019      	beq.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da0:	697a      	ldr	r2, [r7, #20]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d014      	beq.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001da6:	4b23      	ldr	r3, [pc, #140]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001da8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001daa:	4a24      	ldr	r2, [pc, #144]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001dac:	4013      	ands	r3, r2
 8001dae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001db0:	4b20      	ldr	r3, [pc, #128]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001db2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001db4:	4b1f      	ldr	r3, [pc, #124]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001db6:	2180      	movs	r1, #128	; 0x80
 8001db8:	0249      	lsls	r1, r1, #9
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001dbe:	4b1d      	ldr	r3, [pc, #116]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001dc0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001dc2:	4b1c      	ldr	r3, [pc, #112]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001dc4:	491e      	ldr	r1, [pc, #120]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8001dc6:	400a      	ands	r2, r1
 8001dc8:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001dca:	4b1a      	ldr	r3, [pc, #104]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001dcc:	697a      	ldr	r2, [r7, #20]
 8001dce:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	d016      	beq.n	8001e06 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd8:	f7fe fec0 	bl	8000b5c <HAL_GetTick>
 8001ddc:	0003      	movs	r3, r0
 8001dde:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001de0:	e00c      	b.n	8001dfc <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001de2:	f7fe febb 	bl	8000b5c <HAL_GetTick>
 8001de6:	0002      	movs	r2, r0
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	4a15      	ldr	r2, [pc, #84]	; (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d904      	bls.n	8001dfc <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001df2:	2313      	movs	r3, #19
 8001df4:	18fb      	adds	r3, r7, r3
 8001df6:	2203      	movs	r2, #3
 8001df8:	701a      	strb	r2, [r3, #0]
            break;
 8001dfa:	e004      	b.n	8001e06 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dfc:	4b0d      	ldr	r3, [pc, #52]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e00:	2202      	movs	r2, #2
 8001e02:	4013      	ands	r3, r2
 8001e04:	d0ed      	beq.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001e06:	2313      	movs	r3, #19
 8001e08:	18fb      	adds	r3, r7, r3
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d10a      	bne.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e10:	4b08      	ldr	r3, [pc, #32]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e14:	4a09      	ldr	r2, [pc, #36]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001e16:	4013      	ands	r3, r2
 8001e18:	0019      	movs	r1, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e1e:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001e20:	430a      	orrs	r2, r1
 8001e22:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e24:	e016      	b.n	8001e54 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001e26:	2312      	movs	r3, #18
 8001e28:	18fb      	adds	r3, r7, r3
 8001e2a:	2213      	movs	r2, #19
 8001e2c:	18ba      	adds	r2, r7, r2
 8001e2e:	7812      	ldrb	r2, [r2, #0]
 8001e30:	701a      	strb	r2, [r3, #0]
 8001e32:	e00f      	b.n	8001e54 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8001e34:	40021000 	.word	0x40021000
 8001e38:	40007000 	.word	0x40007000
 8001e3c:	fffffcff 	.word	0xfffffcff
 8001e40:	fffeffff 	.word	0xfffeffff
 8001e44:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e48:	2312      	movs	r3, #18
 8001e4a:	18fb      	adds	r3, r7, r3
 8001e4c:	2213      	movs	r2, #19
 8001e4e:	18ba      	adds	r2, r7, r2
 8001e50:	7812      	ldrb	r2, [r2, #0]
 8001e52:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e54:	2311      	movs	r3, #17
 8001e56:	18fb      	adds	r3, r7, r3
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d105      	bne.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e5e:	4bb6      	ldr	r3, [pc, #728]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e62:	4bb5      	ldr	r3, [pc, #724]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e64:	49b5      	ldr	r1, [pc, #724]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001e66:	400a      	ands	r2, r1
 8001e68:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	4013      	ands	r3, r2
 8001e72:	d009      	beq.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e74:	4bb0      	ldr	r3, [pc, #704]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e78:	2203      	movs	r2, #3
 8001e7a:	4393      	bics	r3, r2
 8001e7c:	0019      	movs	r1, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685a      	ldr	r2, [r3, #4]
 8001e82:	4bad      	ldr	r3, [pc, #692]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e84:	430a      	orrs	r2, r1
 8001e86:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2202      	movs	r2, #2
 8001e8e:	4013      	ands	r3, r2
 8001e90:	d009      	beq.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001e92:	4ba9      	ldr	r3, [pc, #676]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e96:	220c      	movs	r2, #12
 8001e98:	4393      	bics	r3, r2
 8001e9a:	0019      	movs	r1, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689a      	ldr	r2, [r3, #8]
 8001ea0:	4ba5      	ldr	r3, [pc, #660]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2204      	movs	r2, #4
 8001eac:	4013      	ands	r3, r2
 8001eae:	d009      	beq.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001eb0:	4ba1      	ldr	r3, [pc, #644]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001eb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eb4:	2230      	movs	r2, #48	; 0x30
 8001eb6:	4393      	bics	r3, r2
 8001eb8:	0019      	movs	r1, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	68da      	ldr	r2, [r3, #12]
 8001ebe:	4b9e      	ldr	r3, [pc, #632]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ec0:	430a      	orrs	r2, r1
 8001ec2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2210      	movs	r2, #16
 8001eca:	4013      	ands	r3, r2
 8001ecc:	d009      	beq.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001ece:	4b9a      	ldr	r3, [pc, #616]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ed2:	4a9b      	ldr	r2, [pc, #620]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	0019      	movs	r1, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	691a      	ldr	r2, [r3, #16]
 8001edc:	4b96      	ldr	r3, [pc, #600]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	2380      	movs	r3, #128	; 0x80
 8001ee8:	015b      	lsls	r3, r3, #5
 8001eea:	4013      	ands	r3, r2
 8001eec:	d009      	beq.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8001eee:	4b92      	ldr	r3, [pc, #584]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ef2:	4a94      	ldr	r2, [pc, #592]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	0019      	movs	r1, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	695a      	ldr	r2, [r3, #20]
 8001efc:	4b8e      	ldr	r3, [pc, #568]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001efe:	430a      	orrs	r2, r1
 8001f00:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	2380      	movs	r3, #128	; 0x80
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	d009      	beq.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001f0e:	4b8a      	ldr	r3, [pc, #552]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f12:	4a8d      	ldr	r2, [pc, #564]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8001f14:	4013      	ands	r3, r2
 8001f16:	0019      	movs	r1, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f1c:	4b86      	ldr	r3, [pc, #536]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f1e:	430a      	orrs	r2, r1
 8001f20:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	2380      	movs	r3, #128	; 0x80
 8001f28:	00db      	lsls	r3, r3, #3
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	d009      	beq.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001f2e:	4b82      	ldr	r3, [pc, #520]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f32:	4a86      	ldr	r2, [pc, #536]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8001f34:	4013      	ands	r3, r2
 8001f36:	0019      	movs	r1, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f3c:	4b7e      	ldr	r3, [pc, #504]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2220      	movs	r2, #32
 8001f48:	4013      	ands	r3, r2
 8001f4a:	d009      	beq.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f4c:	4b7a      	ldr	r3, [pc, #488]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f50:	4a7f      	ldr	r2, [pc, #508]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8001f52:	4013      	ands	r3, r2
 8001f54:	0019      	movs	r1, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	699a      	ldr	r2, [r3, #24]
 8001f5a:	4b77      	ldr	r3, [pc, #476]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2240      	movs	r2, #64	; 0x40
 8001f66:	4013      	ands	r3, r2
 8001f68:	d009      	beq.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001f6a:	4b73      	ldr	r3, [pc, #460]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f6e:	4a79      	ldr	r2, [pc, #484]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8001f70:	4013      	ands	r3, r2
 8001f72:	0019      	movs	r1, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	69da      	ldr	r2, [r3, #28]
 8001f78:	4b6f      	ldr	r3, [pc, #444]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	2380      	movs	r3, #128	; 0x80
 8001f84:	01db      	lsls	r3, r3, #7
 8001f86:	4013      	ands	r3, r2
 8001f88:	d015      	beq.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001f8a:	4b6b      	ldr	r3, [pc, #428]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	0899      	lsrs	r1, r3, #2
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f96:	4b68      	ldr	r3, [pc, #416]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fa0:	2380      	movs	r3, #128	; 0x80
 8001fa2:	05db      	lsls	r3, r3, #23
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d106      	bne.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001fa8:	4b63      	ldr	r3, [pc, #396]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001faa:	68da      	ldr	r2, [r3, #12]
 8001fac:	4b62      	ldr	r3, [pc, #392]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fae:	2180      	movs	r1, #128	; 0x80
 8001fb0:	0249      	lsls	r1, r1, #9
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	2380      	movs	r3, #128	; 0x80
 8001fbc:	031b      	lsls	r3, r3, #12
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	d009      	beq.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001fc2:	4b5d      	ldr	r3, [pc, #372]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fc6:	2240      	movs	r2, #64	; 0x40
 8001fc8:	4393      	bics	r3, r2
 8001fca:	0019      	movs	r1, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fd0:	4b59      	ldr	r3, [pc, #356]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	2380      	movs	r3, #128	; 0x80
 8001fdc:	039b      	lsls	r3, r3, #14
 8001fde:	4013      	ands	r3, r2
 8001fe0:	d016      	beq.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001fe2:	4b55      	ldr	r3, [pc, #340]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe6:	4a5c      	ldr	r2, [pc, #368]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8001fe8:	4013      	ands	r3, r2
 8001fea:	0019      	movs	r1, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ff0:	4b51      	ldr	r3, [pc, #324]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ffa:	2380      	movs	r3, #128	; 0x80
 8001ffc:	03db      	lsls	r3, r3, #15
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d106      	bne.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002002:	4b4d      	ldr	r3, [pc, #308]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002004:	68da      	ldr	r2, [r3, #12]
 8002006:	4b4c      	ldr	r3, [pc, #304]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002008:	2180      	movs	r1, #128	; 0x80
 800200a:	0449      	lsls	r1, r1, #17
 800200c:	430a      	orrs	r2, r1
 800200e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	2380      	movs	r3, #128	; 0x80
 8002016:	03db      	lsls	r3, r3, #15
 8002018:	4013      	ands	r3, r2
 800201a:	d016      	beq.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800201c:	4b46      	ldr	r3, [pc, #280]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800201e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002020:	4a4e      	ldr	r2, [pc, #312]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002022:	4013      	ands	r3, r2
 8002024:	0019      	movs	r1, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800202a:	4b43      	ldr	r3, [pc, #268]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800202c:	430a      	orrs	r2, r1
 800202e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002034:	2380      	movs	r3, #128	; 0x80
 8002036:	045b      	lsls	r3, r3, #17
 8002038:	429a      	cmp	r2, r3
 800203a:	d106      	bne.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800203c:	4b3e      	ldr	r3, [pc, #248]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800203e:	68da      	ldr	r2, [r3, #12]
 8002040:	4b3d      	ldr	r3, [pc, #244]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002042:	2180      	movs	r1, #128	; 0x80
 8002044:	0449      	lsls	r1, r1, #17
 8002046:	430a      	orrs	r2, r1
 8002048:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	2380      	movs	r3, #128	; 0x80
 8002050:	011b      	lsls	r3, r3, #4
 8002052:	4013      	ands	r3, r2
 8002054:	d014      	beq.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002056:	4b38      	ldr	r3, [pc, #224]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800205a:	2203      	movs	r2, #3
 800205c:	4393      	bics	r3, r2
 800205e:	0019      	movs	r1, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6a1a      	ldr	r2, [r3, #32]
 8002064:	4b34      	ldr	r3, [pc, #208]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002066:	430a      	orrs	r2, r1
 8002068:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a1b      	ldr	r3, [r3, #32]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d106      	bne.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002072:	4b31      	ldr	r3, [pc, #196]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002074:	68da      	ldr	r2, [r3, #12]
 8002076:	4b30      	ldr	r3, [pc, #192]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002078:	2180      	movs	r1, #128	; 0x80
 800207a:	0249      	lsls	r1, r1, #9
 800207c:	430a      	orrs	r2, r1
 800207e:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	2380      	movs	r3, #128	; 0x80
 8002086:	019b      	lsls	r3, r3, #6
 8002088:	4013      	ands	r3, r2
 800208a:	d014      	beq.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800208c:	4b2a      	ldr	r3, [pc, #168]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800208e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002090:	220c      	movs	r2, #12
 8002092:	4393      	bics	r3, r2
 8002094:	0019      	movs	r1, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800209a:	4b27      	ldr	r3, [pc, #156]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800209c:	430a      	orrs	r2, r1
 800209e:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a4:	2b04      	cmp	r3, #4
 80020a6:	d106      	bne.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80020a8:	4b23      	ldr	r3, [pc, #140]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020aa:	68da      	ldr	r2, [r3, #12]
 80020ac:	4b22      	ldr	r3, [pc, #136]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020ae:	2180      	movs	r1, #128	; 0x80
 80020b0:	0249      	lsls	r1, r1, #9
 80020b2:	430a      	orrs	r2, r1
 80020b4:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	2380      	movs	r3, #128	; 0x80
 80020bc:	045b      	lsls	r3, r3, #17
 80020be:	4013      	ands	r3, r2
 80020c0:	d016      	beq.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80020c2:	4b1d      	ldr	r3, [pc, #116]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c6:	4a22      	ldr	r2, [pc, #136]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80020c8:	4013      	ands	r3, r2
 80020ca:	0019      	movs	r1, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020d0:	4b19      	ldr	r3, [pc, #100]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020d2:	430a      	orrs	r2, r1
 80020d4:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020da:	2380      	movs	r3, #128	; 0x80
 80020dc:	019b      	lsls	r3, r3, #6
 80020de:	429a      	cmp	r2, r3
 80020e0:	d106      	bne.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80020e2:	4b15      	ldr	r3, [pc, #84]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020e4:	68da      	ldr	r2, [r3, #12]
 80020e6:	4b14      	ldr	r3, [pc, #80]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020e8:	2180      	movs	r1, #128	; 0x80
 80020ea:	0449      	lsls	r1, r1, #17
 80020ec:	430a      	orrs	r2, r1
 80020ee:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	2380      	movs	r3, #128	; 0x80
 80020f6:	049b      	lsls	r3, r3, #18
 80020f8:	4013      	ands	r3, r2
 80020fa:	d016      	beq.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80020fc:	4b0e      	ldr	r3, [pc, #56]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002100:	4a10      	ldr	r2, [pc, #64]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002102:	4013      	ands	r3, r2
 8002104:	0019      	movs	r1, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800210a:	4b0b      	ldr	r3, [pc, #44]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800210c:	430a      	orrs	r2, r1
 800210e:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002114:	2380      	movs	r3, #128	; 0x80
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	429a      	cmp	r2, r3
 800211a:	d106      	bne.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800211c:	4b06      	ldr	r3, [pc, #24]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800211e:	68da      	ldr	r2, [r3, #12]
 8002120:	4b05      	ldr	r3, [pc, #20]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002122:	2180      	movs	r1, #128	; 0x80
 8002124:	0449      	lsls	r1, r1, #17
 8002126:	430a      	orrs	r2, r1
 8002128:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800212a:	2312      	movs	r3, #18
 800212c:	18fb      	adds	r3, r7, r3
 800212e:	781b      	ldrb	r3, [r3, #0]
}
 8002130:	0018      	movs	r0, r3
 8002132:	46bd      	mov	sp, r7
 8002134:	b006      	add	sp, #24
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40021000 	.word	0x40021000
 800213c:	efffffff 	.word	0xefffffff
 8002140:	fffff3ff 	.word	0xfffff3ff
 8002144:	fffffcff 	.word	0xfffffcff
 8002148:	fff3ffff 	.word	0xfff3ffff
 800214c:	ffcfffff 	.word	0xffcfffff
 8002150:	ffffcfff 	.word	0xffffcfff
 8002154:	ffff3fff 	.word	0xffff3fff
 8002158:	ffbfffff 	.word	0xffbfffff
 800215c:	feffffff 	.word	0xfeffffff

08002160 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e046      	b.n	8002200 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2284      	movs	r2, #132	; 0x84
 8002176:	589b      	ldr	r3, [r3, r2]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d107      	bne.n	800218c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2280      	movs	r2, #128	; 0x80
 8002180:	2100      	movs	r1, #0
 8002182:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	0018      	movs	r0, r3
 8002188:	f7fe fbb0 	bl	80008ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2284      	movs	r2, #132	; 0x84
 8002190:	2124      	movs	r1, #36	; 0x24
 8002192:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2101      	movs	r1, #1
 80021a0:	438a      	bics	r2, r1
 80021a2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	0018      	movs	r0, r3
 80021a8:	f000 fd3e 	bl	8002c28 <UART_SetConfig>
 80021ac:	0003      	movs	r3, r0
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d101      	bne.n	80021b6 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e024      	b.n	8002200 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d003      	beq.n	80021c6 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	0018      	movs	r0, r3
 80021c2:	f001 f8b1 	bl	8003328 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	685a      	ldr	r2, [r3, #4]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	490d      	ldr	r1, [pc, #52]	; (8002208 <HAL_UART_Init+0xa8>)
 80021d2:	400a      	ands	r2, r1
 80021d4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	689a      	ldr	r2, [r3, #8]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	212a      	movs	r1, #42	; 0x2a
 80021e2:	438a      	bics	r2, r1
 80021e4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2101      	movs	r1, #1
 80021f2:	430a      	orrs	r2, r1
 80021f4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	0018      	movs	r0, r3
 80021fa:	f001 f949 	bl	8003490 <UART_CheckIdleState>
 80021fe:	0003      	movs	r3, r0
}
 8002200:	0018      	movs	r0, r3
 8002202:	46bd      	mov	sp, r7
 8002204:	b002      	add	sp, #8
 8002206:	bd80      	pop	{r7, pc}
 8002208:	ffffb7ff 	.word	0xffffb7ff

0800220c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b08a      	sub	sp, #40	; 0x28
 8002210:	af02      	add	r7, sp, #8
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	603b      	str	r3, [r7, #0]
 8002218:	1dbb      	adds	r3, r7, #6
 800221a:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2284      	movs	r2, #132	; 0x84
 8002220:	589b      	ldr	r3, [r3, r2]
 8002222:	2b20      	cmp	r3, #32
 8002224:	d000      	beq.n	8002228 <HAL_UART_Transmit+0x1c>
 8002226:	e097      	b.n	8002358 <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d003      	beq.n	8002236 <HAL_UART_Transmit+0x2a>
 800222e:	1dbb      	adds	r3, r7, #6
 8002230:	881b      	ldrh	r3, [r3, #0]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e08f      	b.n	800235a <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	689a      	ldr	r2, [r3, #8]
 800223e:	2380      	movs	r3, #128	; 0x80
 8002240:	015b      	lsls	r3, r3, #5
 8002242:	429a      	cmp	r2, r3
 8002244:	d109      	bne.n	800225a <HAL_UART_Transmit+0x4e>
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d105      	bne.n	800225a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	2201      	movs	r2, #1
 8002252:	4013      	ands	r3, r2
 8002254:	d001      	beq.n	800225a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e07f      	b.n	800235a <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2280      	movs	r2, #128	; 0x80
 800225e:	5c9b      	ldrb	r3, [r3, r2]
 8002260:	2b01      	cmp	r3, #1
 8002262:	d101      	bne.n	8002268 <HAL_UART_Transmit+0x5c>
 8002264:	2302      	movs	r3, #2
 8002266:	e078      	b.n	800235a <HAL_UART_Transmit+0x14e>
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2280      	movs	r2, #128	; 0x80
 800226c:	2101      	movs	r1, #1
 800226e:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	228c      	movs	r2, #140	; 0x8c
 8002274:	2100      	movs	r1, #0
 8002276:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2284      	movs	r2, #132	; 0x84
 800227c:	2121      	movs	r1, #33	; 0x21
 800227e:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002280:	f7fe fc6c 	bl	8000b5c <HAL_GetTick>
 8002284:	0003      	movs	r3, r0
 8002286:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	1dba      	adds	r2, r7, #6
 800228c:	2154      	movs	r1, #84	; 0x54
 800228e:	8812      	ldrh	r2, [r2, #0]
 8002290:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	1dba      	adds	r2, r7, #6
 8002296:	2156      	movs	r1, #86	; 0x56
 8002298:	8812      	ldrh	r2, [r2, #0]
 800229a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	689a      	ldr	r2, [r3, #8]
 80022a0:	2380      	movs	r3, #128	; 0x80
 80022a2:	015b      	lsls	r3, r3, #5
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d108      	bne.n	80022ba <HAL_UART_Transmit+0xae>
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	691b      	ldr	r3, [r3, #16]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d104      	bne.n	80022ba <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 80022b0:	2300      	movs	r3, #0
 80022b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	61bb      	str	r3, [r7, #24]
 80022b8:	e003      	b.n	80022c2 <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80022be:	2300      	movs	r3, #0
 80022c0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2280      	movs	r2, #128	; 0x80
 80022c6:	2100      	movs	r1, #0
 80022c8:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80022ca:	e02c      	b.n	8002326 <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022cc:	697a      	ldr	r2, [r7, #20]
 80022ce:	68f8      	ldr	r0, [r7, #12]
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	9300      	str	r3, [sp, #0]
 80022d4:	0013      	movs	r3, r2
 80022d6:	2200      	movs	r2, #0
 80022d8:	2180      	movs	r1, #128	; 0x80
 80022da:	f001 f923 	bl	8003524 <UART_WaitOnFlagUntilTimeout>
 80022de:	1e03      	subs	r3, r0, #0
 80022e0:	d001      	beq.n	80022e6 <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e039      	b.n	800235a <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d10b      	bne.n	8002304 <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	881b      	ldrh	r3, [r3, #0]
 80022f0:	001a      	movs	r2, r3
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	05d2      	lsls	r2, r2, #23
 80022f8:	0dd2      	lsrs	r2, r2, #23
 80022fa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	3302      	adds	r3, #2
 8002300:	61bb      	str	r3, [r7, #24]
 8002302:	e007      	b.n	8002314 <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	781a      	ldrb	r2, [r3, #0]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	3301      	adds	r3, #1
 8002312:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2256      	movs	r2, #86	; 0x56
 8002318:	5a9b      	ldrh	r3, [r3, r2]
 800231a:	b29b      	uxth	r3, r3
 800231c:	3b01      	subs	r3, #1
 800231e:	b299      	uxth	r1, r3
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2256      	movs	r2, #86	; 0x56
 8002324:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2256      	movs	r2, #86	; 0x56
 800232a:	5a9b      	ldrh	r3, [r3, r2]
 800232c:	b29b      	uxth	r3, r3
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1cc      	bne.n	80022cc <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002332:	697a      	ldr	r2, [r7, #20]
 8002334:	68f8      	ldr	r0, [r7, #12]
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	9300      	str	r3, [sp, #0]
 800233a:	0013      	movs	r3, r2
 800233c:	2200      	movs	r2, #0
 800233e:	2140      	movs	r1, #64	; 0x40
 8002340:	f001 f8f0 	bl	8003524 <UART_WaitOnFlagUntilTimeout>
 8002344:	1e03      	subs	r3, r0, #0
 8002346:	d001      	beq.n	800234c <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e006      	b.n	800235a <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2284      	movs	r2, #132	; 0x84
 8002350:	2120      	movs	r1, #32
 8002352:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002354:	2300      	movs	r3, #0
 8002356:	e000      	b.n	800235a <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8002358:	2302      	movs	r3, #2
  }
}
 800235a:	0018      	movs	r0, r3
 800235c:	46bd      	mov	sp, r7
 800235e:	b008      	add	sp, #32
 8002360:	bd80      	pop	{r7, pc}
	...

08002364 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b08c      	sub	sp, #48	; 0x30
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	1dbb      	adds	r3, r7, #6
 8002370:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2284      	movs	r2, #132	; 0x84
 8002376:	589b      	ldr	r3, [r3, r2]
 8002378:	2b20      	cmp	r3, #32
 800237a:	d000      	beq.n	800237e <HAL_UART_Transmit_IT+0x1a>
 800237c:	e0a0      	b.n	80024c0 <HAL_UART_Transmit_IT+0x15c>
  {
    if ((pData == NULL) || (Size == 0U))
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d003      	beq.n	800238c <HAL_UART_Transmit_IT+0x28>
 8002384:	1dbb      	adds	r3, r7, #6
 8002386:	881b      	ldrh	r3, [r3, #0]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d101      	bne.n	8002390 <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e098      	b.n	80024c2 <HAL_UART_Transmit_IT+0x15e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	689a      	ldr	r2, [r3, #8]
 8002394:	2380      	movs	r3, #128	; 0x80
 8002396:	015b      	lsls	r3, r3, #5
 8002398:	429a      	cmp	r2, r3
 800239a:	d109      	bne.n	80023b0 <HAL_UART_Transmit_IT+0x4c>
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	691b      	ldr	r3, [r3, #16]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d105      	bne.n	80023b0 <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	2201      	movs	r2, #1
 80023a8:	4013      	ands	r3, r2
 80023aa:	d001      	beq.n	80023b0 <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e088      	b.n	80024c2 <HAL_UART_Transmit_IT+0x15e>
      }
    }

    __HAL_LOCK(huart);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2280      	movs	r2, #128	; 0x80
 80023b4:	5c9b      	ldrb	r3, [r3, r2]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d101      	bne.n	80023be <HAL_UART_Transmit_IT+0x5a>
 80023ba:	2302      	movs	r3, #2
 80023bc:	e081      	b.n	80024c2 <HAL_UART_Transmit_IT+0x15e>
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2280      	movs	r2, #128	; 0x80
 80023c2:	2101      	movs	r1, #1
 80023c4:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	68ba      	ldr	r2, [r7, #8]
 80023ca:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	1dba      	adds	r2, r7, #6
 80023d0:	2154      	movs	r1, #84	; 0x54
 80023d2:	8812      	ldrh	r2, [r2, #0]
 80023d4:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	1dba      	adds	r2, r7, #6
 80023da:	2156      	movs	r1, #86	; 0x56
 80023dc:	8812      	ldrh	r2, [r2, #0]
 80023de:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2200      	movs	r2, #0
 80023e4:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	228c      	movs	r2, #140	; 0x8c
 80023ea:	2100      	movs	r1, #0
 80023ec:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2284      	movs	r2, #132	; 0x84
 80023f2:	2121      	movs	r1, #33	; 0x21
 80023f4:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80023fa:	2380      	movs	r3, #128	; 0x80
 80023fc:	059b      	lsls	r3, r3, #22
 80023fe:	429a      	cmp	r2, r3
 8002400:	d12e      	bne.n	8002460 <HAL_UART_Transmit_IT+0xfc>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	689a      	ldr	r2, [r3, #8]
 8002406:	2380      	movs	r3, #128	; 0x80
 8002408:	015b      	lsls	r3, r3, #5
 800240a:	429a      	cmp	r2, r3
 800240c:	d107      	bne.n	800241e <HAL_UART_Transmit_IT+0xba>
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d103      	bne.n	800241e <HAL_UART_Transmit_IT+0xba>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	4a2c      	ldr	r2, [pc, #176]	; (80024cc <HAL_UART_Transmit_IT+0x168>)
 800241a:	675a      	str	r2, [r3, #116]	; 0x74
 800241c:	e002      	b.n	8002424 <HAL_UART_Transmit_IT+0xc0>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	4a2b      	ldr	r2, [pc, #172]	; (80024d0 <HAL_UART_Transmit_IT+0x16c>)
 8002422:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2280      	movs	r2, #128	; 0x80
 8002428:	2100      	movs	r1, #0
 800242a:	5499      	strb	r1, [r3, r2]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800242c:	f3ef 8310 	mrs	r3, PRIMASK
 8002430:	61fb      	str	r3, [r7, #28]
  return(result);
 8002432:	69fb      	ldr	r3, [r7, #28]

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8002434:	62bb      	str	r3, [r7, #40]	; 0x28
 8002436:	2301      	movs	r3, #1
 8002438:	623b      	str	r3, [r7, #32]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800243a:	6a3b      	ldr	r3, [r7, #32]
 800243c:	f383 8810 	msr	PRIMASK, r3
}
 8002440:	46c0      	nop			; (mov r8, r8)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	689a      	ldr	r2, [r3, #8]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2180      	movs	r1, #128	; 0x80
 800244e:	0409      	lsls	r1, r1, #16
 8002450:	430a      	orrs	r2, r1
 8002452:	609a      	str	r2, [r3, #8]
 8002454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002456:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245a:	f383 8810 	msr	PRIMASK, r3
}
 800245e:	e02d      	b.n	80024bc <HAL_UART_Transmit_IT+0x158>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	689a      	ldr	r2, [r3, #8]
 8002464:	2380      	movs	r3, #128	; 0x80
 8002466:	015b      	lsls	r3, r3, #5
 8002468:	429a      	cmp	r2, r3
 800246a:	d107      	bne.n	800247c <HAL_UART_Transmit_IT+0x118>
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	691b      	ldr	r3, [r3, #16]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d103      	bne.n	800247c <HAL_UART_Transmit_IT+0x118>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	4a17      	ldr	r2, [pc, #92]	; (80024d4 <HAL_UART_Transmit_IT+0x170>)
 8002478:	675a      	str	r2, [r3, #116]	; 0x74
 800247a:	e002      	b.n	8002482 <HAL_UART_Transmit_IT+0x11e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	4a16      	ldr	r2, [pc, #88]	; (80024d8 <HAL_UART_Transmit_IT+0x174>)
 8002480:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2280      	movs	r2, #128	; 0x80
 8002486:	2100      	movs	r1, #0
 8002488:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800248a:	f3ef 8310 	mrs	r3, PRIMASK
 800248e:	613b      	str	r3, [r7, #16]
  return(result);
 8002490:	693b      	ldr	r3, [r7, #16]

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8002492:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002494:	2301      	movs	r3, #1
 8002496:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	f383 8810 	msr	PRIMASK, r3
}
 800249e:	46c0      	nop			; (mov r8, r8)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2180      	movs	r1, #128	; 0x80
 80024ac:	430a      	orrs	r2, r1
 80024ae:	601a      	str	r2, [r3, #0]
 80024b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024b2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	f383 8810 	msr	PRIMASK, r3
}
 80024ba:	46c0      	nop			; (mov r8, r8)
    }

    return HAL_OK;
 80024bc:	2300      	movs	r3, #0
 80024be:	e000      	b.n	80024c2 <HAL_UART_Transmit_IT+0x15e>
  }
  else
  {
    return HAL_BUSY;
 80024c0:	2302      	movs	r3, #2
  }
}
 80024c2:	0018      	movs	r0, r3
 80024c4:	46bd      	mov	sp, r7
 80024c6:	b00c      	add	sp, #48	; 0x30
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	46c0      	nop			; (mov r8, r8)
 80024cc:	08003c25 	.word	0x08003c25
 80024d0:	08003b39 	.word	0x08003b39
 80024d4:	08003a7b 	.word	0x08003a7b
 80024d8:	080039c7 	.word	0x080039c7

080024dc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b088      	sub	sp, #32
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	1dbb      	adds	r3, r7, #6
 80024e8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2288      	movs	r2, #136	; 0x88
 80024ee:	589b      	ldr	r3, [r3, r2]
 80024f0:	2b20      	cmp	r3, #32
 80024f2:	d15a      	bne.n	80025aa <HAL_UART_Receive_IT+0xce>
  {
    if ((pData == NULL) || (Size == 0U))
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d003      	beq.n	8002502 <HAL_UART_Receive_IT+0x26>
 80024fa:	1dbb      	adds	r3, r7, #6
 80024fc:	881b      	ldrh	r3, [r3, #0]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d101      	bne.n	8002506 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e052      	b.n	80025ac <HAL_UART_Receive_IT+0xd0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	689a      	ldr	r2, [r3, #8]
 800250a:	2380      	movs	r3, #128	; 0x80
 800250c:	015b      	lsls	r3, r3, #5
 800250e:	429a      	cmp	r2, r3
 8002510:	d109      	bne.n	8002526 <HAL_UART_Receive_IT+0x4a>
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d105      	bne.n	8002526 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	2201      	movs	r2, #1
 800251e:	4013      	ands	r3, r2
 8002520:	d001      	beq.n	8002526 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e042      	b.n	80025ac <HAL_UART_Receive_IT+0xd0>
      }
    }

    __HAL_LOCK(huart);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2280      	movs	r2, #128	; 0x80
 800252a:	5c9b      	ldrb	r3, [r3, r2]
 800252c:	2b01      	cmp	r3, #1
 800252e:	d101      	bne.n	8002534 <HAL_UART_Receive_IT+0x58>
 8002530:	2302      	movs	r3, #2
 8002532:	e03b      	b.n	80025ac <HAL_UART_Receive_IT+0xd0>
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2280      	movs	r2, #128	; 0x80
 8002538:	2101      	movs	r1, #1
 800253a:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2200      	movs	r2, #0
 8002540:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a1b      	ldr	r2, [pc, #108]	; (80025b4 <HAL_UART_Receive_IT+0xd8>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d025      	beq.n	8002598 <HAL_UART_Receive_IT+0xbc>
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a19      	ldr	r2, [pc, #100]	; (80025b8 <HAL_UART_Receive_IT+0xdc>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d020      	beq.n	8002598 <HAL_UART_Receive_IT+0xbc>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	685a      	ldr	r2, [r3, #4]
 800255c:	2380      	movs	r3, #128	; 0x80
 800255e:	041b      	lsls	r3, r3, #16
 8002560:	4013      	ands	r3, r2
 8002562:	d019      	beq.n	8002598 <HAL_UART_Receive_IT+0xbc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002564:	f3ef 8310 	mrs	r3, PRIMASK
 8002568:	613b      	str	r3, [r7, #16]
  return(result);
 800256a:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800256c:	61fb      	str	r3, [r7, #28]
 800256e:	2301      	movs	r3, #1
 8002570:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	f383 8810 	msr	PRIMASK, r3
}
 8002578:	46c0      	nop			; (mov r8, r8)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2180      	movs	r1, #128	; 0x80
 8002586:	04c9      	lsls	r1, r1, #19
 8002588:	430a      	orrs	r2, r1
 800258a:	601a      	str	r2, [r3, #0]
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	f383 8810 	msr	PRIMASK, r3
}
 8002596:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002598:	1dbb      	adds	r3, r7, #6
 800259a:	881a      	ldrh	r2, [r3, #0]
 800259c:	68b9      	ldr	r1, [r7, #8]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	0018      	movs	r0, r3
 80025a2:	f001 f887 	bl	80036b4 <UART_Start_Receive_IT>
 80025a6:	0003      	movs	r3, r0
 80025a8:	e000      	b.n	80025ac <HAL_UART_Receive_IT+0xd0>
  }
  else
  {
    return HAL_BUSY;
 80025aa:	2302      	movs	r3, #2
  }
}
 80025ac:	0018      	movs	r0, r3
 80025ae:	46bd      	mov	sp, r7
 80025b0:	b008      	add	sp, #32
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	40008000 	.word	0x40008000
 80025b8:	40008400 	.word	0x40008400

080025bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80025bc:	b5b0      	push	{r4, r5, r7, lr}
 80025be:	b0aa      	sub	sp, #168	; 0xa8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	69db      	ldr	r3, [r3, #28]
 80025ca:	22a4      	movs	r2, #164	; 0xa4
 80025cc:	18b9      	adds	r1, r7, r2
 80025ce:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	20a0      	movs	r0, #160	; 0xa0
 80025d8:	1839      	adds	r1, r7, r0
 80025da:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	249c      	movs	r4, #156	; 0x9c
 80025e4:	1939      	adds	r1, r7, r4
 80025e6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80025e8:	0011      	movs	r1, r2
 80025ea:	18bb      	adds	r3, r7, r2
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4aa0      	ldr	r2, [pc, #640]	; (8002870 <HAL_UART_IRQHandler+0x2b4>)
 80025f0:	4013      	ands	r3, r2
 80025f2:	2298      	movs	r2, #152	; 0x98
 80025f4:	18bd      	adds	r5, r7, r2
 80025f6:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 80025f8:	18bb      	adds	r3, r7, r2
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d11a      	bne.n	8002636 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002600:	187b      	adds	r3, r7, r1
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2220      	movs	r2, #32
 8002606:	4013      	ands	r3, r2
 8002608:	d015      	beq.n	8002636 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800260a:	183b      	adds	r3, r7, r0
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2220      	movs	r2, #32
 8002610:	4013      	ands	r3, r2
 8002612:	d105      	bne.n	8002620 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002614:	193b      	adds	r3, r7, r4
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	2380      	movs	r3, #128	; 0x80
 800261a:	055b      	lsls	r3, r3, #21
 800261c:	4013      	ands	r3, r2
 800261e:	d00a      	beq.n	8002636 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002624:	2b00      	cmp	r3, #0
 8002626:	d100      	bne.n	800262a <HAL_UART_IRQHandler+0x6e>
 8002628:	e2cf      	b.n	8002bca <HAL_UART_IRQHandler+0x60e>
      {
        huart->RxISR(huart);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	0010      	movs	r0, r2
 8002632:	4798      	blx	r3
      }
      return;
 8002634:	e2c9      	b.n	8002bca <HAL_UART_IRQHandler+0x60e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002636:	2398      	movs	r3, #152	; 0x98
 8002638:	18fb      	adds	r3, r7, r3
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d100      	bne.n	8002642 <HAL_UART_IRQHandler+0x86>
 8002640:	e11e      	b.n	8002880 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002642:	239c      	movs	r3, #156	; 0x9c
 8002644:	18fb      	adds	r3, r7, r3
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a8a      	ldr	r2, [pc, #552]	; (8002874 <HAL_UART_IRQHandler+0x2b8>)
 800264a:	4013      	ands	r3, r2
 800264c:	d106      	bne.n	800265c <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800264e:	23a0      	movs	r3, #160	; 0xa0
 8002650:	18fb      	adds	r3, r7, r3
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a88      	ldr	r2, [pc, #544]	; (8002878 <HAL_UART_IRQHandler+0x2bc>)
 8002656:	4013      	ands	r3, r2
 8002658:	d100      	bne.n	800265c <HAL_UART_IRQHandler+0xa0>
 800265a:	e111      	b.n	8002880 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800265c:	23a4      	movs	r3, #164	; 0xa4
 800265e:	18fb      	adds	r3, r7, r3
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	2201      	movs	r2, #1
 8002664:	4013      	ands	r3, r2
 8002666:	d012      	beq.n	800268e <HAL_UART_IRQHandler+0xd2>
 8002668:	23a0      	movs	r3, #160	; 0xa0
 800266a:	18fb      	adds	r3, r7, r3
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	2380      	movs	r3, #128	; 0x80
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	4013      	ands	r3, r2
 8002674:	d00b      	beq.n	800268e <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	2201      	movs	r2, #1
 800267c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	228c      	movs	r2, #140	; 0x8c
 8002682:	589b      	ldr	r3, [r3, r2]
 8002684:	2201      	movs	r2, #1
 8002686:	431a      	orrs	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	218c      	movs	r1, #140	; 0x8c
 800268c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800268e:	23a4      	movs	r3, #164	; 0xa4
 8002690:	18fb      	adds	r3, r7, r3
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2202      	movs	r2, #2
 8002696:	4013      	ands	r3, r2
 8002698:	d011      	beq.n	80026be <HAL_UART_IRQHandler+0x102>
 800269a:	239c      	movs	r3, #156	; 0x9c
 800269c:	18fb      	adds	r3, r7, r3
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2201      	movs	r2, #1
 80026a2:	4013      	ands	r3, r2
 80026a4:	d00b      	beq.n	80026be <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2202      	movs	r2, #2
 80026ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	228c      	movs	r2, #140	; 0x8c
 80026b2:	589b      	ldr	r3, [r3, r2]
 80026b4:	2204      	movs	r2, #4
 80026b6:	431a      	orrs	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	218c      	movs	r1, #140	; 0x8c
 80026bc:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80026be:	23a4      	movs	r3, #164	; 0xa4
 80026c0:	18fb      	adds	r3, r7, r3
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2204      	movs	r2, #4
 80026c6:	4013      	ands	r3, r2
 80026c8:	d011      	beq.n	80026ee <HAL_UART_IRQHandler+0x132>
 80026ca:	239c      	movs	r3, #156	; 0x9c
 80026cc:	18fb      	adds	r3, r7, r3
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2201      	movs	r2, #1
 80026d2:	4013      	ands	r3, r2
 80026d4:	d00b      	beq.n	80026ee <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2204      	movs	r2, #4
 80026dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	228c      	movs	r2, #140	; 0x8c
 80026e2:	589b      	ldr	r3, [r3, r2]
 80026e4:	2202      	movs	r2, #2
 80026e6:	431a      	orrs	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	218c      	movs	r1, #140	; 0x8c
 80026ec:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80026ee:	23a4      	movs	r3, #164	; 0xa4
 80026f0:	18fb      	adds	r3, r7, r3
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2208      	movs	r2, #8
 80026f6:	4013      	ands	r3, r2
 80026f8:	d017      	beq.n	800272a <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80026fa:	23a0      	movs	r3, #160	; 0xa0
 80026fc:	18fb      	adds	r3, r7, r3
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2220      	movs	r2, #32
 8002702:	4013      	ands	r3, r2
 8002704:	d105      	bne.n	8002712 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002706:	239c      	movs	r3, #156	; 0x9c
 8002708:	18fb      	adds	r3, r7, r3
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a59      	ldr	r2, [pc, #356]	; (8002874 <HAL_UART_IRQHandler+0x2b8>)
 800270e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002710:	d00b      	beq.n	800272a <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2208      	movs	r2, #8
 8002718:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	228c      	movs	r2, #140	; 0x8c
 800271e:	589b      	ldr	r3, [r3, r2]
 8002720:	2208      	movs	r2, #8
 8002722:	431a      	orrs	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	218c      	movs	r1, #140	; 0x8c
 8002728:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800272a:	23a4      	movs	r3, #164	; 0xa4
 800272c:	18fb      	adds	r3, r7, r3
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	2380      	movs	r3, #128	; 0x80
 8002732:	011b      	lsls	r3, r3, #4
 8002734:	4013      	ands	r3, r2
 8002736:	d013      	beq.n	8002760 <HAL_UART_IRQHandler+0x1a4>
 8002738:	23a0      	movs	r3, #160	; 0xa0
 800273a:	18fb      	adds	r3, r7, r3
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	2380      	movs	r3, #128	; 0x80
 8002740:	04db      	lsls	r3, r3, #19
 8002742:	4013      	ands	r3, r2
 8002744:	d00c      	beq.n	8002760 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2280      	movs	r2, #128	; 0x80
 800274c:	0112      	lsls	r2, r2, #4
 800274e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	228c      	movs	r2, #140	; 0x8c
 8002754:	589b      	ldr	r3, [r3, r2]
 8002756:	2220      	movs	r2, #32
 8002758:	431a      	orrs	r2, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	218c      	movs	r1, #140	; 0x8c
 800275e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	228c      	movs	r2, #140	; 0x8c
 8002764:	589b      	ldr	r3, [r3, r2]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d100      	bne.n	800276c <HAL_UART_IRQHandler+0x1b0>
 800276a:	e230      	b.n	8002bce <HAL_UART_IRQHandler+0x612>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800276c:	23a4      	movs	r3, #164	; 0xa4
 800276e:	18fb      	adds	r3, r7, r3
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2220      	movs	r2, #32
 8002774:	4013      	ands	r3, r2
 8002776:	d015      	beq.n	80027a4 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002778:	23a0      	movs	r3, #160	; 0xa0
 800277a:	18fb      	adds	r3, r7, r3
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2220      	movs	r2, #32
 8002780:	4013      	ands	r3, r2
 8002782:	d106      	bne.n	8002792 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002784:	239c      	movs	r3, #156	; 0x9c
 8002786:	18fb      	adds	r3, r7, r3
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	2380      	movs	r3, #128	; 0x80
 800278c:	055b      	lsls	r3, r3, #21
 800278e:	4013      	ands	r3, r2
 8002790:	d008      	beq.n	80027a4 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002796:	2b00      	cmp	r3, #0
 8002798:	d004      	beq.n	80027a4 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	0010      	movs	r0, r2
 80027a2:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	228c      	movs	r2, #140	; 0x8c
 80027a8:	589b      	ldr	r3, [r3, r2]
 80027aa:	2194      	movs	r1, #148	; 0x94
 80027ac:	187a      	adds	r2, r7, r1
 80027ae:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	2240      	movs	r2, #64	; 0x40
 80027b8:	4013      	ands	r3, r2
 80027ba:	2b40      	cmp	r3, #64	; 0x40
 80027bc:	d004      	beq.n	80027c8 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80027be:	187b      	adds	r3, r7, r1
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2228      	movs	r2, #40	; 0x28
 80027c4:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80027c6:	d047      	beq.n	8002858 <HAL_UART_IRQHandler+0x29c>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	0018      	movs	r0, r3
 80027cc:	f001 f87e 	bl	80038cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	2240      	movs	r2, #64	; 0x40
 80027d8:	4013      	ands	r3, r2
 80027da:	2b40      	cmp	r3, #64	; 0x40
 80027dc:	d137      	bne.n	800284e <HAL_UART_IRQHandler+0x292>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027de:	f3ef 8310 	mrs	r3, PRIMASK
 80027e2:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80027e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027e6:	2090      	movs	r0, #144	; 0x90
 80027e8:	183a      	adds	r2, r7, r0
 80027ea:	6013      	str	r3, [r2, #0]
 80027ec:	2301      	movs	r3, #1
 80027ee:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027f2:	f383 8810 	msr	PRIMASK, r3
}
 80027f6:	46c0      	nop			; (mov r8, r8)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	689a      	ldr	r2, [r3, #8]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2140      	movs	r1, #64	; 0x40
 8002804:	438a      	bics	r2, r1
 8002806:	609a      	str	r2, [r3, #8]
 8002808:	183b      	adds	r3, r7, r0
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800280e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002810:	f383 8810 	msr	PRIMASK, r3
}
 8002814:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800281a:	2b00      	cmp	r3, #0
 800281c:	d012      	beq.n	8002844 <HAL_UART_IRQHandler+0x288>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002822:	4a16      	ldr	r2, [pc, #88]	; (800287c <HAL_UART_IRQHandler+0x2c0>)
 8002824:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800282a:	0018      	movs	r0, r3
 800282c:	f7fe faf4 	bl	8000e18 <HAL_DMA_Abort_IT>
 8002830:	1e03      	subs	r3, r0, #0
 8002832:	d01a      	beq.n	800286a <HAL_UART_IRQHandler+0x2ae>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002838:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800283e:	0018      	movs	r0, r3
 8002840:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002842:	e012      	b.n	800286a <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	0018      	movs	r0, r3
 8002848:	f000 f9da 	bl	8002c00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800284c:	e00d      	b.n	800286a <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	0018      	movs	r0, r3
 8002852:	f000 f9d5 	bl	8002c00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002856:	e008      	b.n	800286a <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	0018      	movs	r0, r3
 800285c:	f000 f9d0 	bl	8002c00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	228c      	movs	r2, #140	; 0x8c
 8002864:	2100      	movs	r1, #0
 8002866:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002868:	e1b1      	b.n	8002bce <HAL_UART_IRQHandler+0x612>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800286a:	46c0      	nop			; (mov r8, r8)
    return;
 800286c:	e1af      	b.n	8002bce <HAL_UART_IRQHandler+0x612>
 800286e:	46c0      	nop			; (mov r8, r8)
 8002870:	0000080f 	.word	0x0000080f
 8002874:	10000001 	.word	0x10000001
 8002878:	04000120 	.word	0x04000120
 800287c:	08003999 	.word	0x08003999

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002884:	2b01      	cmp	r3, #1
 8002886:	d000      	beq.n	800288a <HAL_UART_IRQHandler+0x2ce>
 8002888:	e135      	b.n	8002af6 <HAL_UART_IRQHandler+0x53a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800288a:	23a4      	movs	r3, #164	; 0xa4
 800288c:	18fb      	adds	r3, r7, r3
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2210      	movs	r2, #16
 8002892:	4013      	ands	r3, r2
 8002894:	d100      	bne.n	8002898 <HAL_UART_IRQHandler+0x2dc>
 8002896:	e12e      	b.n	8002af6 <HAL_UART_IRQHandler+0x53a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002898:	23a0      	movs	r3, #160	; 0xa0
 800289a:	18fb      	adds	r3, r7, r3
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2210      	movs	r2, #16
 80028a0:	4013      	ands	r3, r2
 80028a2:	d100      	bne.n	80028a6 <HAL_UART_IRQHandler+0x2ea>
 80028a4:	e127      	b.n	8002af6 <HAL_UART_IRQHandler+0x53a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2210      	movs	r2, #16
 80028ac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	2240      	movs	r2, #64	; 0x40
 80028b6:	4013      	ands	r3, r2
 80028b8:	2b40      	cmp	r3, #64	; 0x40
 80028ba:	d000      	beq.n	80028be <HAL_UART_IRQHandler+0x302>
 80028bc:	e09e      	b.n	80029fc <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	685a      	ldr	r2, [r3, #4]
 80028c6:	217e      	movs	r1, #126	; 0x7e
 80028c8:	187b      	adds	r3, r7, r1
 80028ca:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80028cc:	187b      	adds	r3, r7, r1
 80028ce:	881b      	ldrh	r3, [r3, #0]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d100      	bne.n	80028d6 <HAL_UART_IRQHandler+0x31a>
 80028d4:	e17d      	b.n	8002bd2 <HAL_UART_IRQHandler+0x616>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	225c      	movs	r2, #92	; 0x5c
 80028da:	5a9b      	ldrh	r3, [r3, r2]
 80028dc:	187a      	adds	r2, r7, r1
 80028de:	8812      	ldrh	r2, [r2, #0]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d300      	bcc.n	80028e6 <HAL_UART_IRQHandler+0x32a>
 80028e4:	e175      	b.n	8002bd2 <HAL_UART_IRQHandler+0x616>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	187a      	adds	r2, r7, r1
 80028ea:	215e      	movs	r1, #94	; 0x5e
 80028ec:	8812      	ldrh	r2, [r2, #0]
 80028ee:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2220      	movs	r2, #32
 80028fa:	4013      	ands	r3, r2
 80028fc:	d16f      	bne.n	80029de <HAL_UART_IRQHandler+0x422>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028fe:	f3ef 8310 	mrs	r3, PRIMASK
 8002902:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002906:	67bb      	str	r3, [r7, #120]	; 0x78
 8002908:	2301      	movs	r3, #1
 800290a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800290c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800290e:	f383 8810 	msr	PRIMASK, r3
}
 8002912:	46c0      	nop			; (mov r8, r8)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	49b1      	ldr	r1, [pc, #708]	; (8002be4 <HAL_UART_IRQHandler+0x628>)
 8002920:	400a      	ands	r2, r1
 8002922:	601a      	str	r2, [r3, #0]
 8002924:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002926:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800292a:	f383 8810 	msr	PRIMASK, r3
}
 800292e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002930:	f3ef 8310 	mrs	r3, PRIMASK
 8002934:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8002936:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002938:	677b      	str	r3, [r7, #116]	; 0x74
 800293a:	2301      	movs	r3, #1
 800293c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800293e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002940:	f383 8810 	msr	PRIMASK, r3
}
 8002944:	46c0      	nop			; (mov r8, r8)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2101      	movs	r1, #1
 8002952:	438a      	bics	r2, r1
 8002954:	609a      	str	r2, [r3, #8]
 8002956:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002958:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800295a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800295c:	f383 8810 	msr	PRIMASK, r3
}
 8002960:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002962:	f3ef 8310 	mrs	r3, PRIMASK
 8002966:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002968:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800296a:	673b      	str	r3, [r7, #112]	; 0x70
 800296c:	2301      	movs	r3, #1
 800296e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002970:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002972:	f383 8810 	msr	PRIMASK, r3
}
 8002976:	46c0      	nop			; (mov r8, r8)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	689a      	ldr	r2, [r3, #8]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2140      	movs	r1, #64	; 0x40
 8002984:	438a      	bics	r2, r1
 8002986:	609a      	str	r2, [r3, #8]
 8002988:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800298a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800298c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800298e:	f383 8810 	msr	PRIMASK, r3
}
 8002992:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2288      	movs	r2, #136	; 0x88
 8002998:	2120      	movs	r1, #32
 800299a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029a2:	f3ef 8310 	mrs	r3, PRIMASK
 80029a6:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80029a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80029ac:	2301      	movs	r3, #1
 80029ae:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029b2:	f383 8810 	msr	PRIMASK, r3
}
 80029b6:	46c0      	nop			; (mov r8, r8)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2110      	movs	r1, #16
 80029c4:	438a      	bics	r2, r1
 80029c6:	601a      	str	r2, [r3, #0]
 80029c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029ca:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029ce:	f383 8810 	msr	PRIMASK, r3
}
 80029d2:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029d8:	0018      	movs	r0, r3
 80029da:	f7fe f9bd 	bl	8000d58 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	225c      	movs	r2, #92	; 0x5c
 80029e2:	5a9a      	ldrh	r2, [r3, r2]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	215e      	movs	r1, #94	; 0x5e
 80029e8:	5a5b      	ldrh	r3, [r3, r1]
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	b29a      	uxth	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	0011      	movs	r1, r2
 80029f4:	0018      	movs	r0, r3
 80029f6:	f000 f90b 	bl	8002c10 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80029fa:	e0ea      	b.n	8002bd2 <HAL_UART_IRQHandler+0x616>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	225c      	movs	r2, #92	; 0x5c
 8002a00:	5a99      	ldrh	r1, [r3, r2]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	225e      	movs	r2, #94	; 0x5e
 8002a06:	5a9b      	ldrh	r3, [r3, r2]
 8002a08:	b29a      	uxth	r2, r3
 8002a0a:	208e      	movs	r0, #142	; 0x8e
 8002a0c:	183b      	adds	r3, r7, r0
 8002a0e:	1a8a      	subs	r2, r1, r2
 8002a10:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	225e      	movs	r2, #94	; 0x5e
 8002a16:	5a9b      	ldrh	r3, [r3, r2]
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d100      	bne.n	8002a20 <HAL_UART_IRQHandler+0x464>
 8002a1e:	e0da      	b.n	8002bd6 <HAL_UART_IRQHandler+0x61a>
          && (nb_rx_data > 0U))
 8002a20:	183b      	adds	r3, r7, r0
 8002a22:	881b      	ldrh	r3, [r3, #0]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d100      	bne.n	8002a2a <HAL_UART_IRQHandler+0x46e>
 8002a28:	e0d5      	b.n	8002bd6 <HAL_UART_IRQHandler+0x61a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a2a:	f3ef 8310 	mrs	r3, PRIMASK
 8002a2e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002a30:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002a32:	2488      	movs	r4, #136	; 0x88
 8002a34:	193a      	adds	r2, r7, r4
 8002a36:	6013      	str	r3, [r2, #0]
 8002a38:	2301      	movs	r3, #1
 8002a3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	f383 8810 	msr	PRIMASK, r3
}
 8002a42:	46c0      	nop			; (mov r8, r8)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4966      	ldr	r1, [pc, #408]	; (8002be8 <HAL_UART_IRQHandler+0x62c>)
 8002a50:	400a      	ands	r2, r1
 8002a52:	601a      	str	r2, [r3, #0]
 8002a54:	193b      	adds	r3, r7, r4
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	f383 8810 	msr	PRIMASK, r3
}
 8002a60:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a62:	f3ef 8310 	mrs	r3, PRIMASK
 8002a66:	61bb      	str	r3, [r7, #24]
  return(result);
 8002a68:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002a6a:	2484      	movs	r4, #132	; 0x84
 8002a6c:	193a      	adds	r2, r7, r4
 8002a6e:	6013      	str	r3, [r2, #0]
 8002a70:	2301      	movs	r3, #1
 8002a72:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	f383 8810 	msr	PRIMASK, r3
}
 8002a7a:	46c0      	nop			; (mov r8, r8)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	689a      	ldr	r2, [r3, #8]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4959      	ldr	r1, [pc, #356]	; (8002bec <HAL_UART_IRQHandler+0x630>)
 8002a88:	400a      	ands	r2, r1
 8002a8a:	609a      	str	r2, [r3, #8]
 8002a8c:	193b      	adds	r3, r7, r4
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a92:	6a3b      	ldr	r3, [r7, #32]
 8002a94:	f383 8810 	msr	PRIMASK, r3
}
 8002a98:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2288      	movs	r2, #136	; 0x88
 8002a9e:	2120      	movs	r1, #32
 8002aa0:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002aae:	f3ef 8310 	mrs	r3, PRIMASK
 8002ab2:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ab6:	2480      	movs	r4, #128	; 0x80
 8002ab8:	193a      	adds	r2, r7, r4
 8002aba:	6013      	str	r3, [r2, #0]
 8002abc:	2301      	movs	r3, #1
 8002abe:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac2:	f383 8810 	msr	PRIMASK, r3
}
 8002ac6:	46c0      	nop			; (mov r8, r8)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2110      	movs	r1, #16
 8002ad4:	438a      	bics	r2, r1
 8002ad6:	601a      	str	r2, [r3, #0]
 8002ad8:	193b      	adds	r3, r7, r4
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ae0:	f383 8810 	msr	PRIMASK, r3
}
 8002ae4:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ae6:	183b      	adds	r3, r7, r0
 8002ae8:	881a      	ldrh	r2, [r3, #0]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	0011      	movs	r1, r2
 8002aee:	0018      	movs	r0, r3
 8002af0:	f000 f88e 	bl	8002c10 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002af4:	e06f      	b.n	8002bd6 <HAL_UART_IRQHandler+0x61a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002af6:	23a4      	movs	r3, #164	; 0xa4
 8002af8:	18fb      	adds	r3, r7, r3
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	2380      	movs	r3, #128	; 0x80
 8002afe:	035b      	lsls	r3, r3, #13
 8002b00:	4013      	ands	r3, r2
 8002b02:	d010      	beq.n	8002b26 <HAL_UART_IRQHandler+0x56a>
 8002b04:	239c      	movs	r3, #156	; 0x9c
 8002b06:	18fb      	adds	r3, r7, r3
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	2380      	movs	r3, #128	; 0x80
 8002b0c:	03db      	lsls	r3, r3, #15
 8002b0e:	4013      	ands	r3, r2
 8002b10:	d009      	beq.n	8002b26 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2280      	movs	r2, #128	; 0x80
 8002b18:	0352      	lsls	r2, r2, #13
 8002b1a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	0018      	movs	r0, r3
 8002b20:	f001 fd76 	bl	8004610 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002b24:	e05a      	b.n	8002bdc <HAL_UART_IRQHandler+0x620>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002b26:	23a4      	movs	r3, #164	; 0xa4
 8002b28:	18fb      	adds	r3, r7, r3
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2280      	movs	r2, #128	; 0x80
 8002b2e:	4013      	ands	r3, r2
 8002b30:	d016      	beq.n	8002b60 <HAL_UART_IRQHandler+0x5a4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002b32:	23a0      	movs	r3, #160	; 0xa0
 8002b34:	18fb      	adds	r3, r7, r3
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2280      	movs	r2, #128	; 0x80
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	d106      	bne.n	8002b4c <HAL_UART_IRQHandler+0x590>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002b3e:	239c      	movs	r3, #156	; 0x9c
 8002b40:	18fb      	adds	r3, r7, r3
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	2380      	movs	r3, #128	; 0x80
 8002b46:	041b      	lsls	r3, r3, #16
 8002b48:	4013      	ands	r3, r2
 8002b4a:	d009      	beq.n	8002b60 <HAL_UART_IRQHandler+0x5a4>
  {
    if (huart->TxISR != NULL)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d042      	beq.n	8002bda <HAL_UART_IRQHandler+0x61e>
    {
      huart->TxISR(huart);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	0010      	movs	r0, r2
 8002b5c:	4798      	blx	r3
    }
    return;
 8002b5e:	e03c      	b.n	8002bda <HAL_UART_IRQHandler+0x61e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002b60:	23a4      	movs	r3, #164	; 0xa4
 8002b62:	18fb      	adds	r3, r7, r3
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2240      	movs	r2, #64	; 0x40
 8002b68:	4013      	ands	r3, r2
 8002b6a:	d00a      	beq.n	8002b82 <HAL_UART_IRQHandler+0x5c6>
 8002b6c:	23a0      	movs	r3, #160	; 0xa0
 8002b6e:	18fb      	adds	r3, r7, r3
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2240      	movs	r2, #64	; 0x40
 8002b74:	4013      	ands	r3, r2
 8002b76:	d004      	beq.n	8002b82 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	0018      	movs	r0, r3
 8002b7c:	f001 f8cc 	bl	8003d18 <UART_EndTransmit_IT>
    return;
 8002b80:	e02c      	b.n	8002bdc <HAL_UART_IRQHandler+0x620>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002b82:	23a4      	movs	r3, #164	; 0xa4
 8002b84:	18fb      	adds	r3, r7, r3
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	2380      	movs	r3, #128	; 0x80
 8002b8a:	041b      	lsls	r3, r3, #16
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	d00b      	beq.n	8002ba8 <HAL_UART_IRQHandler+0x5ec>
 8002b90:	23a0      	movs	r3, #160	; 0xa0
 8002b92:	18fb      	adds	r3, r7, r3
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	2380      	movs	r3, #128	; 0x80
 8002b98:	05db      	lsls	r3, r3, #23
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	d004      	beq.n	8002ba8 <HAL_UART_IRQHandler+0x5ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	0018      	movs	r0, r3
 8002ba2:	f001 fd45 	bl	8004630 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002ba6:	e019      	b.n	8002bdc <HAL_UART_IRQHandler+0x620>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002ba8:	23a4      	movs	r3, #164	; 0xa4
 8002baa:	18fb      	adds	r3, r7, r3
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	2380      	movs	r3, #128	; 0x80
 8002bb0:	045b      	lsls	r3, r3, #17
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	d012      	beq.n	8002bdc <HAL_UART_IRQHandler+0x620>
 8002bb6:	23a0      	movs	r3, #160	; 0xa0
 8002bb8:	18fb      	adds	r3, r7, r3
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	da0d      	bge.n	8002bdc <HAL_UART_IRQHandler+0x620>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	0018      	movs	r0, r3
 8002bc4:	f001 fd2c 	bl	8004620 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002bc8:	e008      	b.n	8002bdc <HAL_UART_IRQHandler+0x620>
      return;
 8002bca:	46c0      	nop			; (mov r8, r8)
 8002bcc:	e006      	b.n	8002bdc <HAL_UART_IRQHandler+0x620>
    return;
 8002bce:	46c0      	nop			; (mov r8, r8)
 8002bd0:	e004      	b.n	8002bdc <HAL_UART_IRQHandler+0x620>
      return;
 8002bd2:	46c0      	nop			; (mov r8, r8)
 8002bd4:	e002      	b.n	8002bdc <HAL_UART_IRQHandler+0x620>
      return;
 8002bd6:	46c0      	nop			; (mov r8, r8)
 8002bd8:	e000      	b.n	8002bdc <HAL_UART_IRQHandler+0x620>
    return;
 8002bda:	46c0      	nop			; (mov r8, r8)
  }
}
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	b02a      	add	sp, #168	; 0xa8
 8002be0:	bdb0      	pop	{r4, r5, r7, pc}
 8002be2:	46c0      	nop			; (mov r8, r8)
 8002be4:	fffffeff 	.word	0xfffffeff
 8002be8:	fffffedf 	.word	0xfffffedf
 8002bec:	effffffe 	.word	0xeffffffe

08002bf0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002bf8:	46c0      	nop			; (mov r8, r8)
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	b002      	add	sp, #8
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002c08:	46c0      	nop			; (mov r8, r8)
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	b002      	add	sp, #8
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	000a      	movs	r2, r1
 8002c1a:	1cbb      	adds	r3, r7, #2
 8002c1c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002c1e:	46c0      	nop			; (mov r8, r8)
 8002c20:	46bd      	mov	sp, r7
 8002c22:	b002      	add	sp, #8
 8002c24:	bd80      	pop	{r7, pc}
	...

08002c28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c28:	b5b0      	push	{r4, r5, r7, lr}
 8002c2a:	b090      	sub	sp, #64	; 0x40
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c30:	231a      	movs	r3, #26
 8002c32:	2220      	movs	r2, #32
 8002c34:	4694      	mov	ip, r2
 8002c36:	44bc      	add	ip, r7
 8002c38:	4463      	add	r3, ip
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c40:	689a      	ldr	r2, [r3, #8]
 8002c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	431a      	orrs	r2, r3
 8002c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4a:	695b      	ldr	r3, [r3, #20]
 8002c4c:	431a      	orrs	r2, r3
 8002c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c50:	69db      	ldr	r3, [r3, #28]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4ac1      	ldr	r2, [pc, #772]	; (8002f64 <UART_SetConfig+0x33c>)
 8002c5e:	4013      	ands	r3, r2
 8002c60:	0019      	movs	r1, r3
 8002c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c68:	430b      	orrs	r3, r1
 8002c6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	4abd      	ldr	r2, [pc, #756]	; (8002f68 <UART_SetConfig+0x340>)
 8002c74:	4013      	ands	r3, r2
 8002c76:	0018      	movs	r0, r3
 8002c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7a:	68d9      	ldr	r1, [r3, #12]
 8002c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	0003      	movs	r3, r0
 8002c82:	430b      	orrs	r3, r1
 8002c84:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4ab6      	ldr	r2, [pc, #728]	; (8002f6c <UART_SetConfig+0x344>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d009      	beq.n	8002caa <UART_SetConfig+0x82>
 8002c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4ab5      	ldr	r2, [pc, #724]	; (8002f70 <UART_SetConfig+0x348>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d004      	beq.n	8002caa <UART_SetConfig+0x82>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca2:	6a1b      	ldr	r3, [r3, #32]
 8002ca4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	4ab0      	ldr	r2, [pc, #704]	; (8002f74 <UART_SetConfig+0x34c>)
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	0019      	movs	r1, r3
 8002cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cbc:	430b      	orrs	r3, r1
 8002cbe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc6:	220f      	movs	r2, #15
 8002cc8:	4393      	bics	r3, r2
 8002cca:	0018      	movs	r0, r3
 8002ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cce:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	0003      	movs	r3, r0
 8002cd6:	430b      	orrs	r3, r1
 8002cd8:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4aa6      	ldr	r2, [pc, #664]	; (8002f78 <UART_SetConfig+0x350>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d136      	bne.n	8002d52 <UART_SetConfig+0x12a>
 8002ce4:	4ba5      	ldr	r3, [pc, #660]	; (8002f7c <UART_SetConfig+0x354>)
 8002ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ce8:	2203      	movs	r2, #3
 8002cea:	4013      	ands	r3, r2
 8002cec:	2b03      	cmp	r3, #3
 8002cee:	d020      	beq.n	8002d32 <UART_SetConfig+0x10a>
 8002cf0:	d827      	bhi.n	8002d42 <UART_SetConfig+0x11a>
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d00d      	beq.n	8002d12 <UART_SetConfig+0xea>
 8002cf6:	d824      	bhi.n	8002d42 <UART_SetConfig+0x11a>
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d002      	beq.n	8002d02 <UART_SetConfig+0xda>
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d010      	beq.n	8002d22 <UART_SetConfig+0xfa>
 8002d00:	e01f      	b.n	8002d42 <UART_SetConfig+0x11a>
 8002d02:	231b      	movs	r3, #27
 8002d04:	2220      	movs	r2, #32
 8002d06:	4694      	mov	ip, r2
 8002d08:	44bc      	add	ip, r7
 8002d0a:	4463      	add	r3, ip
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	701a      	strb	r2, [r3, #0]
 8002d10:	e16f      	b.n	8002ff2 <UART_SetConfig+0x3ca>
 8002d12:	231b      	movs	r3, #27
 8002d14:	2220      	movs	r2, #32
 8002d16:	4694      	mov	ip, r2
 8002d18:	44bc      	add	ip, r7
 8002d1a:	4463      	add	r3, ip
 8002d1c:	2202      	movs	r2, #2
 8002d1e:	701a      	strb	r2, [r3, #0]
 8002d20:	e167      	b.n	8002ff2 <UART_SetConfig+0x3ca>
 8002d22:	231b      	movs	r3, #27
 8002d24:	2220      	movs	r2, #32
 8002d26:	4694      	mov	ip, r2
 8002d28:	44bc      	add	ip, r7
 8002d2a:	4463      	add	r3, ip
 8002d2c:	2204      	movs	r2, #4
 8002d2e:	701a      	strb	r2, [r3, #0]
 8002d30:	e15f      	b.n	8002ff2 <UART_SetConfig+0x3ca>
 8002d32:	231b      	movs	r3, #27
 8002d34:	2220      	movs	r2, #32
 8002d36:	4694      	mov	ip, r2
 8002d38:	44bc      	add	ip, r7
 8002d3a:	4463      	add	r3, ip
 8002d3c:	2208      	movs	r2, #8
 8002d3e:	701a      	strb	r2, [r3, #0]
 8002d40:	e157      	b.n	8002ff2 <UART_SetConfig+0x3ca>
 8002d42:	231b      	movs	r3, #27
 8002d44:	2220      	movs	r2, #32
 8002d46:	4694      	mov	ip, r2
 8002d48:	44bc      	add	ip, r7
 8002d4a:	4463      	add	r3, ip
 8002d4c:	2210      	movs	r2, #16
 8002d4e:	701a      	strb	r2, [r3, #0]
 8002d50:	e14f      	b.n	8002ff2 <UART_SetConfig+0x3ca>
 8002d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a8a      	ldr	r2, [pc, #552]	; (8002f80 <UART_SetConfig+0x358>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d136      	bne.n	8002dca <UART_SetConfig+0x1a2>
 8002d5c:	4b87      	ldr	r3, [pc, #540]	; (8002f7c <UART_SetConfig+0x354>)
 8002d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d60:	220c      	movs	r2, #12
 8002d62:	4013      	ands	r3, r2
 8002d64:	2b0c      	cmp	r3, #12
 8002d66:	d020      	beq.n	8002daa <UART_SetConfig+0x182>
 8002d68:	d827      	bhi.n	8002dba <UART_SetConfig+0x192>
 8002d6a:	2b08      	cmp	r3, #8
 8002d6c:	d00d      	beq.n	8002d8a <UART_SetConfig+0x162>
 8002d6e:	d824      	bhi.n	8002dba <UART_SetConfig+0x192>
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d002      	beq.n	8002d7a <UART_SetConfig+0x152>
 8002d74:	2b04      	cmp	r3, #4
 8002d76:	d010      	beq.n	8002d9a <UART_SetConfig+0x172>
 8002d78:	e01f      	b.n	8002dba <UART_SetConfig+0x192>
 8002d7a:	231b      	movs	r3, #27
 8002d7c:	2220      	movs	r2, #32
 8002d7e:	4694      	mov	ip, r2
 8002d80:	44bc      	add	ip, r7
 8002d82:	4463      	add	r3, ip
 8002d84:	2200      	movs	r2, #0
 8002d86:	701a      	strb	r2, [r3, #0]
 8002d88:	e133      	b.n	8002ff2 <UART_SetConfig+0x3ca>
 8002d8a:	231b      	movs	r3, #27
 8002d8c:	2220      	movs	r2, #32
 8002d8e:	4694      	mov	ip, r2
 8002d90:	44bc      	add	ip, r7
 8002d92:	4463      	add	r3, ip
 8002d94:	2202      	movs	r2, #2
 8002d96:	701a      	strb	r2, [r3, #0]
 8002d98:	e12b      	b.n	8002ff2 <UART_SetConfig+0x3ca>
 8002d9a:	231b      	movs	r3, #27
 8002d9c:	2220      	movs	r2, #32
 8002d9e:	4694      	mov	ip, r2
 8002da0:	44bc      	add	ip, r7
 8002da2:	4463      	add	r3, ip
 8002da4:	2204      	movs	r2, #4
 8002da6:	701a      	strb	r2, [r3, #0]
 8002da8:	e123      	b.n	8002ff2 <UART_SetConfig+0x3ca>
 8002daa:	231b      	movs	r3, #27
 8002dac:	2220      	movs	r2, #32
 8002dae:	4694      	mov	ip, r2
 8002db0:	44bc      	add	ip, r7
 8002db2:	4463      	add	r3, ip
 8002db4:	2208      	movs	r2, #8
 8002db6:	701a      	strb	r2, [r3, #0]
 8002db8:	e11b      	b.n	8002ff2 <UART_SetConfig+0x3ca>
 8002dba:	231b      	movs	r3, #27
 8002dbc:	2220      	movs	r2, #32
 8002dbe:	4694      	mov	ip, r2
 8002dc0:	44bc      	add	ip, r7
 8002dc2:	4463      	add	r3, ip
 8002dc4:	2210      	movs	r2, #16
 8002dc6:	701a      	strb	r2, [r3, #0]
 8002dc8:	e113      	b.n	8002ff2 <UART_SetConfig+0x3ca>
 8002dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a6d      	ldr	r2, [pc, #436]	; (8002f84 <UART_SetConfig+0x35c>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d136      	bne.n	8002e42 <UART_SetConfig+0x21a>
 8002dd4:	4b69      	ldr	r3, [pc, #420]	; (8002f7c <UART_SetConfig+0x354>)
 8002dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dd8:	2230      	movs	r2, #48	; 0x30
 8002dda:	4013      	ands	r3, r2
 8002ddc:	2b30      	cmp	r3, #48	; 0x30
 8002dde:	d020      	beq.n	8002e22 <UART_SetConfig+0x1fa>
 8002de0:	d827      	bhi.n	8002e32 <UART_SetConfig+0x20a>
 8002de2:	2b20      	cmp	r3, #32
 8002de4:	d00d      	beq.n	8002e02 <UART_SetConfig+0x1da>
 8002de6:	d824      	bhi.n	8002e32 <UART_SetConfig+0x20a>
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d002      	beq.n	8002df2 <UART_SetConfig+0x1ca>
 8002dec:	2b10      	cmp	r3, #16
 8002dee:	d010      	beq.n	8002e12 <UART_SetConfig+0x1ea>
 8002df0:	e01f      	b.n	8002e32 <UART_SetConfig+0x20a>
 8002df2:	231b      	movs	r3, #27
 8002df4:	2220      	movs	r2, #32
 8002df6:	4694      	mov	ip, r2
 8002df8:	44bc      	add	ip, r7
 8002dfa:	4463      	add	r3, ip
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	701a      	strb	r2, [r3, #0]
 8002e00:	e0f7      	b.n	8002ff2 <UART_SetConfig+0x3ca>
 8002e02:	231b      	movs	r3, #27
 8002e04:	2220      	movs	r2, #32
 8002e06:	4694      	mov	ip, r2
 8002e08:	44bc      	add	ip, r7
 8002e0a:	4463      	add	r3, ip
 8002e0c:	2202      	movs	r2, #2
 8002e0e:	701a      	strb	r2, [r3, #0]
 8002e10:	e0ef      	b.n	8002ff2 <UART_SetConfig+0x3ca>
 8002e12:	231b      	movs	r3, #27
 8002e14:	2220      	movs	r2, #32
 8002e16:	4694      	mov	ip, r2
 8002e18:	44bc      	add	ip, r7
 8002e1a:	4463      	add	r3, ip
 8002e1c:	2204      	movs	r2, #4
 8002e1e:	701a      	strb	r2, [r3, #0]
 8002e20:	e0e7      	b.n	8002ff2 <UART_SetConfig+0x3ca>
 8002e22:	231b      	movs	r3, #27
 8002e24:	2220      	movs	r2, #32
 8002e26:	4694      	mov	ip, r2
 8002e28:	44bc      	add	ip, r7
 8002e2a:	4463      	add	r3, ip
 8002e2c:	2208      	movs	r2, #8
 8002e2e:	701a      	strb	r2, [r3, #0]
 8002e30:	e0df      	b.n	8002ff2 <UART_SetConfig+0x3ca>
 8002e32:	231b      	movs	r3, #27
 8002e34:	2220      	movs	r2, #32
 8002e36:	4694      	mov	ip, r2
 8002e38:	44bc      	add	ip, r7
 8002e3a:	4463      	add	r3, ip
 8002e3c:	2210      	movs	r2, #16
 8002e3e:	701a      	strb	r2, [r3, #0]
 8002e40:	e0d7      	b.n	8002ff2 <UART_SetConfig+0x3ca>
 8002e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a50      	ldr	r2, [pc, #320]	; (8002f88 <UART_SetConfig+0x360>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d107      	bne.n	8002e5c <UART_SetConfig+0x234>
 8002e4c:	231b      	movs	r3, #27
 8002e4e:	2220      	movs	r2, #32
 8002e50:	4694      	mov	ip, r2
 8002e52:	44bc      	add	ip, r7
 8002e54:	4463      	add	r3, ip
 8002e56:	2200      	movs	r2, #0
 8002e58:	701a      	strb	r2, [r3, #0]
 8002e5a:	e0ca      	b.n	8002ff2 <UART_SetConfig+0x3ca>
 8002e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a4a      	ldr	r2, [pc, #296]	; (8002f8c <UART_SetConfig+0x364>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d107      	bne.n	8002e76 <UART_SetConfig+0x24e>
 8002e66:	231b      	movs	r3, #27
 8002e68:	2220      	movs	r2, #32
 8002e6a:	4694      	mov	ip, r2
 8002e6c:	44bc      	add	ip, r7
 8002e6e:	4463      	add	r3, ip
 8002e70:	2200      	movs	r2, #0
 8002e72:	701a      	strb	r2, [r3, #0]
 8002e74:	e0bd      	b.n	8002ff2 <UART_SetConfig+0x3ca>
 8002e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a45      	ldr	r2, [pc, #276]	; (8002f90 <UART_SetConfig+0x368>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d107      	bne.n	8002e90 <UART_SetConfig+0x268>
 8002e80:	231b      	movs	r3, #27
 8002e82:	2220      	movs	r2, #32
 8002e84:	4694      	mov	ip, r2
 8002e86:	44bc      	add	ip, r7
 8002e88:	4463      	add	r3, ip
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	701a      	strb	r2, [r3, #0]
 8002e8e:	e0b0      	b.n	8002ff2 <UART_SetConfig+0x3ca>
 8002e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a35      	ldr	r2, [pc, #212]	; (8002f6c <UART_SetConfig+0x344>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d143      	bne.n	8002f22 <UART_SetConfig+0x2fa>
 8002e9a:	4b38      	ldr	r3, [pc, #224]	; (8002f7c <UART_SetConfig+0x354>)
 8002e9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002e9e:	23c0      	movs	r3, #192	; 0xc0
 8002ea0:	011b      	lsls	r3, r3, #4
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	22c0      	movs	r2, #192	; 0xc0
 8002ea6:	0112      	lsls	r2, r2, #4
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d02a      	beq.n	8002f02 <UART_SetConfig+0x2da>
 8002eac:	22c0      	movs	r2, #192	; 0xc0
 8002eae:	0112      	lsls	r2, r2, #4
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d82e      	bhi.n	8002f12 <UART_SetConfig+0x2ea>
 8002eb4:	2280      	movs	r2, #128	; 0x80
 8002eb6:	0112      	lsls	r2, r2, #4
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d012      	beq.n	8002ee2 <UART_SetConfig+0x2ba>
 8002ebc:	2280      	movs	r2, #128	; 0x80
 8002ebe:	0112      	lsls	r2, r2, #4
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d826      	bhi.n	8002f12 <UART_SetConfig+0x2ea>
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d004      	beq.n	8002ed2 <UART_SetConfig+0x2aa>
 8002ec8:	2280      	movs	r2, #128	; 0x80
 8002eca:	00d2      	lsls	r2, r2, #3
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d010      	beq.n	8002ef2 <UART_SetConfig+0x2ca>
 8002ed0:	e01f      	b.n	8002f12 <UART_SetConfig+0x2ea>
 8002ed2:	231b      	movs	r3, #27
 8002ed4:	2220      	movs	r2, #32
 8002ed6:	4694      	mov	ip, r2
 8002ed8:	44bc      	add	ip, r7
 8002eda:	4463      	add	r3, ip
 8002edc:	2200      	movs	r2, #0
 8002ede:	701a      	strb	r2, [r3, #0]
 8002ee0:	e087      	b.n	8002ff2 <UART_SetConfig+0x3ca>
 8002ee2:	231b      	movs	r3, #27
 8002ee4:	2220      	movs	r2, #32
 8002ee6:	4694      	mov	ip, r2
 8002ee8:	44bc      	add	ip, r7
 8002eea:	4463      	add	r3, ip
 8002eec:	2202      	movs	r2, #2
 8002eee:	701a      	strb	r2, [r3, #0]
 8002ef0:	e07f      	b.n	8002ff2 <UART_SetConfig+0x3ca>
 8002ef2:	231b      	movs	r3, #27
 8002ef4:	2220      	movs	r2, #32
 8002ef6:	4694      	mov	ip, r2
 8002ef8:	44bc      	add	ip, r7
 8002efa:	4463      	add	r3, ip
 8002efc:	2204      	movs	r2, #4
 8002efe:	701a      	strb	r2, [r3, #0]
 8002f00:	e077      	b.n	8002ff2 <UART_SetConfig+0x3ca>
 8002f02:	231b      	movs	r3, #27
 8002f04:	2220      	movs	r2, #32
 8002f06:	4694      	mov	ip, r2
 8002f08:	44bc      	add	ip, r7
 8002f0a:	4463      	add	r3, ip
 8002f0c:	2208      	movs	r2, #8
 8002f0e:	701a      	strb	r2, [r3, #0]
 8002f10:	e06f      	b.n	8002ff2 <UART_SetConfig+0x3ca>
 8002f12:	231b      	movs	r3, #27
 8002f14:	2220      	movs	r2, #32
 8002f16:	4694      	mov	ip, r2
 8002f18:	44bc      	add	ip, r7
 8002f1a:	4463      	add	r3, ip
 8002f1c:	2210      	movs	r2, #16
 8002f1e:	701a      	strb	r2, [r3, #0]
 8002f20:	e067      	b.n	8002ff2 <UART_SetConfig+0x3ca>
 8002f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a12      	ldr	r2, [pc, #72]	; (8002f70 <UART_SetConfig+0x348>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d15b      	bne.n	8002fe4 <UART_SetConfig+0x3bc>
 8002f2c:	4b13      	ldr	r3, [pc, #76]	; (8002f7c <UART_SetConfig+0x354>)
 8002f2e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002f30:	23c0      	movs	r3, #192	; 0xc0
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	4013      	ands	r3, r2
 8002f36:	22c0      	movs	r2, #192	; 0xc0
 8002f38:	0092      	lsls	r2, r2, #2
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d042      	beq.n	8002fc4 <UART_SetConfig+0x39c>
 8002f3e:	22c0      	movs	r2, #192	; 0xc0
 8002f40:	0092      	lsls	r2, r2, #2
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d846      	bhi.n	8002fd4 <UART_SetConfig+0x3ac>
 8002f46:	2280      	movs	r2, #128	; 0x80
 8002f48:	0092      	lsls	r2, r2, #2
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d02a      	beq.n	8002fa4 <UART_SetConfig+0x37c>
 8002f4e:	2280      	movs	r2, #128	; 0x80
 8002f50:	0092      	lsls	r2, r2, #2
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d83e      	bhi.n	8002fd4 <UART_SetConfig+0x3ac>
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d01c      	beq.n	8002f94 <UART_SetConfig+0x36c>
 8002f5a:	2280      	movs	r2, #128	; 0x80
 8002f5c:	0052      	lsls	r2, r2, #1
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d028      	beq.n	8002fb4 <UART_SetConfig+0x38c>
 8002f62:	e037      	b.n	8002fd4 <UART_SetConfig+0x3ac>
 8002f64:	cfff69f3 	.word	0xcfff69f3
 8002f68:	ffffcfff 	.word	0xffffcfff
 8002f6c:	40008000 	.word	0x40008000
 8002f70:	40008400 	.word	0x40008400
 8002f74:	11fff4ff 	.word	0x11fff4ff
 8002f78:	40013800 	.word	0x40013800
 8002f7c:	40021000 	.word	0x40021000
 8002f80:	40004400 	.word	0x40004400
 8002f84:	40004800 	.word	0x40004800
 8002f88:	40004c00 	.word	0x40004c00
 8002f8c:	40005000 	.word	0x40005000
 8002f90:	40013c00 	.word	0x40013c00
 8002f94:	231b      	movs	r3, #27
 8002f96:	2220      	movs	r2, #32
 8002f98:	4694      	mov	ip, r2
 8002f9a:	44bc      	add	ip, r7
 8002f9c:	4463      	add	r3, ip
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	701a      	strb	r2, [r3, #0]
 8002fa2:	e026      	b.n	8002ff2 <UART_SetConfig+0x3ca>
 8002fa4:	231b      	movs	r3, #27
 8002fa6:	2220      	movs	r2, #32
 8002fa8:	4694      	mov	ip, r2
 8002faa:	44bc      	add	ip, r7
 8002fac:	4463      	add	r3, ip
 8002fae:	2202      	movs	r2, #2
 8002fb0:	701a      	strb	r2, [r3, #0]
 8002fb2:	e01e      	b.n	8002ff2 <UART_SetConfig+0x3ca>
 8002fb4:	231b      	movs	r3, #27
 8002fb6:	2220      	movs	r2, #32
 8002fb8:	4694      	mov	ip, r2
 8002fba:	44bc      	add	ip, r7
 8002fbc:	4463      	add	r3, ip
 8002fbe:	2204      	movs	r2, #4
 8002fc0:	701a      	strb	r2, [r3, #0]
 8002fc2:	e016      	b.n	8002ff2 <UART_SetConfig+0x3ca>
 8002fc4:	231b      	movs	r3, #27
 8002fc6:	2220      	movs	r2, #32
 8002fc8:	4694      	mov	ip, r2
 8002fca:	44bc      	add	ip, r7
 8002fcc:	4463      	add	r3, ip
 8002fce:	2208      	movs	r2, #8
 8002fd0:	701a      	strb	r2, [r3, #0]
 8002fd2:	e00e      	b.n	8002ff2 <UART_SetConfig+0x3ca>
 8002fd4:	231b      	movs	r3, #27
 8002fd6:	2220      	movs	r2, #32
 8002fd8:	4694      	mov	ip, r2
 8002fda:	44bc      	add	ip, r7
 8002fdc:	4463      	add	r3, ip
 8002fde:	2210      	movs	r2, #16
 8002fe0:	701a      	strb	r2, [r3, #0]
 8002fe2:	e006      	b.n	8002ff2 <UART_SetConfig+0x3ca>
 8002fe4:	231b      	movs	r3, #27
 8002fe6:	2220      	movs	r2, #32
 8002fe8:	4694      	mov	ip, r2
 8002fea:	44bc      	add	ip, r7
 8002fec:	4463      	add	r3, ip
 8002fee:	2210      	movs	r2, #16
 8002ff0:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4ab8      	ldr	r2, [pc, #736]	; (80032d8 <UART_SetConfig+0x6b0>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d005      	beq.n	8003008 <UART_SetConfig+0x3e0>
 8002ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4ab6      	ldr	r2, [pc, #728]	; (80032dc <UART_SetConfig+0x6b4>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d000      	beq.n	8003008 <UART_SetConfig+0x3e0>
 8003006:	e097      	b.n	8003138 <UART_SetConfig+0x510>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003008:	231b      	movs	r3, #27
 800300a:	2220      	movs	r2, #32
 800300c:	4694      	mov	ip, r2
 800300e:	44bc      	add	ip, r7
 8003010:	4463      	add	r3, ip
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	2b08      	cmp	r3, #8
 8003016:	d015      	beq.n	8003044 <UART_SetConfig+0x41c>
 8003018:	dc18      	bgt.n	800304c <UART_SetConfig+0x424>
 800301a:	2b04      	cmp	r3, #4
 800301c:	d00d      	beq.n	800303a <UART_SetConfig+0x412>
 800301e:	dc15      	bgt.n	800304c <UART_SetConfig+0x424>
 8003020:	2b00      	cmp	r3, #0
 8003022:	d002      	beq.n	800302a <UART_SetConfig+0x402>
 8003024:	2b02      	cmp	r3, #2
 8003026:	d005      	beq.n	8003034 <UART_SetConfig+0x40c>
 8003028:	e010      	b.n	800304c <UART_SetConfig+0x424>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800302a:	f7fe fe47 	bl	8001cbc <HAL_RCC_GetPCLK1Freq>
 800302e:	0003      	movs	r3, r0
 8003030:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003032:	e015      	b.n	8003060 <UART_SetConfig+0x438>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003034:	4baa      	ldr	r3, [pc, #680]	; (80032e0 <UART_SetConfig+0x6b8>)
 8003036:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003038:	e012      	b.n	8003060 <UART_SetConfig+0x438>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800303a:	f7fe fdb3 	bl	8001ba4 <HAL_RCC_GetSysClockFreq>
 800303e:	0003      	movs	r3, r0
 8003040:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003042:	e00d      	b.n	8003060 <UART_SetConfig+0x438>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003044:	2380      	movs	r3, #128	; 0x80
 8003046:	021b      	lsls	r3, r3, #8
 8003048:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800304a:	e009      	b.n	8003060 <UART_SetConfig+0x438>
      default:
        pclk = 0U;
 800304c:	2300      	movs	r3, #0
 800304e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003050:	231a      	movs	r3, #26
 8003052:	2220      	movs	r2, #32
 8003054:	4694      	mov	ip, r2
 8003056:	44bc      	add	ip, r7
 8003058:	4463      	add	r3, ip
 800305a:	2201      	movs	r2, #1
 800305c:	701a      	strb	r2, [r3, #0]
        break;
 800305e:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003062:	2b00      	cmp	r3, #0
 8003064:	d100      	bne.n	8003068 <UART_SetConfig+0x440>
 8003066:	e146      	b.n	80032f6 <UART_SetConfig+0x6ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800306c:	4b9d      	ldr	r3, [pc, #628]	; (80032e4 <UART_SetConfig+0x6bc>)
 800306e:	0052      	lsls	r2, r2, #1
 8003070:	5ad3      	ldrh	r3, [r2, r3]
 8003072:	0019      	movs	r1, r3
 8003074:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003076:	f7fd f845 	bl	8000104 <__udivsi3>
 800307a:	0003      	movs	r3, r0
 800307c:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800307e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003080:	685a      	ldr	r2, [r3, #4]
 8003082:	0013      	movs	r3, r2
 8003084:	005b      	lsls	r3, r3, #1
 8003086:	189b      	adds	r3, r3, r2
 8003088:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800308a:	429a      	cmp	r2, r3
 800308c:	d305      	bcc.n	800309a <UART_SetConfig+0x472>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800308e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003094:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003096:	429a      	cmp	r2, r3
 8003098:	d907      	bls.n	80030aa <UART_SetConfig+0x482>
      {
        ret = HAL_ERROR;
 800309a:	231a      	movs	r3, #26
 800309c:	2220      	movs	r2, #32
 800309e:	4694      	mov	ip, r2
 80030a0:	44bc      	add	ip, r7
 80030a2:	4463      	add	r3, ip
 80030a4:	2201      	movs	r2, #1
 80030a6:	701a      	strb	r2, [r3, #0]
 80030a8:	e045      	b.n	8003136 <UART_SetConfig+0x50e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80030aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ac:	61bb      	str	r3, [r7, #24]
 80030ae:	2300      	movs	r3, #0
 80030b0:	61fb      	str	r3, [r7, #28]
 80030b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030b6:	4b8b      	ldr	r3, [pc, #556]	; (80032e4 <UART_SetConfig+0x6bc>)
 80030b8:	0052      	lsls	r2, r2, #1
 80030ba:	5ad3      	ldrh	r3, [r2, r3]
 80030bc:	613b      	str	r3, [r7, #16]
 80030be:	2300      	movs	r3, #0
 80030c0:	617b      	str	r3, [r7, #20]
 80030c2:	693a      	ldr	r2, [r7, #16]
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	69b8      	ldr	r0, [r7, #24]
 80030c8:	69f9      	ldr	r1, [r7, #28]
 80030ca:	f7fd f991 	bl	80003f0 <__aeabi_uldivmod>
 80030ce:	0002      	movs	r2, r0
 80030d0:	000b      	movs	r3, r1
 80030d2:	0e11      	lsrs	r1, r2, #24
 80030d4:	021d      	lsls	r5, r3, #8
 80030d6:	430d      	orrs	r5, r1
 80030d8:	0214      	lsls	r4, r2, #8
 80030da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	085b      	lsrs	r3, r3, #1
 80030e0:	60bb      	str	r3, [r7, #8]
 80030e2:	2300      	movs	r3, #0
 80030e4:	60fb      	str	r3, [r7, #12]
 80030e6:	68b8      	ldr	r0, [r7, #8]
 80030e8:	68f9      	ldr	r1, [r7, #12]
 80030ea:	1900      	adds	r0, r0, r4
 80030ec:	4169      	adcs	r1, r5
 80030ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	603b      	str	r3, [r7, #0]
 80030f4:	2300      	movs	r3, #0
 80030f6:	607b      	str	r3, [r7, #4]
 80030f8:	683a      	ldr	r2, [r7, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f7fd f978 	bl	80003f0 <__aeabi_uldivmod>
 8003100:	0002      	movs	r2, r0
 8003102:	000b      	movs	r3, r1
 8003104:	0013      	movs	r3, r2
 8003106:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003108:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800310a:	23c0      	movs	r3, #192	; 0xc0
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	429a      	cmp	r2, r3
 8003110:	d309      	bcc.n	8003126 <UART_SetConfig+0x4fe>
 8003112:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003114:	2380      	movs	r3, #128	; 0x80
 8003116:	035b      	lsls	r3, r3, #13
 8003118:	429a      	cmp	r2, r3
 800311a:	d204      	bcs.n	8003126 <UART_SetConfig+0x4fe>
        {
          huart->Instance->BRR = usartdiv;
 800311c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003122:	60da      	str	r2, [r3, #12]
 8003124:	e007      	b.n	8003136 <UART_SetConfig+0x50e>
        }
        else
        {
          ret = HAL_ERROR;
 8003126:	231a      	movs	r3, #26
 8003128:	2220      	movs	r2, #32
 800312a:	4694      	mov	ip, r2
 800312c:	44bc      	add	ip, r7
 800312e:	4463      	add	r3, ip
 8003130:	2201      	movs	r2, #1
 8003132:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8003134:	e0df      	b.n	80032f6 <UART_SetConfig+0x6ce>
 8003136:	e0de      	b.n	80032f6 <UART_SetConfig+0x6ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313a:	69da      	ldr	r2, [r3, #28]
 800313c:	2380      	movs	r3, #128	; 0x80
 800313e:	021b      	lsls	r3, r3, #8
 8003140:	429a      	cmp	r2, r3
 8003142:	d000      	beq.n	8003146 <UART_SetConfig+0x51e>
 8003144:	e074      	b.n	8003230 <UART_SetConfig+0x608>
  {
    switch (clocksource)
 8003146:	231b      	movs	r3, #27
 8003148:	2220      	movs	r2, #32
 800314a:	4694      	mov	ip, r2
 800314c:	44bc      	add	ip, r7
 800314e:	4463      	add	r3, ip
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	2b08      	cmp	r3, #8
 8003154:	d015      	beq.n	8003182 <UART_SetConfig+0x55a>
 8003156:	dc18      	bgt.n	800318a <UART_SetConfig+0x562>
 8003158:	2b04      	cmp	r3, #4
 800315a:	d00d      	beq.n	8003178 <UART_SetConfig+0x550>
 800315c:	dc15      	bgt.n	800318a <UART_SetConfig+0x562>
 800315e:	2b00      	cmp	r3, #0
 8003160:	d002      	beq.n	8003168 <UART_SetConfig+0x540>
 8003162:	2b02      	cmp	r3, #2
 8003164:	d005      	beq.n	8003172 <UART_SetConfig+0x54a>
 8003166:	e010      	b.n	800318a <UART_SetConfig+0x562>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003168:	f7fe fda8 	bl	8001cbc <HAL_RCC_GetPCLK1Freq>
 800316c:	0003      	movs	r3, r0
 800316e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003170:	e015      	b.n	800319e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003172:	4b5b      	ldr	r3, [pc, #364]	; (80032e0 <UART_SetConfig+0x6b8>)
 8003174:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003176:	e012      	b.n	800319e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003178:	f7fe fd14 	bl	8001ba4 <HAL_RCC_GetSysClockFreq>
 800317c:	0003      	movs	r3, r0
 800317e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003180:	e00d      	b.n	800319e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003182:	2380      	movs	r3, #128	; 0x80
 8003184:	021b      	lsls	r3, r3, #8
 8003186:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003188:	e009      	b.n	800319e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800318a:	2300      	movs	r3, #0
 800318c:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800318e:	231a      	movs	r3, #26
 8003190:	2220      	movs	r2, #32
 8003192:	4694      	mov	ip, r2
 8003194:	44bc      	add	ip, r7
 8003196:	4463      	add	r3, ip
 8003198:	2201      	movs	r2, #1
 800319a:	701a      	strb	r2, [r3, #0]
        break;
 800319c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800319e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d100      	bne.n	80031a6 <UART_SetConfig+0x57e>
 80031a4:	e0a7      	b.n	80032f6 <UART_SetConfig+0x6ce>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80031a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031aa:	4b4e      	ldr	r3, [pc, #312]	; (80032e4 <UART_SetConfig+0x6bc>)
 80031ac:	0052      	lsls	r2, r2, #1
 80031ae:	5ad3      	ldrh	r3, [r2, r3]
 80031b0:	0019      	movs	r1, r3
 80031b2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80031b4:	f7fc ffa6 	bl	8000104 <__udivsi3>
 80031b8:	0003      	movs	r3, r0
 80031ba:	005a      	lsls	r2, r3, #1
 80031bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	085b      	lsrs	r3, r3, #1
 80031c2:	18d2      	adds	r2, r2, r3
 80031c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	0019      	movs	r1, r3
 80031ca:	0010      	movs	r0, r2
 80031cc:	f7fc ff9a 	bl	8000104 <__udivsi3>
 80031d0:	0003      	movs	r3, r0
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d8:	2b0f      	cmp	r3, #15
 80031da:	d921      	bls.n	8003220 <UART_SetConfig+0x5f8>
 80031dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031de:	2380      	movs	r3, #128	; 0x80
 80031e0:	025b      	lsls	r3, r3, #9
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d21c      	bcs.n	8003220 <UART_SetConfig+0x5f8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e8:	b29a      	uxth	r2, r3
 80031ea:	200e      	movs	r0, #14
 80031ec:	2420      	movs	r4, #32
 80031ee:	193b      	adds	r3, r7, r4
 80031f0:	181b      	adds	r3, r3, r0
 80031f2:	210f      	movs	r1, #15
 80031f4:	438a      	bics	r2, r1
 80031f6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031fa:	085b      	lsrs	r3, r3, #1
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	2207      	movs	r2, #7
 8003200:	4013      	ands	r3, r2
 8003202:	b299      	uxth	r1, r3
 8003204:	193b      	adds	r3, r7, r4
 8003206:	181b      	adds	r3, r3, r0
 8003208:	193a      	adds	r2, r7, r4
 800320a:	1812      	adds	r2, r2, r0
 800320c:	8812      	ldrh	r2, [r2, #0]
 800320e:	430a      	orrs	r2, r1
 8003210:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	193a      	adds	r2, r7, r4
 8003218:	1812      	adds	r2, r2, r0
 800321a:	8812      	ldrh	r2, [r2, #0]
 800321c:	60da      	str	r2, [r3, #12]
 800321e:	e06a      	b.n	80032f6 <UART_SetConfig+0x6ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003220:	231a      	movs	r3, #26
 8003222:	2220      	movs	r2, #32
 8003224:	4694      	mov	ip, r2
 8003226:	44bc      	add	ip, r7
 8003228:	4463      	add	r3, ip
 800322a:	2201      	movs	r2, #1
 800322c:	701a      	strb	r2, [r3, #0]
 800322e:	e062      	b.n	80032f6 <UART_SetConfig+0x6ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003230:	231b      	movs	r3, #27
 8003232:	2220      	movs	r2, #32
 8003234:	4694      	mov	ip, r2
 8003236:	44bc      	add	ip, r7
 8003238:	4463      	add	r3, ip
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	2b08      	cmp	r3, #8
 800323e:	d015      	beq.n	800326c <UART_SetConfig+0x644>
 8003240:	dc18      	bgt.n	8003274 <UART_SetConfig+0x64c>
 8003242:	2b04      	cmp	r3, #4
 8003244:	d00d      	beq.n	8003262 <UART_SetConfig+0x63a>
 8003246:	dc15      	bgt.n	8003274 <UART_SetConfig+0x64c>
 8003248:	2b00      	cmp	r3, #0
 800324a:	d002      	beq.n	8003252 <UART_SetConfig+0x62a>
 800324c:	2b02      	cmp	r3, #2
 800324e:	d005      	beq.n	800325c <UART_SetConfig+0x634>
 8003250:	e010      	b.n	8003274 <UART_SetConfig+0x64c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003252:	f7fe fd33 	bl	8001cbc <HAL_RCC_GetPCLK1Freq>
 8003256:	0003      	movs	r3, r0
 8003258:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800325a:	e015      	b.n	8003288 <UART_SetConfig+0x660>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800325c:	4b20      	ldr	r3, [pc, #128]	; (80032e0 <UART_SetConfig+0x6b8>)
 800325e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003260:	e012      	b.n	8003288 <UART_SetConfig+0x660>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003262:	f7fe fc9f 	bl	8001ba4 <HAL_RCC_GetSysClockFreq>
 8003266:	0003      	movs	r3, r0
 8003268:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800326a:	e00d      	b.n	8003288 <UART_SetConfig+0x660>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800326c:	2380      	movs	r3, #128	; 0x80
 800326e:	021b      	lsls	r3, r3, #8
 8003270:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003272:	e009      	b.n	8003288 <UART_SetConfig+0x660>
      default:
        pclk = 0U;
 8003274:	2300      	movs	r3, #0
 8003276:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003278:	231a      	movs	r3, #26
 800327a:	2220      	movs	r2, #32
 800327c:	4694      	mov	ip, r2
 800327e:	44bc      	add	ip, r7
 8003280:	4463      	add	r3, ip
 8003282:	2201      	movs	r2, #1
 8003284:	701a      	strb	r2, [r3, #0]
        break;
 8003286:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800328a:	2b00      	cmp	r3, #0
 800328c:	d033      	beq.n	80032f6 <UART_SetConfig+0x6ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800328e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003290:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003292:	4b14      	ldr	r3, [pc, #80]	; (80032e4 <UART_SetConfig+0x6bc>)
 8003294:	0052      	lsls	r2, r2, #1
 8003296:	5ad3      	ldrh	r3, [r2, r3]
 8003298:	0019      	movs	r1, r3
 800329a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800329c:	f7fc ff32 	bl	8000104 <__udivsi3>
 80032a0:	0003      	movs	r3, r0
 80032a2:	001a      	movs	r2, r3
 80032a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	085b      	lsrs	r3, r3, #1
 80032aa:	18d2      	adds	r2, r2, r3
 80032ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	0019      	movs	r1, r3
 80032b2:	0010      	movs	r0, r2
 80032b4:	f7fc ff26 	bl	8000104 <__udivsi3>
 80032b8:	0003      	movs	r3, r0
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c0:	2b0f      	cmp	r3, #15
 80032c2:	d911      	bls.n	80032e8 <UART_SetConfig+0x6c0>
 80032c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032c6:	2380      	movs	r3, #128	; 0x80
 80032c8:	025b      	lsls	r3, r3, #9
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d20c      	bcs.n	80032e8 <UART_SetConfig+0x6c0>
      {
        huart->Instance->BRR = usartdiv;
 80032ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032d4:	60da      	str	r2, [r3, #12]
 80032d6:	e00e      	b.n	80032f6 <UART_SetConfig+0x6ce>
 80032d8:	40008000 	.word	0x40008000
 80032dc:	40008400 	.word	0x40008400
 80032e0:	00f42400 	.word	0x00f42400
 80032e4:	08004944 	.word	0x08004944
      }
      else
      {
        ret = HAL_ERROR;
 80032e8:	231a      	movs	r3, #26
 80032ea:	2220      	movs	r2, #32
 80032ec:	4694      	mov	ip, r2
 80032ee:	44bc      	add	ip, r7
 80032f0:	4463      	add	r3, ip
 80032f2:	2201      	movs	r2, #1
 80032f4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80032f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f8:	226a      	movs	r2, #106	; 0x6a
 80032fa:	2101      	movs	r1, #1
 80032fc:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80032fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003300:	2268      	movs	r2, #104	; 0x68
 8003302:	2101      	movs	r1, #1
 8003304:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003308:	2200      	movs	r2, #0
 800330a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800330c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330e:	2200      	movs	r2, #0
 8003310:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003312:	231a      	movs	r3, #26
 8003314:	2220      	movs	r2, #32
 8003316:	4694      	mov	ip, r2
 8003318:	44bc      	add	ip, r7
 800331a:	4463      	add	r3, ip
 800331c:	781b      	ldrb	r3, [r3, #0]
}
 800331e:	0018      	movs	r0, r3
 8003320:	46bd      	mov	sp, r7
 8003322:	b010      	add	sp, #64	; 0x40
 8003324:	bdb0      	pop	{r4, r5, r7, pc}
 8003326:	46c0      	nop			; (mov r8, r8)

08003328 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003334:	2201      	movs	r2, #1
 8003336:	4013      	ands	r3, r2
 8003338:	d00b      	beq.n	8003352 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	4a4a      	ldr	r2, [pc, #296]	; (800346c <UART_AdvFeatureConfig+0x144>)
 8003342:	4013      	ands	r3, r2
 8003344:	0019      	movs	r1, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	430a      	orrs	r2, r1
 8003350:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003356:	2202      	movs	r2, #2
 8003358:	4013      	ands	r3, r2
 800335a:	d00b      	beq.n	8003374 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	4a43      	ldr	r2, [pc, #268]	; (8003470 <UART_AdvFeatureConfig+0x148>)
 8003364:	4013      	ands	r3, r2
 8003366:	0019      	movs	r1, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	430a      	orrs	r2, r1
 8003372:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003378:	2204      	movs	r2, #4
 800337a:	4013      	ands	r3, r2
 800337c:	d00b      	beq.n	8003396 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	4a3b      	ldr	r2, [pc, #236]	; (8003474 <UART_AdvFeatureConfig+0x14c>)
 8003386:	4013      	ands	r3, r2
 8003388:	0019      	movs	r1, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	430a      	orrs	r2, r1
 8003394:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339a:	2208      	movs	r2, #8
 800339c:	4013      	ands	r3, r2
 800339e:	d00b      	beq.n	80033b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	4a34      	ldr	r2, [pc, #208]	; (8003478 <UART_AdvFeatureConfig+0x150>)
 80033a8:	4013      	ands	r3, r2
 80033aa:	0019      	movs	r1, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	430a      	orrs	r2, r1
 80033b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033bc:	2210      	movs	r2, #16
 80033be:	4013      	ands	r3, r2
 80033c0:	d00b      	beq.n	80033da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	4a2c      	ldr	r2, [pc, #176]	; (800347c <UART_AdvFeatureConfig+0x154>)
 80033ca:	4013      	ands	r3, r2
 80033cc:	0019      	movs	r1, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033de:	2220      	movs	r2, #32
 80033e0:	4013      	ands	r3, r2
 80033e2:	d00b      	beq.n	80033fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	4a25      	ldr	r2, [pc, #148]	; (8003480 <UART_AdvFeatureConfig+0x158>)
 80033ec:	4013      	ands	r3, r2
 80033ee:	0019      	movs	r1, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	430a      	orrs	r2, r1
 80033fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003400:	2240      	movs	r2, #64	; 0x40
 8003402:	4013      	ands	r3, r2
 8003404:	d01d      	beq.n	8003442 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	4a1d      	ldr	r2, [pc, #116]	; (8003484 <UART_AdvFeatureConfig+0x15c>)
 800340e:	4013      	ands	r3, r2
 8003410:	0019      	movs	r1, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	430a      	orrs	r2, r1
 800341c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003422:	2380      	movs	r3, #128	; 0x80
 8003424:	035b      	lsls	r3, r3, #13
 8003426:	429a      	cmp	r2, r3
 8003428:	d10b      	bne.n	8003442 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	4a15      	ldr	r2, [pc, #84]	; (8003488 <UART_AdvFeatureConfig+0x160>)
 8003432:	4013      	ands	r3, r2
 8003434:	0019      	movs	r1, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	430a      	orrs	r2, r1
 8003440:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003446:	2280      	movs	r2, #128	; 0x80
 8003448:	4013      	ands	r3, r2
 800344a:	d00b      	beq.n	8003464 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	4a0e      	ldr	r2, [pc, #56]	; (800348c <UART_AdvFeatureConfig+0x164>)
 8003454:	4013      	ands	r3, r2
 8003456:	0019      	movs	r1, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	430a      	orrs	r2, r1
 8003462:	605a      	str	r2, [r3, #4]
  }
}
 8003464:	46c0      	nop			; (mov r8, r8)
 8003466:	46bd      	mov	sp, r7
 8003468:	b002      	add	sp, #8
 800346a:	bd80      	pop	{r7, pc}
 800346c:	fffdffff 	.word	0xfffdffff
 8003470:	fffeffff 	.word	0xfffeffff
 8003474:	fffbffff 	.word	0xfffbffff
 8003478:	ffff7fff 	.word	0xffff7fff
 800347c:	ffffefff 	.word	0xffffefff
 8003480:	ffffdfff 	.word	0xffffdfff
 8003484:	ffefffff 	.word	0xffefffff
 8003488:	ff9fffff 	.word	0xff9fffff
 800348c:	fff7ffff 	.word	0xfff7ffff

08003490 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b086      	sub	sp, #24
 8003494:	af02      	add	r7, sp, #8
 8003496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	228c      	movs	r2, #140	; 0x8c
 800349c:	2100      	movs	r1, #0
 800349e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80034a0:	f7fd fb5c 	bl	8000b5c <HAL_GetTick>
 80034a4:	0003      	movs	r3, r0
 80034a6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2208      	movs	r2, #8
 80034b0:	4013      	ands	r3, r2
 80034b2:	2b08      	cmp	r3, #8
 80034b4:	d10c      	bne.n	80034d0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2280      	movs	r2, #128	; 0x80
 80034ba:	0391      	lsls	r1, r2, #14
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	4a18      	ldr	r2, [pc, #96]	; (8003520 <UART_CheckIdleState+0x90>)
 80034c0:	9200      	str	r2, [sp, #0]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f000 f82e 	bl	8003524 <UART_WaitOnFlagUntilTimeout>
 80034c8:	1e03      	subs	r3, r0, #0
 80034ca:	d001      	beq.n	80034d0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e023      	b.n	8003518 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2204      	movs	r2, #4
 80034d8:	4013      	ands	r3, r2
 80034da:	2b04      	cmp	r3, #4
 80034dc:	d10c      	bne.n	80034f8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2280      	movs	r2, #128	; 0x80
 80034e2:	03d1      	lsls	r1, r2, #15
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	4a0e      	ldr	r2, [pc, #56]	; (8003520 <UART_CheckIdleState+0x90>)
 80034e8:	9200      	str	r2, [sp, #0]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f000 f81a 	bl	8003524 <UART_WaitOnFlagUntilTimeout>
 80034f0:	1e03      	subs	r3, r0, #0
 80034f2:	d001      	beq.n	80034f8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e00f      	b.n	8003518 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2284      	movs	r2, #132	; 0x84
 80034fc:	2120      	movs	r1, #32
 80034fe:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2288      	movs	r2, #136	; 0x88
 8003504:	2120      	movs	r1, #32
 8003506:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2280      	movs	r2, #128	; 0x80
 8003512:	2100      	movs	r1, #0
 8003514:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003516:	2300      	movs	r3, #0
}
 8003518:	0018      	movs	r0, r3
 800351a:	46bd      	mov	sp, r7
 800351c:	b004      	add	sp, #16
 800351e:	bd80      	pop	{r7, pc}
 8003520:	01ffffff 	.word	0x01ffffff

08003524 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b094      	sub	sp, #80	; 0x50
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	603b      	str	r3, [r7, #0]
 8003530:	1dfb      	adds	r3, r7, #7
 8003532:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003534:	e0a7      	b.n	8003686 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003536:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003538:	3301      	adds	r3, #1
 800353a:	d100      	bne.n	800353e <UART_WaitOnFlagUntilTimeout+0x1a>
 800353c:	e0a3      	b.n	8003686 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800353e:	f7fd fb0d 	bl	8000b5c <HAL_GetTick>
 8003542:	0002      	movs	r2, r0
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800354a:	429a      	cmp	r2, r3
 800354c:	d302      	bcc.n	8003554 <UART_WaitOnFlagUntilTimeout+0x30>
 800354e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003550:	2b00      	cmp	r3, #0
 8003552:	d13f      	bne.n	80035d4 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003554:	f3ef 8310 	mrs	r3, PRIMASK
 8003558:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800355a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800355c:	647b      	str	r3, [r7, #68]	; 0x44
 800355e:	2301      	movs	r3, #1
 8003560:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003564:	f383 8810 	msr	PRIMASK, r3
}
 8003568:	46c0      	nop			; (mov r8, r8)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	494e      	ldr	r1, [pc, #312]	; (80036b0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003576:	400a      	ands	r2, r1
 8003578:	601a      	str	r2, [r3, #0]
 800357a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800357c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800357e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003580:	f383 8810 	msr	PRIMASK, r3
}
 8003584:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003586:	f3ef 8310 	mrs	r3, PRIMASK
 800358a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800358c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800358e:	643b      	str	r3, [r7, #64]	; 0x40
 8003590:	2301      	movs	r3, #1
 8003592:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003596:	f383 8810 	msr	PRIMASK, r3
}
 800359a:	46c0      	nop			; (mov r8, r8)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	689a      	ldr	r2, [r3, #8]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2101      	movs	r1, #1
 80035a8:	438a      	bics	r2, r1
 80035aa:	609a      	str	r2, [r3, #8]
 80035ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035b2:	f383 8810 	msr	PRIMASK, r3
}
 80035b6:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2284      	movs	r2, #132	; 0x84
 80035bc:	2120      	movs	r1, #32
 80035be:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2288      	movs	r2, #136	; 0x88
 80035c4:	2120      	movs	r1, #32
 80035c6:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2280      	movs	r2, #128	; 0x80
 80035cc:	2100      	movs	r1, #0
 80035ce:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e069      	b.n	80036a8 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2204      	movs	r2, #4
 80035dc:	4013      	ands	r3, r2
 80035de:	d052      	beq.n	8003686 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	69da      	ldr	r2, [r3, #28]
 80035e6:	2380      	movs	r3, #128	; 0x80
 80035e8:	011b      	lsls	r3, r3, #4
 80035ea:	401a      	ands	r2, r3
 80035ec:	2380      	movs	r3, #128	; 0x80
 80035ee:	011b      	lsls	r3, r3, #4
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d148      	bne.n	8003686 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2280      	movs	r2, #128	; 0x80
 80035fa:	0112      	lsls	r2, r2, #4
 80035fc:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035fe:	f3ef 8310 	mrs	r3, PRIMASK
 8003602:	613b      	str	r3, [r7, #16]
  return(result);
 8003604:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003606:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003608:	2301      	movs	r3, #1
 800360a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	f383 8810 	msr	PRIMASK, r3
}
 8003612:	46c0      	nop			; (mov r8, r8)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4924      	ldr	r1, [pc, #144]	; (80036b0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003620:	400a      	ands	r2, r1
 8003622:	601a      	str	r2, [r3, #0]
 8003624:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003626:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	f383 8810 	msr	PRIMASK, r3
}
 800362e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003630:	f3ef 8310 	mrs	r3, PRIMASK
 8003634:	61fb      	str	r3, [r7, #28]
  return(result);
 8003636:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003638:	64bb      	str	r3, [r7, #72]	; 0x48
 800363a:	2301      	movs	r3, #1
 800363c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800363e:	6a3b      	ldr	r3, [r7, #32]
 8003640:	f383 8810 	msr	PRIMASK, r3
}
 8003644:	46c0      	nop			; (mov r8, r8)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	689a      	ldr	r2, [r3, #8]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2101      	movs	r1, #1
 8003652:	438a      	bics	r2, r1
 8003654:	609a      	str	r2, [r3, #8]
 8003656:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003658:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800365a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365c:	f383 8810 	msr	PRIMASK, r3
}
 8003660:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2284      	movs	r2, #132	; 0x84
 8003666:	2120      	movs	r1, #32
 8003668:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2288      	movs	r2, #136	; 0x88
 800366e:	2120      	movs	r1, #32
 8003670:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	228c      	movs	r2, #140	; 0x8c
 8003676:	2120      	movs	r1, #32
 8003678:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2280      	movs	r2, #128	; 0x80
 800367e:	2100      	movs	r1, #0
 8003680:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e010      	b.n	80036a8 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	69db      	ldr	r3, [r3, #28]
 800368c:	68ba      	ldr	r2, [r7, #8]
 800368e:	4013      	ands	r3, r2
 8003690:	68ba      	ldr	r2, [r7, #8]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	425a      	negs	r2, r3
 8003696:	4153      	adcs	r3, r2
 8003698:	b2db      	uxtb	r3, r3
 800369a:	001a      	movs	r2, r3
 800369c:	1dfb      	adds	r3, r7, #7
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d100      	bne.n	80036a6 <UART_WaitOnFlagUntilTimeout+0x182>
 80036a4:	e747      	b.n	8003536 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036a6:	2300      	movs	r3, #0
}
 80036a8:	0018      	movs	r0, r3
 80036aa:	46bd      	mov	sp, r7
 80036ac:	b014      	add	sp, #80	; 0x50
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	fffffe5f 	.word	0xfffffe5f

080036b4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b094      	sub	sp, #80	; 0x50
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	1dbb      	adds	r3, r7, #6
 80036c0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	68ba      	ldr	r2, [r7, #8]
 80036c6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	1dba      	adds	r2, r7, #6
 80036cc:	215c      	movs	r1, #92	; 0x5c
 80036ce:	8812      	ldrh	r2, [r2, #0]
 80036d0:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	1dba      	adds	r2, r7, #6
 80036d6:	215e      	movs	r1, #94	; 0x5e
 80036d8:	8812      	ldrh	r2, [r2, #0]
 80036da:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	689a      	ldr	r2, [r3, #8]
 80036e6:	2380      	movs	r3, #128	; 0x80
 80036e8:	015b      	lsls	r3, r3, #5
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d10d      	bne.n	800370a <UART_Start_Receive_IT+0x56>
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d104      	bne.n	8003700 <UART_Start_Receive_IT+0x4c>
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2260      	movs	r2, #96	; 0x60
 80036fa:	496f      	ldr	r1, [pc, #444]	; (80038b8 <UART_Start_Receive_IT+0x204>)
 80036fc:	5299      	strh	r1, [r3, r2]
 80036fe:	e02e      	b.n	800375e <UART_Start_Receive_IT+0xaa>
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2260      	movs	r2, #96	; 0x60
 8003704:	21ff      	movs	r1, #255	; 0xff
 8003706:	5299      	strh	r1, [r3, r2]
 8003708:	e029      	b.n	800375e <UART_Start_Receive_IT+0xaa>
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d10d      	bne.n	800372e <UART_Start_Receive_IT+0x7a>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d104      	bne.n	8003724 <UART_Start_Receive_IT+0x70>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2260      	movs	r2, #96	; 0x60
 800371e:	21ff      	movs	r1, #255	; 0xff
 8003720:	5299      	strh	r1, [r3, r2]
 8003722:	e01c      	b.n	800375e <UART_Start_Receive_IT+0xaa>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2260      	movs	r2, #96	; 0x60
 8003728:	217f      	movs	r1, #127	; 0x7f
 800372a:	5299      	strh	r1, [r3, r2]
 800372c:	e017      	b.n	800375e <UART_Start_Receive_IT+0xaa>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	689a      	ldr	r2, [r3, #8]
 8003732:	2380      	movs	r3, #128	; 0x80
 8003734:	055b      	lsls	r3, r3, #21
 8003736:	429a      	cmp	r2, r3
 8003738:	d10d      	bne.n	8003756 <UART_Start_Receive_IT+0xa2>
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d104      	bne.n	800374c <UART_Start_Receive_IT+0x98>
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2260      	movs	r2, #96	; 0x60
 8003746:	217f      	movs	r1, #127	; 0x7f
 8003748:	5299      	strh	r1, [r3, r2]
 800374a:	e008      	b.n	800375e <UART_Start_Receive_IT+0xaa>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2260      	movs	r2, #96	; 0x60
 8003750:	213f      	movs	r1, #63	; 0x3f
 8003752:	5299      	strh	r1, [r3, r2]
 8003754:	e003      	b.n	800375e <UART_Start_Receive_IT+0xaa>
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2260      	movs	r2, #96	; 0x60
 800375a:	2100      	movs	r1, #0
 800375c:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	228c      	movs	r2, #140	; 0x8c
 8003762:	2100      	movs	r1, #0
 8003764:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2288      	movs	r2, #136	; 0x88
 800376a:	2122      	movs	r1, #34	; 0x22
 800376c:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800376e:	f3ef 8310 	mrs	r3, PRIMASK
 8003772:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003774:	6b7b      	ldr	r3, [r7, #52]	; 0x34

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003776:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003778:	2301      	movs	r3, #1
 800377a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800377c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800377e:	f383 8810 	msr	PRIMASK, r3
}
 8003782:	46c0      	nop			; (mov r8, r8)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	689a      	ldr	r2, [r3, #8]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2101      	movs	r1, #1
 8003790:	430a      	orrs	r2, r1
 8003792:	609a      	str	r2, [r3, #8]
 8003794:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003796:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800379a:	f383 8810 	msr	PRIMASK, r3
}
 800379e:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80037a4:	2380      	movs	r3, #128	; 0x80
 80037a6:	059b      	lsls	r3, r3, #22
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d150      	bne.n	800384e <UART_Start_Receive_IT+0x19a>
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2268      	movs	r2, #104	; 0x68
 80037b0:	5a9b      	ldrh	r3, [r3, r2]
 80037b2:	1dba      	adds	r2, r7, #6
 80037b4:	8812      	ldrh	r2, [r2, #0]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d349      	bcc.n	800384e <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	689a      	ldr	r2, [r3, #8]
 80037be:	2380      	movs	r3, #128	; 0x80
 80037c0:	015b      	lsls	r3, r3, #5
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d107      	bne.n	80037d6 <UART_Start_Receive_IT+0x122>
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d103      	bne.n	80037d6 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	4a3a      	ldr	r2, [pc, #232]	; (80038bc <UART_Start_Receive_IT+0x208>)
 80037d2:	671a      	str	r2, [r3, #112]	; 0x70
 80037d4:	e002      	b.n	80037dc <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	4a39      	ldr	r2, [pc, #228]	; (80038c0 <UART_Start_Receive_IT+0x20c>)
 80037da:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2280      	movs	r2, #128	; 0x80
 80037e0:	2100      	movs	r1, #0
 80037e2:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037e4:	f3ef 8310 	mrs	r3, PRIMASK
 80037e8:	61fb      	str	r3, [r7, #28]
  return(result);
 80037ea:	69fb      	ldr	r3, [r7, #28]

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80037ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80037ee:	2301      	movs	r3, #1
 80037f0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037f2:	6a3b      	ldr	r3, [r7, #32]
 80037f4:	f383 8810 	msr	PRIMASK, r3
}
 80037f8:	46c0      	nop			; (mov r8, r8)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2180      	movs	r1, #128	; 0x80
 8003806:	0049      	lsls	r1, r1, #1
 8003808:	430a      	orrs	r2, r1
 800380a:	601a      	str	r2, [r3, #0]
 800380c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800380e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003812:	f383 8810 	msr	PRIMASK, r3
}
 8003816:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003818:	f3ef 8310 	mrs	r3, PRIMASK
 800381c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800381e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003820:	647b      	str	r3, [r7, #68]	; 0x44
 8003822:	2301      	movs	r3, #1
 8003824:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003828:	f383 8810 	msr	PRIMASK, r3
}
 800382c:	46c0      	nop			; (mov r8, r8)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	689a      	ldr	r2, [r3, #8]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2180      	movs	r1, #128	; 0x80
 800383a:	0549      	lsls	r1, r1, #21
 800383c:	430a      	orrs	r2, r1
 800383e:	609a      	str	r2, [r3, #8]
 8003840:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003842:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003846:	f383 8810 	msr	PRIMASK, r3
}
 800384a:	46c0      	nop			; (mov r8, r8)
 800384c:	e02e      	b.n	80038ac <UART_Start_Receive_IT+0x1f8>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	689a      	ldr	r2, [r3, #8]
 8003852:	2380      	movs	r3, #128	; 0x80
 8003854:	015b      	lsls	r3, r3, #5
 8003856:	429a      	cmp	r2, r3
 8003858:	d107      	bne.n	800386a <UART_Start_Receive_IT+0x1b6>
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d103      	bne.n	800386a <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	4a17      	ldr	r2, [pc, #92]	; (80038c4 <UART_Start_Receive_IT+0x210>)
 8003866:	671a      	str	r2, [r3, #112]	; 0x70
 8003868:	e002      	b.n	8003870 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	4a16      	ldr	r2, [pc, #88]	; (80038c8 <UART_Start_Receive_IT+0x214>)
 800386e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2280      	movs	r2, #128	; 0x80
 8003874:	2100      	movs	r1, #0
 8003876:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003878:	f3ef 8310 	mrs	r3, PRIMASK
 800387c:	613b      	str	r3, [r7, #16]
  return(result);
 800387e:	693b      	ldr	r3, [r7, #16]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8003880:	643b      	str	r3, [r7, #64]	; 0x40
 8003882:	2301      	movs	r3, #1
 8003884:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	f383 8810 	msr	PRIMASK, r3
}
 800388c:	46c0      	nop			; (mov r8, r8)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2190      	movs	r1, #144	; 0x90
 800389a:	0049      	lsls	r1, r1, #1
 800389c:	430a      	orrs	r2, r1
 800389e:	601a      	str	r2, [r3, #0]
 80038a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038a2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	f383 8810 	msr	PRIMASK, r3
}
 80038aa:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	0018      	movs	r0, r3
 80038b0:	46bd      	mov	sp, r7
 80038b2:	b014      	add	sp, #80	; 0x50
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	46c0      	nop			; (mov r8, r8)
 80038b8:	000001ff 	.word	0x000001ff
 80038bc:	0800432d 	.word	0x0800432d
 80038c0:	08004049 	.word	0x08004049
 80038c4:	08003edd 	.word	0x08003edd
 80038c8:	08003d71 	.word	0x08003d71

080038cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b08e      	sub	sp, #56	; 0x38
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038d4:	f3ef 8310 	mrs	r3, PRIMASK
 80038d8:	617b      	str	r3, [r7, #20]
  return(result);
 80038da:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80038dc:	637b      	str	r3, [r7, #52]	; 0x34
 80038de:	2301      	movs	r3, #1
 80038e0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	f383 8810 	msr	PRIMASK, r3
}
 80038e8:	46c0      	nop			; (mov r8, r8)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4926      	ldr	r1, [pc, #152]	; (8003990 <UART_EndRxTransfer+0xc4>)
 80038f6:	400a      	ands	r2, r1
 80038f8:	601a      	str	r2, [r3, #0]
 80038fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038fc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	f383 8810 	msr	PRIMASK, r3
}
 8003904:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003906:	f3ef 8310 	mrs	r3, PRIMASK
 800390a:	623b      	str	r3, [r7, #32]
  return(result);
 800390c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800390e:	633b      	str	r3, [r7, #48]	; 0x30
 8003910:	2301      	movs	r3, #1
 8003912:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003916:	f383 8810 	msr	PRIMASK, r3
}
 800391a:	46c0      	nop			; (mov r8, r8)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	689a      	ldr	r2, [r3, #8]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	491b      	ldr	r1, [pc, #108]	; (8003994 <UART_EndRxTransfer+0xc8>)
 8003928:	400a      	ands	r2, r1
 800392a:	609a      	str	r2, [r3, #8]
 800392c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800392e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003932:	f383 8810 	msr	PRIMASK, r3
}
 8003936:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800393c:	2b01      	cmp	r3, #1
 800393e:	d118      	bne.n	8003972 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003940:	f3ef 8310 	mrs	r3, PRIMASK
 8003944:	60bb      	str	r3, [r7, #8]
  return(result);
 8003946:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003948:	62fb      	str	r3, [r7, #44]	; 0x2c
 800394a:	2301      	movs	r3, #1
 800394c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f383 8810 	msr	PRIMASK, r3
}
 8003954:	46c0      	nop			; (mov r8, r8)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2110      	movs	r1, #16
 8003962:	438a      	bics	r2, r1
 8003964:	601a      	str	r2, [r3, #0]
 8003966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003968:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	f383 8810 	msr	PRIMASK, r3
}
 8003970:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2288      	movs	r2, #136	; 0x88
 8003976:	2120      	movs	r1, #32
 8003978:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	671a      	str	r2, [r3, #112]	; 0x70
}
 8003986:	46c0      	nop			; (mov r8, r8)
 8003988:	46bd      	mov	sp, r7
 800398a:	b00e      	add	sp, #56	; 0x38
 800398c:	bd80      	pop	{r7, pc}
 800398e:	46c0      	nop			; (mov r8, r8)
 8003990:	fffffedf 	.word	0xfffffedf
 8003994:	effffffe 	.word	0xeffffffe

08003998 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	225e      	movs	r2, #94	; 0x5e
 80039aa:	2100      	movs	r1, #0
 80039ac:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2256      	movs	r2, #86	; 0x56
 80039b2:	2100      	movs	r1, #0
 80039b4:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	0018      	movs	r0, r3
 80039ba:	f7ff f921 	bl	8002c00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039be:	46c0      	nop			; (mov r8, r8)
 80039c0:	46bd      	mov	sp, r7
 80039c2:	b004      	add	sp, #16
 80039c4:	bd80      	pop	{r7, pc}

080039c6 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80039c6:	b580      	push	{r7, lr}
 80039c8:	b08a      	sub	sp, #40	; 0x28
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2284      	movs	r2, #132	; 0x84
 80039d2:	589b      	ldr	r3, [r3, r2]
 80039d4:	2b21      	cmp	r3, #33	; 0x21
 80039d6:	d14c      	bne.n	8003a72 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2256      	movs	r2, #86	; 0x56
 80039dc:	5a9b      	ldrh	r3, [r3, r2]
 80039de:	b29b      	uxth	r3, r3
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d132      	bne.n	8003a4a <UART_TxISR_8BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039e4:	f3ef 8310 	mrs	r3, PRIMASK
 80039e8:	60bb      	str	r3, [r7, #8]
  return(result);
 80039ea:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80039ec:	627b      	str	r3, [r7, #36]	; 0x24
 80039ee:	2301      	movs	r3, #1
 80039f0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f383 8810 	msr	PRIMASK, r3
}
 80039f8:	46c0      	nop			; (mov r8, r8)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2180      	movs	r1, #128	; 0x80
 8003a06:	438a      	bics	r2, r1
 8003a08:	601a      	str	r2, [r3, #0]
 8003a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	f383 8810 	msr	PRIMASK, r3
}
 8003a14:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a16:	f3ef 8310 	mrs	r3, PRIMASK
 8003a1a:	617b      	str	r3, [r7, #20]
  return(result);
 8003a1c:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003a1e:	623b      	str	r3, [r7, #32]
 8003a20:	2301      	movs	r3, #1
 8003a22:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	f383 8810 	msr	PRIMASK, r3
}
 8003a2a:	46c0      	nop			; (mov r8, r8)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2140      	movs	r1, #64	; 0x40
 8003a38:	430a      	orrs	r2, r1
 8003a3a:	601a      	str	r2, [r3, #0]
 8003a3c:	6a3b      	ldr	r3, [r7, #32]
 8003a3e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	f383 8810 	msr	PRIMASK, r3
}
 8003a46:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003a48:	e013      	b.n	8003a72 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a4e:	781a      	ldrb	r2, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a5a:	1c5a      	adds	r2, r3, #1
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2256      	movs	r2, #86	; 0x56
 8003a64:	5a9b      	ldrh	r3, [r3, r2]
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	3b01      	subs	r3, #1
 8003a6a:	b299      	uxth	r1, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2256      	movs	r2, #86	; 0x56
 8003a70:	5299      	strh	r1, [r3, r2]
}
 8003a72:	46c0      	nop			; (mov r8, r8)
 8003a74:	46bd      	mov	sp, r7
 8003a76:	b00a      	add	sp, #40	; 0x28
 8003a78:	bd80      	pop	{r7, pc}

08003a7a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003a7a:	b580      	push	{r7, lr}
 8003a7c:	b08c      	sub	sp, #48	; 0x30
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2284      	movs	r2, #132	; 0x84
 8003a86:	589b      	ldr	r3, [r3, r2]
 8003a88:	2b21      	cmp	r3, #33	; 0x21
 8003a8a:	d151      	bne.n	8003b30 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2256      	movs	r2, #86	; 0x56
 8003a90:	5a9b      	ldrh	r3, [r3, r2]
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d132      	bne.n	8003afe <UART_TxISR_16BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a98:	f3ef 8310 	mrs	r3, PRIMASK
 8003a9c:	60fb      	str	r3, [r7, #12]
  return(result);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003aa0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	f383 8810 	msr	PRIMASK, r3
}
 8003aac:	46c0      	nop			; (mov r8, r8)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2180      	movs	r1, #128	; 0x80
 8003aba:	438a      	bics	r2, r1
 8003abc:	601a      	str	r2, [r3, #0]
 8003abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	f383 8810 	msr	PRIMASK, r3
}
 8003ac8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003aca:	f3ef 8310 	mrs	r3, PRIMASK
 8003ace:	61bb      	str	r3, [r7, #24]
  return(result);
 8003ad0:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ad2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	f383 8810 	msr	PRIMASK, r3
}
 8003ade:	46c0      	nop			; (mov r8, r8)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2140      	movs	r1, #64	; 0x40
 8003aec:	430a      	orrs	r2, r1
 8003aee:	601a      	str	r2, [r3, #0]
 8003af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003af4:	6a3b      	ldr	r3, [r7, #32]
 8003af6:	f383 8810 	msr	PRIMASK, r3
}
 8003afa:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003afc:	e018      	b.n	8003b30 <UART_TxISR_16BIT+0xb6>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b02:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b06:	881b      	ldrh	r3, [r3, #0]
 8003b08:	001a      	movs	r2, r3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	05d2      	lsls	r2, r2, #23
 8003b10:	0dd2      	lsrs	r2, r2, #23
 8003b12:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b18:	1c9a      	adds	r2, r3, #2
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2256      	movs	r2, #86	; 0x56
 8003b22:	5a9b      	ldrh	r3, [r3, r2]
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	3b01      	subs	r3, #1
 8003b28:	b299      	uxth	r1, r3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2256      	movs	r2, #86	; 0x56
 8003b2e:	5299      	strh	r1, [r3, r2]
}
 8003b30:	46c0      	nop			; (mov r8, r8)
 8003b32:	46bd      	mov	sp, r7
 8003b34:	b00c      	add	sp, #48	; 0x30
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b08c      	sub	sp, #48	; 0x30
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2284      	movs	r2, #132	; 0x84
 8003b44:	589b      	ldr	r3, [r3, r2]
 8003b46:	2b21      	cmp	r3, #33	; 0x21
 8003b48:	d165      	bne.n	8003c16 <UART_TxISR_8BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003b4a:	232e      	movs	r3, #46	; 0x2e
 8003b4c:	18fb      	adds	r3, r7, r3
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	216a      	movs	r1, #106	; 0x6a
 8003b52:	5a52      	ldrh	r2, [r2, r1]
 8003b54:	801a      	strh	r2, [r3, #0]
 8003b56:	e059      	b.n	8003c0c <UART_TxISR_8BIT_FIFOEN+0xd4>
    {
      if (huart->TxXferCount == 0U)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2256      	movs	r2, #86	; 0x56
 8003b5c:	5a9b      	ldrh	r3, [r3, r2]
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d133      	bne.n	8003bcc <UART_TxISR_8BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b64:	f3ef 8310 	mrs	r3, PRIMASK
 8003b68:	60fb      	str	r3, [r7, #12]
  return(result);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003b6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b6e:	2301      	movs	r3, #1
 8003b70:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	f383 8810 	msr	PRIMASK, r3
}
 8003b78:	46c0      	nop			; (mov r8, r8)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	689a      	ldr	r2, [r3, #8]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4926      	ldr	r1, [pc, #152]	; (8003c20 <UART_TxISR_8BIT_FIFOEN+0xe8>)
 8003b86:	400a      	ands	r2, r1
 8003b88:	609a      	str	r2, [r3, #8]
 8003b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b8c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	f383 8810 	msr	PRIMASK, r3
}
 8003b94:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b96:	f3ef 8310 	mrs	r3, PRIMASK
 8003b9a:	61bb      	str	r3, [r7, #24]
  return(result);
 8003b9c:	69bb      	ldr	r3, [r7, #24]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003b9e:	627b      	str	r3, [r7, #36]	; 0x24
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	f383 8810 	msr	PRIMASK, r3
}
 8003baa:	46c0      	nop			; (mov r8, r8)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2140      	movs	r1, #64	; 0x40
 8003bb8:	430a      	orrs	r2, r1
 8003bba:	601a      	str	r2, [r3, #0]
 8003bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bbe:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bc0:	6a3b      	ldr	r3, [r7, #32]
 8003bc2:	f383 8810 	msr	PRIMASK, r3
}
 8003bc6:	46c0      	nop			; (mov r8, r8)

        break; /* force exit loop */
 8003bc8:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 8003bca:	e024      	b.n	8003c16 <UART_TxISR_8BIT_FIFOEN+0xde>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	69db      	ldr	r3, [r3, #28]
 8003bd2:	2280      	movs	r2, #128	; 0x80
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	d013      	beq.n	8003c00 <UART_TxISR_8BIT_FIFOEN+0xc8>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bdc:	781a      	ldrb	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003be8:	1c5a      	adds	r2, r3, #1
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2256      	movs	r2, #86	; 0x56
 8003bf2:	5a9b      	ldrh	r3, [r3, r2]
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	3b01      	subs	r3, #1
 8003bf8:	b299      	uxth	r1, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2256      	movs	r2, #86	; 0x56
 8003bfe:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003c00:	212e      	movs	r1, #46	; 0x2e
 8003c02:	187b      	adds	r3, r7, r1
 8003c04:	881a      	ldrh	r2, [r3, #0]
 8003c06:	187b      	adds	r3, r7, r1
 8003c08:	3a01      	subs	r2, #1
 8003c0a:	801a      	strh	r2, [r3, #0]
 8003c0c:	232e      	movs	r3, #46	; 0x2e
 8003c0e:	18fb      	adds	r3, r7, r3
 8003c10:	881b      	ldrh	r3, [r3, #0]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1a0      	bne.n	8003b58 <UART_TxISR_8BIT_FIFOEN+0x20>
}
 8003c16:	46c0      	nop			; (mov r8, r8)
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	b00c      	add	sp, #48	; 0x30
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	46c0      	nop			; (mov r8, r8)
 8003c20:	ff7fffff 	.word	0xff7fffff

08003c24 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b08c      	sub	sp, #48	; 0x30
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2284      	movs	r2, #132	; 0x84
 8003c30:	589b      	ldr	r3, [r3, r2]
 8003c32:	2b21      	cmp	r3, #33	; 0x21
 8003c34:	d16a      	bne.n	8003d0c <UART_TxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003c36:	232e      	movs	r3, #46	; 0x2e
 8003c38:	18fb      	adds	r3, r7, r3
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	216a      	movs	r1, #106	; 0x6a
 8003c3e:	5a52      	ldrh	r2, [r2, r1]
 8003c40:	801a      	strh	r2, [r3, #0]
 8003c42:	e05e      	b.n	8003d02 <UART_TxISR_16BIT_FIFOEN+0xde>
    {
      if (huart->TxXferCount == 0U)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2256      	movs	r2, #86	; 0x56
 8003c48:	5a9b      	ldrh	r3, [r3, r2]
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d133      	bne.n	8003cb8 <UART_TxISR_16BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c50:	f3ef 8310 	mrs	r3, PRIMASK
 8003c54:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c56:	68bb      	ldr	r3, [r7, #8]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003c58:	627b      	str	r3, [r7, #36]	; 0x24
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f383 8810 	msr	PRIMASK, r3
}
 8003c64:	46c0      	nop			; (mov r8, r8)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	689a      	ldr	r2, [r3, #8]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4928      	ldr	r1, [pc, #160]	; (8003d14 <UART_TxISR_16BIT_FIFOEN+0xf0>)
 8003c72:	400a      	ands	r2, r1
 8003c74:	609a      	str	r2, [r3, #8]
 8003c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c78:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	f383 8810 	msr	PRIMASK, r3
}
 8003c80:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c82:	f3ef 8310 	mrs	r3, PRIMASK
 8003c86:	617b      	str	r3, [r7, #20]
  return(result);
 8003c88:	697b      	ldr	r3, [r7, #20]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003c8a:	623b      	str	r3, [r7, #32]
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	f383 8810 	msr	PRIMASK, r3
}
 8003c96:	46c0      	nop			; (mov r8, r8)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2140      	movs	r1, #64	; 0x40
 8003ca4:	430a      	orrs	r2, r1
 8003ca6:	601a      	str	r2, [r3, #0]
 8003ca8:	6a3b      	ldr	r3, [r7, #32]
 8003caa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	f383 8810 	msr	PRIMASK, r3
}
 8003cb2:	46c0      	nop			; (mov r8, r8)

        break; /* force exit loop */
 8003cb4:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 8003cb6:	e029      	b.n	8003d0c <UART_TxISR_16BIT_FIFOEN+0xe8>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	69db      	ldr	r3, [r3, #28]
 8003cbe:	2280      	movs	r2, #128	; 0x80
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	d018      	beq.n	8003cf6 <UART_TxISR_16BIT_FIFOEN+0xd2>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cc8:	62bb      	str	r3, [r7, #40]	; 0x28
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ccc:	881b      	ldrh	r3, [r3, #0]
 8003cce:	001a      	movs	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	05d2      	lsls	r2, r2, #23
 8003cd6:	0dd2      	lsrs	r2, r2, #23
 8003cd8:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cde:	1c9a      	adds	r2, r3, #2
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2256      	movs	r2, #86	; 0x56
 8003ce8:	5a9b      	ldrh	r3, [r3, r2]
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	3b01      	subs	r3, #1
 8003cee:	b299      	uxth	r1, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2256      	movs	r2, #86	; 0x56
 8003cf4:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003cf6:	212e      	movs	r1, #46	; 0x2e
 8003cf8:	187b      	adds	r3, r7, r1
 8003cfa:	881a      	ldrh	r2, [r3, #0]
 8003cfc:	187b      	adds	r3, r7, r1
 8003cfe:	3a01      	subs	r2, #1
 8003d00:	801a      	strh	r2, [r3, #0]
 8003d02:	232e      	movs	r3, #46	; 0x2e
 8003d04:	18fb      	adds	r3, r7, r3
 8003d06:	881b      	ldrh	r3, [r3, #0]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d19b      	bne.n	8003c44 <UART_TxISR_16BIT_FIFOEN+0x20>
}
 8003d0c:	46c0      	nop			; (mov r8, r8)
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	b00c      	add	sp, #48	; 0x30
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	ff7fffff 	.word	0xff7fffff

08003d18 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b086      	sub	sp, #24
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d20:	f3ef 8310 	mrs	r3, PRIMASK
 8003d24:	60bb      	str	r3, [r7, #8]
  return(result);
 8003d26:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003d28:	617b      	str	r3, [r7, #20]
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f383 8810 	msr	PRIMASK, r3
}
 8003d34:	46c0      	nop			; (mov r8, r8)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2140      	movs	r1, #64	; 0x40
 8003d42:	438a      	bics	r2, r1
 8003d44:	601a      	str	r2, [r3, #0]
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	f383 8810 	msr	PRIMASK, r3
}
 8003d50:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2284      	movs	r2, #132	; 0x84
 8003d56:	2120      	movs	r1, #32
 8003d58:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	0018      	movs	r0, r3
 8003d64:	f7fe ff44 	bl	8002bf0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d68:	46c0      	nop			; (mov r8, r8)
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	b006      	add	sp, #24
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b090      	sub	sp, #64	; 0x40
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003d78:	203e      	movs	r0, #62	; 0x3e
 8003d7a:	183b      	adds	r3, r7, r0
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	2160      	movs	r1, #96	; 0x60
 8003d80:	5a52      	ldrh	r2, [r2, r1]
 8003d82:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2288      	movs	r2, #136	; 0x88
 8003d88:	589b      	ldr	r3, [r3, r2]
 8003d8a:	2b22      	cmp	r3, #34	; 0x22
 8003d8c:	d000      	beq.n	8003d90 <UART_RxISR_8BIT+0x20>
 8003d8e:	e097      	b.n	8003ec0 <UART_RxISR_8BIT+0x150>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d96:	213c      	movs	r1, #60	; 0x3c
 8003d98:	187b      	adds	r3, r7, r1
 8003d9a:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003d9c:	187b      	adds	r3, r7, r1
 8003d9e:	881b      	ldrh	r3, [r3, #0]
 8003da0:	b2da      	uxtb	r2, r3
 8003da2:	183b      	adds	r3, r7, r0
 8003da4:	881b      	ldrh	r3, [r3, #0]
 8003da6:	b2d9      	uxtb	r1, r3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dac:	400a      	ands	r2, r1
 8003dae:	b2d2      	uxtb	r2, r2
 8003db0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003db6:	1c5a      	adds	r2, r3, #1
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	225e      	movs	r2, #94	; 0x5e
 8003dc0:	5a9b      	ldrh	r3, [r3, r2]
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	3b01      	subs	r3, #1
 8003dc6:	b299      	uxth	r1, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	225e      	movs	r2, #94	; 0x5e
 8003dcc:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	225e      	movs	r2, #94	; 0x5e
 8003dd2:	5a9b      	ldrh	r3, [r3, r2]
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d000      	beq.n	8003ddc <UART_RxISR_8BIT+0x6c>
 8003dda:	e079      	b.n	8003ed0 <UART_RxISR_8BIT+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ddc:	f3ef 8310 	mrs	r3, PRIMASK
 8003de0:	61bb      	str	r3, [r7, #24]
  return(result);
 8003de2:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003de4:	63bb      	str	r3, [r7, #56]	; 0x38
 8003de6:	2301      	movs	r3, #1
 8003de8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	f383 8810 	msr	PRIMASK, r3
}
 8003df0:	46c0      	nop			; (mov r8, r8)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4936      	ldr	r1, [pc, #216]	; (8003ed8 <UART_RxISR_8BIT+0x168>)
 8003dfe:	400a      	ands	r2, r1
 8003e00:	601a      	str	r2, [r3, #0]
 8003e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e04:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e06:	6a3b      	ldr	r3, [r7, #32]
 8003e08:	f383 8810 	msr	PRIMASK, r3
}
 8003e0c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e0e:	f3ef 8310 	mrs	r3, PRIMASK
 8003e12:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e16:	637b      	str	r3, [r7, #52]	; 0x34
 8003e18:	2301      	movs	r3, #1
 8003e1a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e1e:	f383 8810 	msr	PRIMASK, r3
}
 8003e22:	46c0      	nop			; (mov r8, r8)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	689a      	ldr	r2, [r3, #8]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	2101      	movs	r1, #1
 8003e30:	438a      	bics	r2, r1
 8003e32:	609a      	str	r2, [r3, #8]
 8003e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e36:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e3a:	f383 8810 	msr	PRIMASK, r3
}
 8003e3e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2288      	movs	r2, #136	; 0x88
 8003e44:	2120      	movs	r1, #32
 8003e46:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d12f      	bne.n	8003eb6 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e5c:	f3ef 8310 	mrs	r3, PRIMASK
 8003e60:	60fb      	str	r3, [r7, #12]
  return(result);
 8003e62:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e64:	633b      	str	r3, [r7, #48]	; 0x30
 8003e66:	2301      	movs	r3, #1
 8003e68:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	f383 8810 	msr	PRIMASK, r3
}
 8003e70:	46c0      	nop			; (mov r8, r8)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2110      	movs	r1, #16
 8003e7e:	438a      	bics	r2, r1
 8003e80:	601a      	str	r2, [r3, #0]
 8003e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e84:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	f383 8810 	msr	PRIMASK, r3
}
 8003e8c:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	69db      	ldr	r3, [r3, #28]
 8003e94:	2210      	movs	r2, #16
 8003e96:	4013      	ands	r3, r2
 8003e98:	2b10      	cmp	r3, #16
 8003e9a:	d103      	bne.n	8003ea4 <UART_RxISR_8BIT+0x134>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2210      	movs	r2, #16
 8003ea2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	225c      	movs	r2, #92	; 0x5c
 8003ea8:	5a9a      	ldrh	r2, [r3, r2]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	0011      	movs	r1, r2
 8003eae:	0018      	movs	r0, r3
 8003eb0:	f7fe feae 	bl	8002c10 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003eb4:	e00c      	b.n	8003ed0 <UART_RxISR_8BIT+0x160>
        HAL_UART_RxCpltCallback(huart);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	0018      	movs	r0, r3
 8003eba:	f7fc fbaf 	bl	800061c <HAL_UART_RxCpltCallback>
}
 8003ebe:	e007      	b.n	8003ed0 <UART_RxISR_8BIT+0x160>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	699a      	ldr	r2, [r3, #24]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2108      	movs	r1, #8
 8003ecc:	430a      	orrs	r2, r1
 8003ece:	619a      	str	r2, [r3, #24]
}
 8003ed0:	46c0      	nop			; (mov r8, r8)
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	b010      	add	sp, #64	; 0x40
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	fffffedf 	.word	0xfffffedf

08003edc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b090      	sub	sp, #64	; 0x40
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003ee4:	203e      	movs	r0, #62	; 0x3e
 8003ee6:	183b      	adds	r3, r7, r0
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	2160      	movs	r1, #96	; 0x60
 8003eec:	5a52      	ldrh	r2, [r2, r1]
 8003eee:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2288      	movs	r2, #136	; 0x88
 8003ef4:	589b      	ldr	r3, [r3, r2]
 8003ef6:	2b22      	cmp	r3, #34	; 0x22
 8003ef8:	d000      	beq.n	8003efc <UART_RxISR_16BIT+0x20>
 8003efa:	e097      	b.n	800402c <UART_RxISR_16BIT+0x150>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f02:	213c      	movs	r1, #60	; 0x3c
 8003f04:	187b      	adds	r3, r7, r1
 8003f06:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f0c:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8003f0e:	187b      	adds	r3, r7, r1
 8003f10:	183a      	adds	r2, r7, r0
 8003f12:	881b      	ldrh	r3, [r3, #0]
 8003f14:	8812      	ldrh	r2, [r2, #0]
 8003f16:	4013      	ands	r3, r2
 8003f18:	b29a      	uxth	r2, r3
 8003f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f1c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f22:	1c9a      	adds	r2, r3, #2
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	225e      	movs	r2, #94	; 0x5e
 8003f2c:	5a9b      	ldrh	r3, [r3, r2]
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	3b01      	subs	r3, #1
 8003f32:	b299      	uxth	r1, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	225e      	movs	r2, #94	; 0x5e
 8003f38:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	225e      	movs	r2, #94	; 0x5e
 8003f3e:	5a9b      	ldrh	r3, [r3, r2]
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d000      	beq.n	8003f48 <UART_RxISR_16BIT+0x6c>
 8003f46:	e079      	b.n	800403c <UART_RxISR_16BIT+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f48:	f3ef 8310 	mrs	r3, PRIMASK
 8003f4c:	617b      	str	r3, [r7, #20]
  return(result);
 8003f4e:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003f50:	637b      	str	r3, [r7, #52]	; 0x34
 8003f52:	2301      	movs	r3, #1
 8003f54:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	f383 8810 	msr	PRIMASK, r3
}
 8003f5c:	46c0      	nop			; (mov r8, r8)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4936      	ldr	r1, [pc, #216]	; (8004044 <UART_RxISR_16BIT+0x168>)
 8003f6a:	400a      	ands	r2, r1
 8003f6c:	601a      	str	r2, [r3, #0]
 8003f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f70:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	f383 8810 	msr	PRIMASK, r3
}
 8003f78:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f7a:	f3ef 8310 	mrs	r3, PRIMASK
 8003f7e:	623b      	str	r3, [r7, #32]
  return(result);
 8003f80:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f82:	633b      	str	r3, [r7, #48]	; 0x30
 8003f84:	2301      	movs	r3, #1
 8003f86:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8a:	f383 8810 	msr	PRIMASK, r3
}
 8003f8e:	46c0      	nop			; (mov r8, r8)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	689a      	ldr	r2, [r3, #8]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2101      	movs	r1, #1
 8003f9c:	438a      	bics	r2, r1
 8003f9e:	609a      	str	r2, [r3, #8]
 8003fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fa6:	f383 8810 	msr	PRIMASK, r3
}
 8003faa:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2288      	movs	r2, #136	; 0x88
 8003fb0:	2120      	movs	r1, #32
 8003fb2:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d12f      	bne.n	8004022 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fc8:	f3ef 8310 	mrs	r3, PRIMASK
 8003fcc:	60bb      	str	r3, [r7, #8]
  return(result);
 8003fce:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f383 8810 	msr	PRIMASK, r3
}
 8003fdc:	46c0      	nop			; (mov r8, r8)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2110      	movs	r1, #16
 8003fea:	438a      	bics	r2, r1
 8003fec:	601a      	str	r2, [r3, #0]
 8003fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ff0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	f383 8810 	msr	PRIMASK, r3
}
 8003ff8:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	69db      	ldr	r3, [r3, #28]
 8004000:	2210      	movs	r2, #16
 8004002:	4013      	ands	r3, r2
 8004004:	2b10      	cmp	r3, #16
 8004006:	d103      	bne.n	8004010 <UART_RxISR_16BIT+0x134>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2210      	movs	r2, #16
 800400e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	225c      	movs	r2, #92	; 0x5c
 8004014:	5a9a      	ldrh	r2, [r3, r2]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	0011      	movs	r1, r2
 800401a:	0018      	movs	r0, r3
 800401c:	f7fe fdf8 	bl	8002c10 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004020:	e00c      	b.n	800403c <UART_RxISR_16BIT+0x160>
        HAL_UART_RxCpltCallback(huart);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	0018      	movs	r0, r3
 8004026:	f7fc faf9 	bl	800061c <HAL_UART_RxCpltCallback>
}
 800402a:	e007      	b.n	800403c <UART_RxISR_16BIT+0x160>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	699a      	ldr	r2, [r3, #24]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2108      	movs	r1, #8
 8004038:	430a      	orrs	r2, r1
 800403a:	619a      	str	r2, [r3, #24]
}
 800403c:	46c0      	nop			; (mov r8, r8)
 800403e:	46bd      	mov	sp, r7
 8004040:	b010      	add	sp, #64	; 0x40
 8004042:	bd80      	pop	{r7, pc}
 8004044:	fffffedf 	.word	0xfffffedf

08004048 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b09c      	sub	sp, #112	; 0x70
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8004050:	236a      	movs	r3, #106	; 0x6a
 8004052:	18fb      	adds	r3, r7, r3
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	2160      	movs	r1, #96	; 0x60
 8004058:	5a52      	ldrh	r2, [r2, r1]
 800405a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	69db      	ldr	r3, [r3, #28]
 8004062:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2288      	movs	r2, #136	; 0x88
 8004078:	589b      	ldr	r3, [r3, r2]
 800407a:	2b22      	cmp	r3, #34	; 0x22
 800407c:	d000      	beq.n	8004080 <UART_RxISR_8BIT_FIFOEN+0x38>
 800407e:	e141      	b.n	8004304 <UART_RxISR_8BIT_FIFOEN+0x2bc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004080:	235e      	movs	r3, #94	; 0x5e
 8004082:	18fb      	adds	r3, r7, r3
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	2168      	movs	r1, #104	; 0x68
 8004088:	5a52      	ldrh	r2, [r2, r1]
 800408a:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800408c:	e0e8      	b.n	8004260 <UART_RxISR_8BIT_FIFOEN+0x218>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004094:	215c      	movs	r1, #92	; 0x5c
 8004096:	187b      	adds	r3, r7, r1
 8004098:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800409a:	187b      	adds	r3, r7, r1
 800409c:	881b      	ldrh	r3, [r3, #0]
 800409e:	b2da      	uxtb	r2, r3
 80040a0:	236a      	movs	r3, #106	; 0x6a
 80040a2:	18fb      	adds	r3, r7, r3
 80040a4:	881b      	ldrh	r3, [r3, #0]
 80040a6:	b2d9      	uxtb	r1, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ac:	400a      	ands	r2, r1
 80040ae:	b2d2      	uxtb	r2, r2
 80040b0:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040b6:	1c5a      	adds	r2, r3, #1
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	225e      	movs	r2, #94	; 0x5e
 80040c0:	5a9b      	ldrh	r3, [r3, r2]
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	3b01      	subs	r3, #1
 80040c6:	b299      	uxth	r1, r3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	225e      	movs	r2, #94	; 0x5e
 80040cc:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	69db      	ldr	r3, [r3, #28]
 80040d4:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80040d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040d8:	2207      	movs	r2, #7
 80040da:	4013      	ands	r3, r2
 80040dc:	d049      	beq.n	8004172 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80040de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040e0:	2201      	movs	r2, #1
 80040e2:	4013      	ands	r3, r2
 80040e4:	d010      	beq.n	8004108 <UART_RxISR_8BIT_FIFOEN+0xc0>
 80040e6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80040e8:	2380      	movs	r3, #128	; 0x80
 80040ea:	005b      	lsls	r3, r3, #1
 80040ec:	4013      	ands	r3, r2
 80040ee:	d00b      	beq.n	8004108 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2201      	movs	r2, #1
 80040f6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	228c      	movs	r2, #140	; 0x8c
 80040fc:	589b      	ldr	r3, [r3, r2]
 80040fe:	2201      	movs	r2, #1
 8004100:	431a      	orrs	r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	218c      	movs	r1, #140	; 0x8c
 8004106:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004108:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800410a:	2202      	movs	r2, #2
 800410c:	4013      	ands	r3, r2
 800410e:	d00f      	beq.n	8004130 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8004110:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004112:	2201      	movs	r2, #1
 8004114:	4013      	ands	r3, r2
 8004116:	d00b      	beq.n	8004130 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2202      	movs	r2, #2
 800411e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	228c      	movs	r2, #140	; 0x8c
 8004124:	589b      	ldr	r3, [r3, r2]
 8004126:	2204      	movs	r2, #4
 8004128:	431a      	orrs	r2, r3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	218c      	movs	r1, #140	; 0x8c
 800412e:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004130:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004132:	2204      	movs	r2, #4
 8004134:	4013      	ands	r3, r2
 8004136:	d00f      	beq.n	8004158 <UART_RxISR_8BIT_FIFOEN+0x110>
 8004138:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800413a:	2201      	movs	r2, #1
 800413c:	4013      	ands	r3, r2
 800413e:	d00b      	beq.n	8004158 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2204      	movs	r2, #4
 8004146:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	228c      	movs	r2, #140	; 0x8c
 800414c:	589b      	ldr	r3, [r3, r2]
 800414e:	2202      	movs	r2, #2
 8004150:	431a      	orrs	r2, r3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	218c      	movs	r1, #140	; 0x8c
 8004156:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	228c      	movs	r2, #140	; 0x8c
 800415c:	589b      	ldr	r3, [r3, r2]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d007      	beq.n	8004172 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	0018      	movs	r0, r3
 8004166:	f7fe fd4b 	bl	8002c00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	228c      	movs	r2, #140	; 0x8c
 800416e:	2100      	movs	r1, #0
 8004170:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	225e      	movs	r2, #94	; 0x5e
 8004176:	5a9b      	ldrh	r3, [r3, r2]
 8004178:	b29b      	uxth	r3, r3
 800417a:	2b00      	cmp	r3, #0
 800417c:	d170      	bne.n	8004260 <UART_RxISR_8BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800417e:	f3ef 8310 	mrs	r3, PRIMASK
 8004182:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8004184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004186:	65bb      	str	r3, [r7, #88]	; 0x58
 8004188:	2301      	movs	r3, #1
 800418a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800418c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800418e:	f383 8810 	msr	PRIMASK, r3
}
 8004192:	46c0      	nop			; (mov r8, r8)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	495f      	ldr	r1, [pc, #380]	; (800431c <UART_RxISR_8BIT_FIFOEN+0x2d4>)
 80041a0:	400a      	ands	r2, r1
 80041a2:	601a      	str	r2, [r3, #0]
 80041a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041a6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041aa:	f383 8810 	msr	PRIMASK, r3
}
 80041ae:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041b0:	f3ef 8310 	mrs	r3, PRIMASK
 80041b4:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 80041b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80041b8:	657b      	str	r3, [r7, #84]	; 0x54
 80041ba:	2301      	movs	r3, #1
 80041bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041c0:	f383 8810 	msr	PRIMASK, r3
}
 80041c4:	46c0      	nop			; (mov r8, r8)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	689a      	ldr	r2, [r3, #8]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4953      	ldr	r1, [pc, #332]	; (8004320 <UART_RxISR_8BIT_FIFOEN+0x2d8>)
 80041d2:	400a      	ands	r2, r1
 80041d4:	609a      	str	r2, [r3, #8]
 80041d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041d8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041dc:	f383 8810 	msr	PRIMASK, r3
}
 80041e0:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2288      	movs	r2, #136	; 0x88
 80041e6:	2120      	movs	r1, #32
 80041e8:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d12f      	bne.n	8004258 <UART_RxISR_8BIT_FIFOEN+0x210>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041fe:	f3ef 8310 	mrs	r3, PRIMASK
 8004202:	623b      	str	r3, [r7, #32]
  return(result);
 8004204:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004206:	653b      	str	r3, [r7, #80]	; 0x50
 8004208:	2301      	movs	r3, #1
 800420a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800420c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420e:	f383 8810 	msr	PRIMASK, r3
}
 8004212:	46c0      	nop			; (mov r8, r8)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2110      	movs	r1, #16
 8004220:	438a      	bics	r2, r1
 8004222:	601a      	str	r2, [r3, #0]
 8004224:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004226:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800422a:	f383 8810 	msr	PRIMASK, r3
}
 800422e:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	69db      	ldr	r3, [r3, #28]
 8004236:	2210      	movs	r2, #16
 8004238:	4013      	ands	r3, r2
 800423a:	2b10      	cmp	r3, #16
 800423c:	d103      	bne.n	8004246 <UART_RxISR_8BIT_FIFOEN+0x1fe>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	2210      	movs	r2, #16
 8004244:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	225c      	movs	r2, #92	; 0x5c
 800424a:	5a9a      	ldrh	r2, [r3, r2]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	0011      	movs	r1, r2
 8004250:	0018      	movs	r0, r3
 8004252:	f7fe fcdd 	bl	8002c10 <HAL_UARTEx_RxEventCallback>
 8004256:	e003      	b.n	8004260 <UART_RxISR_8BIT_FIFOEN+0x218>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	0018      	movs	r0, r3
 800425c:	f7fc f9de 	bl	800061c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004260:	235e      	movs	r3, #94	; 0x5e
 8004262:	18fb      	adds	r3, r7, r3
 8004264:	881b      	ldrh	r3, [r3, #0]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d004      	beq.n	8004274 <UART_RxISR_8BIT_FIFOEN+0x22c>
 800426a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800426c:	2220      	movs	r2, #32
 800426e:	4013      	ands	r3, r2
 8004270:	d000      	beq.n	8004274 <UART_RxISR_8BIT_FIFOEN+0x22c>
 8004272:	e70c      	b.n	800408e <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004274:	204e      	movs	r0, #78	; 0x4e
 8004276:	183b      	adds	r3, r7, r0
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	215e      	movs	r1, #94	; 0x5e
 800427c:	5a52      	ldrh	r2, [r2, r1]
 800427e:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004280:	0001      	movs	r1, r0
 8004282:	187b      	adds	r3, r7, r1
 8004284:	881b      	ldrh	r3, [r3, #0]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d044      	beq.n	8004314 <UART_RxISR_8BIT_FIFOEN+0x2cc>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2268      	movs	r2, #104	; 0x68
 800428e:	5a9b      	ldrh	r3, [r3, r2]
 8004290:	187a      	adds	r2, r7, r1
 8004292:	8812      	ldrh	r2, [r2, #0]
 8004294:	429a      	cmp	r2, r3
 8004296:	d23d      	bcs.n	8004314 <UART_RxISR_8BIT_FIFOEN+0x2cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004298:	f3ef 8310 	mrs	r3, PRIMASK
 800429c:	60bb      	str	r3, [r7, #8]
  return(result);
 800429e:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80042a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80042a2:	2301      	movs	r3, #1
 80042a4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f383 8810 	msr	PRIMASK, r3
}
 80042ac:	46c0      	nop			; (mov r8, r8)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	689a      	ldr	r2, [r3, #8]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	491a      	ldr	r1, [pc, #104]	; (8004324 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 80042ba:	400a      	ands	r2, r1
 80042bc:	609a      	str	r2, [r3, #8]
 80042be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042c0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	f383 8810 	msr	PRIMASK, r3
}
 80042c8:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a16      	ldr	r2, [pc, #88]	; (8004328 <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 80042ce:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042d0:	f3ef 8310 	mrs	r3, PRIMASK
 80042d4:	617b      	str	r3, [r7, #20]
  return(result);
 80042d6:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80042d8:	647b      	str	r3, [r7, #68]	; 0x44
 80042da:	2301      	movs	r3, #1
 80042dc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042de:	69bb      	ldr	r3, [r7, #24]
 80042e0:	f383 8810 	msr	PRIMASK, r3
}
 80042e4:	46c0      	nop			; (mov r8, r8)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2120      	movs	r1, #32
 80042f2:	430a      	orrs	r2, r1
 80042f4:	601a      	str	r2, [r3, #0]
 80042f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042f8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	f383 8810 	msr	PRIMASK, r3
}
 8004300:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004302:	e007      	b.n	8004314 <UART_RxISR_8BIT_FIFOEN+0x2cc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	699a      	ldr	r2, [r3, #24]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2108      	movs	r1, #8
 8004310:	430a      	orrs	r2, r1
 8004312:	619a      	str	r2, [r3, #24]
}
 8004314:	46c0      	nop			; (mov r8, r8)
 8004316:	46bd      	mov	sp, r7
 8004318:	b01c      	add	sp, #112	; 0x70
 800431a:	bd80      	pop	{r7, pc}
 800431c:	fffffeff 	.word	0xfffffeff
 8004320:	effffffe 	.word	0xeffffffe
 8004324:	efffffff 	.word	0xefffffff
 8004328:	08003d71 	.word	0x08003d71

0800432c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b09e      	sub	sp, #120	; 0x78
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8004334:	2372      	movs	r3, #114	; 0x72
 8004336:	18fb      	adds	r3, r7, r3
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	2160      	movs	r1, #96	; 0x60
 800433c:	5a52      	ldrh	r2, [r2, r1]
 800433e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	69db      	ldr	r3, [r3, #28]
 8004346:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2288      	movs	r2, #136	; 0x88
 800435c:	589b      	ldr	r3, [r3, r2]
 800435e:	2b22      	cmp	r3, #34	; 0x22
 8004360:	d000      	beq.n	8004364 <UART_RxISR_16BIT_FIFOEN+0x38>
 8004362:	e141      	b.n	80045e8 <UART_RxISR_16BIT_FIFOEN+0x2bc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004364:	2366      	movs	r3, #102	; 0x66
 8004366:	18fb      	adds	r3, r7, r3
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	2168      	movs	r1, #104	; 0x68
 800436c:	5a52      	ldrh	r2, [r2, r1]
 800436e:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004370:	e0e8      	b.n	8004544 <UART_RxISR_16BIT_FIFOEN+0x218>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004378:	2164      	movs	r1, #100	; 0x64
 800437a:	187b      	adds	r3, r7, r1
 800437c:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004382:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 8004384:	187b      	adds	r3, r7, r1
 8004386:	2272      	movs	r2, #114	; 0x72
 8004388:	18ba      	adds	r2, r7, r2
 800438a:	881b      	ldrh	r3, [r3, #0]
 800438c:	8812      	ldrh	r2, [r2, #0]
 800438e:	4013      	ands	r3, r2
 8004390:	b29a      	uxth	r2, r3
 8004392:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004394:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800439a:	1c9a      	adds	r2, r3, #2
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	225e      	movs	r2, #94	; 0x5e
 80043a4:	5a9b      	ldrh	r3, [r3, r2]
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	3b01      	subs	r3, #1
 80043aa:	b299      	uxth	r1, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	225e      	movs	r2, #94	; 0x5e
 80043b0:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	69db      	ldr	r3, [r3, #28]
 80043b8:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80043ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043bc:	2207      	movs	r2, #7
 80043be:	4013      	ands	r3, r2
 80043c0:	d049      	beq.n	8004456 <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80043c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043c4:	2201      	movs	r2, #1
 80043c6:	4013      	ands	r3, r2
 80043c8:	d010      	beq.n	80043ec <UART_RxISR_16BIT_FIFOEN+0xc0>
 80043ca:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80043cc:	2380      	movs	r3, #128	; 0x80
 80043ce:	005b      	lsls	r3, r3, #1
 80043d0:	4013      	ands	r3, r2
 80043d2:	d00b      	beq.n	80043ec <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	2201      	movs	r2, #1
 80043da:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	228c      	movs	r2, #140	; 0x8c
 80043e0:	589b      	ldr	r3, [r3, r2]
 80043e2:	2201      	movs	r2, #1
 80043e4:	431a      	orrs	r2, r3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	218c      	movs	r1, #140	; 0x8c
 80043ea:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80043ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043ee:	2202      	movs	r2, #2
 80043f0:	4013      	ands	r3, r2
 80043f2:	d00f      	beq.n	8004414 <UART_RxISR_16BIT_FIFOEN+0xe8>
 80043f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80043f6:	2201      	movs	r2, #1
 80043f8:	4013      	ands	r3, r2
 80043fa:	d00b      	beq.n	8004414 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2202      	movs	r2, #2
 8004402:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	228c      	movs	r2, #140	; 0x8c
 8004408:	589b      	ldr	r3, [r3, r2]
 800440a:	2204      	movs	r2, #4
 800440c:	431a      	orrs	r2, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	218c      	movs	r1, #140	; 0x8c
 8004412:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004414:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004416:	2204      	movs	r2, #4
 8004418:	4013      	ands	r3, r2
 800441a:	d00f      	beq.n	800443c <UART_RxISR_16BIT_FIFOEN+0x110>
 800441c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800441e:	2201      	movs	r2, #1
 8004420:	4013      	ands	r3, r2
 8004422:	d00b      	beq.n	800443c <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2204      	movs	r2, #4
 800442a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	228c      	movs	r2, #140	; 0x8c
 8004430:	589b      	ldr	r3, [r3, r2]
 8004432:	2202      	movs	r2, #2
 8004434:	431a      	orrs	r2, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	218c      	movs	r1, #140	; 0x8c
 800443a:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	228c      	movs	r2, #140	; 0x8c
 8004440:	589b      	ldr	r3, [r3, r2]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d007      	beq.n	8004456 <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	0018      	movs	r0, r3
 800444a:	f7fe fbd9 	bl	8002c00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	228c      	movs	r2, #140	; 0x8c
 8004452:	2100      	movs	r1, #0
 8004454:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	225e      	movs	r2, #94	; 0x5e
 800445a:	5a9b      	ldrh	r3, [r3, r2]
 800445c:	b29b      	uxth	r3, r3
 800445e:	2b00      	cmp	r3, #0
 8004460:	d170      	bne.n	8004544 <UART_RxISR_16BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004462:	f3ef 8310 	mrs	r3, PRIMASK
 8004466:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800446a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800446c:	2301      	movs	r3, #1
 800446e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004472:	f383 8810 	msr	PRIMASK, r3
}
 8004476:	46c0      	nop			; (mov r8, r8)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	495f      	ldr	r1, [pc, #380]	; (8004600 <UART_RxISR_16BIT_FIFOEN+0x2d4>)
 8004484:	400a      	ands	r2, r1
 8004486:	601a      	str	r2, [r3, #0]
 8004488:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800448a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800448c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800448e:	f383 8810 	msr	PRIMASK, r3
}
 8004492:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004494:	f3ef 8310 	mrs	r3, PRIMASK
 8004498:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800449a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800449c:	65bb      	str	r3, [r7, #88]	; 0x58
 800449e:	2301      	movs	r3, #1
 80044a0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044a4:	f383 8810 	msr	PRIMASK, r3
}
 80044a8:	46c0      	nop			; (mov r8, r8)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	689a      	ldr	r2, [r3, #8]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4953      	ldr	r1, [pc, #332]	; (8004604 <UART_RxISR_16BIT_FIFOEN+0x2d8>)
 80044b6:	400a      	ands	r2, r1
 80044b8:	609a      	str	r2, [r3, #8]
 80044ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044bc:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044c0:	f383 8810 	msr	PRIMASK, r3
}
 80044c4:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2288      	movs	r2, #136	; 0x88
 80044ca:	2120      	movs	r1, #32
 80044cc:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d12f      	bne.n	800453c <UART_RxISR_16BIT_FIFOEN+0x210>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044e2:	f3ef 8310 	mrs	r3, PRIMASK
 80044e6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80044e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044ea:	657b      	str	r3, [r7, #84]	; 0x54
 80044ec:	2301      	movs	r3, #1
 80044ee:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f2:	f383 8810 	msr	PRIMASK, r3
}
 80044f6:	46c0      	nop			; (mov r8, r8)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2110      	movs	r1, #16
 8004504:	438a      	bics	r2, r1
 8004506:	601a      	str	r2, [r3, #0]
 8004508:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800450a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800450c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800450e:	f383 8810 	msr	PRIMASK, r3
}
 8004512:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	69db      	ldr	r3, [r3, #28]
 800451a:	2210      	movs	r2, #16
 800451c:	4013      	ands	r3, r2
 800451e:	2b10      	cmp	r3, #16
 8004520:	d103      	bne.n	800452a <UART_RxISR_16BIT_FIFOEN+0x1fe>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2210      	movs	r2, #16
 8004528:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	225c      	movs	r2, #92	; 0x5c
 800452e:	5a9a      	ldrh	r2, [r3, r2]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	0011      	movs	r1, r2
 8004534:	0018      	movs	r0, r3
 8004536:	f7fe fb6b 	bl	8002c10 <HAL_UARTEx_RxEventCallback>
 800453a:	e003      	b.n	8004544 <UART_RxISR_16BIT_FIFOEN+0x218>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	0018      	movs	r0, r3
 8004540:	f7fc f86c 	bl	800061c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004544:	2366      	movs	r3, #102	; 0x66
 8004546:	18fb      	adds	r3, r7, r3
 8004548:	881b      	ldrh	r3, [r3, #0]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d004      	beq.n	8004558 <UART_RxISR_16BIT_FIFOEN+0x22c>
 800454e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004550:	2220      	movs	r2, #32
 8004552:	4013      	ands	r3, r2
 8004554:	d000      	beq.n	8004558 <UART_RxISR_16BIT_FIFOEN+0x22c>
 8004556:	e70c      	b.n	8004372 <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004558:	2052      	movs	r0, #82	; 0x52
 800455a:	183b      	adds	r3, r7, r0
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	215e      	movs	r1, #94	; 0x5e
 8004560:	5a52      	ldrh	r2, [r2, r1]
 8004562:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004564:	0001      	movs	r1, r0
 8004566:	187b      	adds	r3, r7, r1
 8004568:	881b      	ldrh	r3, [r3, #0]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d044      	beq.n	80045f8 <UART_RxISR_16BIT_FIFOEN+0x2cc>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2268      	movs	r2, #104	; 0x68
 8004572:	5a9b      	ldrh	r3, [r3, r2]
 8004574:	187a      	adds	r2, r7, r1
 8004576:	8812      	ldrh	r2, [r2, #0]
 8004578:	429a      	cmp	r2, r3
 800457a:	d23d      	bcs.n	80045f8 <UART_RxISR_16BIT_FIFOEN+0x2cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800457c:	f3ef 8310 	mrs	r3, PRIMASK
 8004580:	60fb      	str	r3, [r7, #12]
  return(result);
 8004582:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004584:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004586:	2301      	movs	r3, #1
 8004588:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	f383 8810 	msr	PRIMASK, r3
}
 8004590:	46c0      	nop			; (mov r8, r8)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	689a      	ldr	r2, [r3, #8]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	491a      	ldr	r1, [pc, #104]	; (8004608 <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 800459e:	400a      	ands	r2, r1
 80045a0:	609a      	str	r2, [r3, #8]
 80045a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	f383 8810 	msr	PRIMASK, r3
}
 80045ac:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a16      	ldr	r2, [pc, #88]	; (800460c <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 80045b2:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045b4:	f3ef 8310 	mrs	r3, PRIMASK
 80045b8:	61bb      	str	r3, [r7, #24]
  return(result);
 80045ba:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80045bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80045be:	2301      	movs	r3, #1
 80045c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	f383 8810 	msr	PRIMASK, r3
}
 80045c8:	46c0      	nop			; (mov r8, r8)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2120      	movs	r1, #32
 80045d6:	430a      	orrs	r2, r1
 80045d8:	601a      	str	r2, [r3, #0]
 80045da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045dc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045de:	6a3b      	ldr	r3, [r7, #32]
 80045e0:	f383 8810 	msr	PRIMASK, r3
}
 80045e4:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80045e6:	e007      	b.n	80045f8 <UART_RxISR_16BIT_FIFOEN+0x2cc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	699a      	ldr	r2, [r3, #24]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2108      	movs	r1, #8
 80045f4:	430a      	orrs	r2, r1
 80045f6:	619a      	str	r2, [r3, #24]
}
 80045f8:	46c0      	nop			; (mov r8, r8)
 80045fa:	46bd      	mov	sp, r7
 80045fc:	b01e      	add	sp, #120	; 0x78
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	fffffeff 	.word	0xfffffeff
 8004604:	effffffe 	.word	0xeffffffe
 8004608:	efffffff 	.word	0xefffffff
 800460c:	08003edd 	.word	0x08003edd

08004610 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b082      	sub	sp, #8
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004618:	46c0      	nop			; (mov r8, r8)
 800461a:	46bd      	mov	sp, r7
 800461c:	b002      	add	sp, #8
 800461e:	bd80      	pop	{r7, pc}

08004620 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004628:	46c0      	nop			; (mov r8, r8)
 800462a:	46bd      	mov	sp, r7
 800462c:	b002      	add	sp, #8
 800462e:	bd80      	pop	{r7, pc}

08004630 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b082      	sub	sp, #8
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004638:	46c0      	nop			; (mov r8, r8)
 800463a:	46bd      	mov	sp, r7
 800463c:	b002      	add	sp, #8
 800463e:	bd80      	pop	{r7, pc}

08004640 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2280      	movs	r2, #128	; 0x80
 800464c:	5c9b      	ldrb	r3, [r3, r2]
 800464e:	2b01      	cmp	r3, #1
 8004650:	d101      	bne.n	8004656 <HAL_UARTEx_DisableFifoMode+0x16>
 8004652:	2302      	movs	r3, #2
 8004654:	e027      	b.n	80046a6 <HAL_UARTEx_DisableFifoMode+0x66>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2280      	movs	r2, #128	; 0x80
 800465a:	2101      	movs	r1, #1
 800465c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2284      	movs	r2, #132	; 0x84
 8004662:	2124      	movs	r1, #36	; 0x24
 8004664:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2101      	movs	r1, #1
 800467a:	438a      	bics	r2, r1
 800467c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	4a0b      	ldr	r2, [pc, #44]	; (80046b0 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004682:	4013      	ands	r3, r2
 8004684:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	68fa      	ldr	r2, [r7, #12]
 8004692:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2284      	movs	r2, #132	; 0x84
 8004698:	2120      	movs	r1, #32
 800469a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2280      	movs	r2, #128	; 0x80
 80046a0:	2100      	movs	r1, #0
 80046a2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	0018      	movs	r0, r3
 80046a8:	46bd      	mov	sp, r7
 80046aa:	b004      	add	sp, #16
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	46c0      	nop			; (mov r8, r8)
 80046b0:	dfffffff 	.word	0xdfffffff

080046b4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2280      	movs	r2, #128	; 0x80
 80046c2:	5c9b      	ldrb	r3, [r3, r2]
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d101      	bne.n	80046cc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80046c8:	2302      	movs	r3, #2
 80046ca:	e02e      	b.n	800472a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2280      	movs	r2, #128	; 0x80
 80046d0:	2101      	movs	r1, #1
 80046d2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2284      	movs	r2, #132	; 0x84
 80046d8:	2124      	movs	r1, #36	; 0x24
 80046da:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	2101      	movs	r1, #1
 80046f0:	438a      	bics	r2, r1
 80046f2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	00db      	lsls	r3, r3, #3
 80046fc:	08d9      	lsrs	r1, r3, #3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	683a      	ldr	r2, [r7, #0]
 8004704:	430a      	orrs	r2, r1
 8004706:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	0018      	movs	r0, r3
 800470c:	f000 f854 	bl	80047b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	68fa      	ldr	r2, [r7, #12]
 8004716:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2284      	movs	r2, #132	; 0x84
 800471c:	2120      	movs	r1, #32
 800471e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2280      	movs	r2, #128	; 0x80
 8004724:	2100      	movs	r1, #0
 8004726:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004728:	2300      	movs	r3, #0
}
 800472a:	0018      	movs	r0, r3
 800472c:	46bd      	mov	sp, r7
 800472e:	b004      	add	sp, #16
 8004730:	bd80      	pop	{r7, pc}
	...

08004734 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2280      	movs	r2, #128	; 0x80
 8004742:	5c9b      	ldrb	r3, [r3, r2]
 8004744:	2b01      	cmp	r3, #1
 8004746:	d101      	bne.n	800474c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004748:	2302      	movs	r3, #2
 800474a:	e02f      	b.n	80047ac <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2280      	movs	r2, #128	; 0x80
 8004750:	2101      	movs	r1, #1
 8004752:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2284      	movs	r2, #132	; 0x84
 8004758:	2124      	movs	r1, #36	; 0x24
 800475a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2101      	movs	r1, #1
 8004770:	438a      	bics	r2, r1
 8004772:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	4a0e      	ldr	r2, [pc, #56]	; (80047b4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800477c:	4013      	ands	r3, r2
 800477e:	0019      	movs	r1, r3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	683a      	ldr	r2, [r7, #0]
 8004786:	430a      	orrs	r2, r1
 8004788:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	0018      	movs	r0, r3
 800478e:	f000 f813 	bl	80047b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	68fa      	ldr	r2, [r7, #12]
 8004798:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2284      	movs	r2, #132	; 0x84
 800479e:	2120      	movs	r1, #32
 80047a0:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2280      	movs	r2, #128	; 0x80
 80047a6:	2100      	movs	r1, #0
 80047a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80047aa:	2300      	movs	r3, #0
}
 80047ac:	0018      	movs	r0, r3
 80047ae:	46bd      	mov	sp, r7
 80047b0:	b004      	add	sp, #16
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	f1ffffff 	.word	0xf1ffffff

080047b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80047b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047ba:	b085      	sub	sp, #20
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d108      	bne.n	80047da <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	226a      	movs	r2, #106	; 0x6a
 80047cc:	2101      	movs	r1, #1
 80047ce:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2268      	movs	r2, #104	; 0x68
 80047d4:	2101      	movs	r1, #1
 80047d6:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80047d8:	e043      	b.n	8004862 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80047da:	260f      	movs	r6, #15
 80047dc:	19bb      	adds	r3, r7, r6
 80047de:	2208      	movs	r2, #8
 80047e0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80047e2:	200e      	movs	r0, #14
 80047e4:	183b      	adds	r3, r7, r0
 80047e6:	2208      	movs	r2, #8
 80047e8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	0e5b      	lsrs	r3, r3, #25
 80047f2:	b2da      	uxtb	r2, r3
 80047f4:	240d      	movs	r4, #13
 80047f6:	193b      	adds	r3, r7, r4
 80047f8:	2107      	movs	r1, #7
 80047fa:	400a      	ands	r2, r1
 80047fc:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	0f5b      	lsrs	r3, r3, #29
 8004806:	b2da      	uxtb	r2, r3
 8004808:	250c      	movs	r5, #12
 800480a:	197b      	adds	r3, r7, r5
 800480c:	2107      	movs	r1, #7
 800480e:	400a      	ands	r2, r1
 8004810:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004812:	183b      	adds	r3, r7, r0
 8004814:	781b      	ldrb	r3, [r3, #0]
 8004816:	197a      	adds	r2, r7, r5
 8004818:	7812      	ldrb	r2, [r2, #0]
 800481a:	4914      	ldr	r1, [pc, #80]	; (800486c <UARTEx_SetNbDataToProcess+0xb4>)
 800481c:	5c8a      	ldrb	r2, [r1, r2]
 800481e:	435a      	muls	r2, r3
 8004820:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004822:	197b      	adds	r3, r7, r5
 8004824:	781b      	ldrb	r3, [r3, #0]
 8004826:	4a12      	ldr	r2, [pc, #72]	; (8004870 <UARTEx_SetNbDataToProcess+0xb8>)
 8004828:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800482a:	0019      	movs	r1, r3
 800482c:	f7fb fcf4 	bl	8000218 <__divsi3>
 8004830:	0003      	movs	r3, r0
 8004832:	b299      	uxth	r1, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	226a      	movs	r2, #106	; 0x6a
 8004838:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800483a:	19bb      	adds	r3, r7, r6
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	193a      	adds	r2, r7, r4
 8004840:	7812      	ldrb	r2, [r2, #0]
 8004842:	490a      	ldr	r1, [pc, #40]	; (800486c <UARTEx_SetNbDataToProcess+0xb4>)
 8004844:	5c8a      	ldrb	r2, [r1, r2]
 8004846:	435a      	muls	r2, r3
 8004848:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800484a:	193b      	adds	r3, r7, r4
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	4a08      	ldr	r2, [pc, #32]	; (8004870 <UARTEx_SetNbDataToProcess+0xb8>)
 8004850:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004852:	0019      	movs	r1, r3
 8004854:	f7fb fce0 	bl	8000218 <__divsi3>
 8004858:	0003      	movs	r3, r0
 800485a:	b299      	uxth	r1, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2268      	movs	r2, #104	; 0x68
 8004860:	5299      	strh	r1, [r3, r2]
}
 8004862:	46c0      	nop			; (mov r8, r8)
 8004864:	46bd      	mov	sp, r7
 8004866:	b005      	add	sp, #20
 8004868:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800486a:	46c0      	nop			; (mov r8, r8)
 800486c:	0800495c 	.word	0x0800495c
 8004870:	08004964 	.word	0x08004964

08004874 <__libc_init_array>:
 8004874:	b570      	push	{r4, r5, r6, lr}
 8004876:	2600      	movs	r6, #0
 8004878:	4d0c      	ldr	r5, [pc, #48]	; (80048ac <__libc_init_array+0x38>)
 800487a:	4c0d      	ldr	r4, [pc, #52]	; (80048b0 <__libc_init_array+0x3c>)
 800487c:	1b64      	subs	r4, r4, r5
 800487e:	10a4      	asrs	r4, r4, #2
 8004880:	42a6      	cmp	r6, r4
 8004882:	d109      	bne.n	8004898 <__libc_init_array+0x24>
 8004884:	2600      	movs	r6, #0
 8004886:	f000 f821 	bl	80048cc <_init>
 800488a:	4d0a      	ldr	r5, [pc, #40]	; (80048b4 <__libc_init_array+0x40>)
 800488c:	4c0a      	ldr	r4, [pc, #40]	; (80048b8 <__libc_init_array+0x44>)
 800488e:	1b64      	subs	r4, r4, r5
 8004890:	10a4      	asrs	r4, r4, #2
 8004892:	42a6      	cmp	r6, r4
 8004894:	d105      	bne.n	80048a2 <__libc_init_array+0x2e>
 8004896:	bd70      	pop	{r4, r5, r6, pc}
 8004898:	00b3      	lsls	r3, r6, #2
 800489a:	58eb      	ldr	r3, [r5, r3]
 800489c:	4798      	blx	r3
 800489e:	3601      	adds	r6, #1
 80048a0:	e7ee      	b.n	8004880 <__libc_init_array+0xc>
 80048a2:	00b3      	lsls	r3, r6, #2
 80048a4:	58eb      	ldr	r3, [r5, r3]
 80048a6:	4798      	blx	r3
 80048a8:	3601      	adds	r6, #1
 80048aa:	e7f2      	b.n	8004892 <__libc_init_array+0x1e>
 80048ac:	08004974 	.word	0x08004974
 80048b0:	08004974 	.word	0x08004974
 80048b4:	08004974 	.word	0x08004974
 80048b8:	08004978 	.word	0x08004978

080048bc <memset>:
 80048bc:	0003      	movs	r3, r0
 80048be:	1882      	adds	r2, r0, r2
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d100      	bne.n	80048c6 <memset+0xa>
 80048c4:	4770      	bx	lr
 80048c6:	7019      	strb	r1, [r3, #0]
 80048c8:	3301      	adds	r3, #1
 80048ca:	e7f9      	b.n	80048c0 <memset+0x4>

080048cc <_init>:
 80048cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ce:	46c0      	nop			; (mov r8, r8)
 80048d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048d2:	bc08      	pop	{r3}
 80048d4:	469e      	mov	lr, r3
 80048d6:	4770      	bx	lr

080048d8 <_fini>:
 80048d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048da:	46c0      	nop			; (mov r8, r8)
 80048dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048de:	bc08      	pop	{r3}
 80048e0:	469e      	mov	lr, r3
 80048e2:	4770      	bx	lr
